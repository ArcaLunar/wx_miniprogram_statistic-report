{"version":3,"sources":["index.js","package.json"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["//\r\n// fast-image-size - Simple stand alone module to just extract the image size from image file without using special image libraries.\r\n//\r\n// Please refer to README.md for this module's documentations.\r\n//\r\n// NOTE:\r\n// - Before changing this code please refer to the 'hacking the code section' on README.md.\r\n//\r\n// Copyright (c) 2013 Ziv Barber;\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining\r\n// a copy of this software and associated documentation files (the\r\n// 'Software'), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to\r\n// permit persons to whom the Software is furnished to do so, subject to\r\n// the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be\r\n// included in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\n// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n//\r\n\r\nvar fast_image_size_info = require('./package.json');\r\nvar fs = require('fs');\r\n\r\nmodule.exports = exports = function ( file_path, callback ) {\r\n\t// Internal options:\r\n\tif ( file_path == '@version@' ) {\r\n\t\treturn fast_image_size_info.version;\r\n\t} // Endif.\r\n\r\n\tfunction getJpgSize( buffer_data, retInfo ) {\r\n\t  // Skip 5 chars, they are for signature\r\n\t  buffer_data = buffer_data.slice( 4 );\r\n\r\n\t  var i, next;\r\n\t  while (buffer_data.length) {\r\n\t    // read length of the next block\r\n\t    i = buffer_data.readUInt16BE( 0 );\r\n\r\n\t    // 0xFFC0 is baseline(SOF)\r\n\t    // 0xFFC2 is progressive(SOF2)\r\n\t    next = buffer_data[ i + 1 ];\r\n\t    if (next === 0xC0 || next === 0xC2) {\r\n\t      return {\r\n\t        'height' : buffer_data.readUInt16BE( i + 5 ),\r\n\t        'width' : buffer_data.readUInt16BE( i + 7 )\r\n\t      };\r\n\t    }\r\n\r\n\t    // move to the next block\r\n\t    buffer_data = buffer_data.slice( i + 2 );\r\n\t  }\r\n\t}\r\n\r\n\tfunction parseHeaderData ( buffer_data, callback_data ) {\r\n\t\tvar retInfo = {};\r\n\r\n\t\t// Detect GIF:\r\n\t\tif ( buffer_data[0] == 0x47 && buffer_data[1] == 0x49 && buffer_data[2] == 0x46 ) {\r\n\t\t\tretInfo.type = 'gif';\r\n\t\t\tretInfo.width = (buffer_data[7] * 256) + buffer_data[6];\r\n\t\t\tretInfo.height = (buffer_data[9] * 256) + buffer_data[8];\r\n\r\n\t\t// Detect JPEG:\r\n\t\t} else if ( buffer_data[0] == 0xFF && buffer_data[1] == 0xD8 && buffer_data[2] == 0xFF && buffer_data[3] == 0xE0 ) {\r\n\t\t  retInfo.type = 'jpeg';\r\n\t\t  var size = getJpgSize( buffer_data, retInfo );\r\n\t\t  retInfo.width = size.width;\r\n\t\t  retInfo.height = size.height;\r\n\r\n\t\t// Detect PNG:\r\n\t\t} else if ( buffer_data[0] == 137 && buffer_data[1] == 80 && buffer_data[2] == 78 && buffer_data[3] == 71 && buffer_data[4] == 13 && buffer_data[5] == 10 && buffer_data[6] == 26 && buffer_data[7] == 10 ) {\r\n\t\t\tretInfo.type = 'png';\r\n\r\n\t\t\tif ( buffer_data[12] == 0x49 && buffer_data[13] == 0x48 && buffer_data[14] == 0x44 && buffer_data[15] == 0x52 ) {\r\n\t\t\t\tretInfo.width = (buffer_data[16] * 256 * 256 * 256) + (buffer_data[17] * 256 * 256) + (buffer_data[18] * 256) + buffer_data[19];\r\n\t\t\t\tretInfo.height = (buffer_data[20] * 256 * 256 * 256) + (buffer_data[21] * 256 * 256) + (buffer_data[22] * 256) + buffer_data[23];\r\n\t\t\t} // Endif.\r\n\r\n\t\t// Detect BMP:\r\n\t\t} else if ( buffer_data[0] == 0x42 && buffer_data[1] == 0x4D ) {\r\n\t\t\tretInfo.type = 'bmp';\r\n\t\t\tretInfo.width = (buffer_data[21] * 256 * 256 * 256) + (buffer_data[20] * 256 * 256) + (buffer_data[19] * 256) + buffer_data[18];\r\n\t\t\tretInfo.height = (buffer_data[25] * 256 * 256 * 256) + (buffer_data[24] * 256 * 256) + (buffer_data[23] * 256) + buffer_data[22];\r\n\t\t} // Endif.\r\n\r\n\t\tretInfo.image = file_path;\r\n\t\tif ( !retInfo.type ) {\r\n\t\t\tretInfo.type = 'unknown';\r\n\t\t} // Endif.\r\n\r\n\t\tif ( callback_data ) {\r\n\t\t\tcallback_data ( retInfo );\r\n\t\t} // Endif.\r\n\r\n\t\treturn retInfo;\r\n\t};\r\n\r\n\t// Async mode:\r\n\tif ( callback ) {\r\n\t  fs.exists ( file_path, function( exists ) {\r\n\t    if ( exists ) {\r\n\t      fs.open ( file_path, \"r\", function ( error, fd ) {\r\n\t        var bufferSize = fs.fstatSync( fd ).size;\r\n\t        var buffer = new Buffer( bufferSize );\r\n\t        fs.read ( fd, buffer, 0, bufferSize, null, function ( error, bytesRead, buffer ) {\r\n\t          fs.close ( fd );\r\n\t          parseHeaderData ( buffer, callback );\r\n\t        });\r\n\t      });\r\n\t\t\t} else {\r\n\t\t\t\tthrow 'Error: Invalid file name.';\r\n\t\t\t} // Endif.\r\n\t\t});\r\n\r\n\t// Sync mode:\r\n\t} else {\r\n\t\tvar fd = fs.openSync ( file_path, \"r\" );\r\n\t\tvar bufferSize = fs.fstatSync( fd ).size;\r\n\t\tvar buffer = new Buffer( bufferSize );\r\n\t\tvar bytesRead = fs.readSync ( fd, buffer, 0, bufferSize, 0 );\r\n\t\tfs.closeSync ( fd );\r\n\t\treturn parseHeaderData ( buffer, null );\r\n\t} // Endif.\r\n};\r\n\r\n","module.exports = {\r\n\t\"name\": \"fast-image-size\",\r\n\t\"description\": \"Simple stand alone module to just extract the image size from image file without using special image libraries.\",\r\n\t\"version\": \"0.1.3\",\r\n\t\"url\": \"https://github.com/Ziv-Barber/fast-image-size\",\r\n\t\"keywords\": [\r\n\t\t\"get image size\",\r\n\t\t\"image size\",\r\n\t\t\"stand alone\",\r\n\t\t\"pure java script\",\r\n\t\t\"gif\",\r\n\t\t\"png\",\r\n\t\t\"bmp\",\r\n\t\t\"jpg\",\r\n\t\t\"jpeg\"\r\n\t],\r\n\t\"repository\": {\r\n\t\t\"type\": \"git\",\r\n\t\t\"url\": \"git://github.com/Ziv-Barber/fast-image-size.git\"\r\n\t},\r\n\t\"bugs\": {\r\n\t\t\"url\": \"https://github.com/Ziv-Barber/fast-image-size/issues\"\r\n\t},\r\n\t\"main\": \"./index.js\",\r\n\t\"directories\": {\r\n\t\t\"examples\": \"examples\"\r\n\t},\r\n    \"author\": {\r\n        \"name\": \"Ziv Barber\",\r\n        \"url\": \"http://code.zivbarber.com/\"\r\n    },\r\n    \"license\": \"MIT\"\r\n}\r\n"]}