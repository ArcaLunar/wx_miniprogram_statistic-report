{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["var fs   = require('fs'),\n  Path   = require('path'),\n  util   = require('util'),\n  EE     = require('events').EventEmitter;\n\nfunction fsExists(file, cb) {\n  if (!fs.access) return fs.exists(file, cb);\n  fs.access(file, function(err) {\n    cb(err ? false : true);\n  });\n}\n\nfunction fsExistsSync(file) {\n  if (!fs.accessSync) return fs.existsSync(file);\n  try {\n    fs.accessSync(file);\n  } catch(err) {\n    return false;\n  }\n  return true;\n}\n\nmodule.exports = function(dir, iterator, options, callback){\n  return FindUp(dir, iterator, options, callback);\n};\n\nfunction FindUp(dir, iterator, options, callback){\n  if (!(this instanceof FindUp)) {\n    return new FindUp(dir, iterator, options, callback);\n  }\n  if(typeof options === 'function'){\n    callback = options;\n    options = {};\n  }\n  options = options ||Â {};\n\n  EE.call(this);\n  this.found = false;\n  this.stopPlease = false;\n  var self = this;\n\n  if(typeof iterator === 'string'){\n    var file = iterator;\n    iterator = function(dir, cb){\n      return fsExists(Path.join(dir, file), cb);\n    };\n  }\n\n  if(callback) {\n    this.on('found', function(dir){\n      if(options.verbose) console.log(('found '+ dir ));\n      callback(null, dir);\n      self.stop();\n    });\n\n    this.on('end', function(){\n      if(options.verbose) console.log('end');\n      if(!self.found) callback(new Error('not found'));\n    });\n\n    this.on('error', function(err){\n      if(options.verbose) console.log('error', err);\n      callback(err);\n    });\n  }\n\n  this._find(dir, iterator, options, callback);\n}\nutil.inherits(FindUp, EE);\n\nFindUp.prototype._find = function(dir, iterator, options, callback, currentDepth){\n  var self = this;\n  if (typeof currentDepth !== 'number') currentDepth = 0;\n\n  iterator(dir, function(exists){\n    if(options.verbose) console.log(('traverse '+ dir));\n    if (typeof options.maxdepth === 'number' && options.maxdepth >= 0 && currentDepth > options.maxdepth) {\n      return self.emit('end');\n    }\n    currentDepth++;\n    if(exists) {\n      self.found = true;\n      self.emit('found', dir);\n    }\n\n    var parentDir = Path.join(dir, '..');\n    if (self.stopPlease) return self.emit('end');\n    if (dir === parentDir) return self.emit('end');\n    if(dir.indexOf('../../') !== -1 ) return self.emit('error', new Error(dir + ' is not correct.'));\n    self._find(parentDir, iterator, options, callback, currentDepth);\n  });\n};\n\nFindUp.prototype.stop = function(){\n  this.stopPlease = true;\n};\n\nmodule.exports.FindUp = FindUp;\n\nmodule.exports.sync = function(dir, iteratorSync, options){\n  if(typeof iteratorSync === 'string'){\n    var file = iteratorSync;\n    iteratorSync = function(dir){\n      return fsExistsSync(Path.join(dir, file));\n    };\n  }\n  options = options || {};\n  var initialDir = dir;\n  var currentDepth = 0;\n  while(dir !== Path.join(dir, '..')){\n    if (typeof options.maxdepth === 'number' && options.maxdepth >= 0 && currentDepth > options.maxdepth) {\n      break;\n    }\n    currentDepth++;\n    if(dir.indexOf('../../') !== -1 ) throw new Error(initialDir + ' is not correct.');\n    if(iteratorSync(dir)) return dir;\n    dir = Path.join(dir, '..');\n  }\n  throw new Error('not found');\n};\n"]}