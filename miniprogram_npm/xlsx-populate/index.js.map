{"version":3,"sources":["XlsxPopulate.js","externals.js","Workbook.js","regexify.js","blank.js","xmlq.js","Sheet.js","Cell.js","ArgHandler.js","addressConverter.js","dateConverter.js","FormulaError.js","Style.js","colorIndexes.js","RichText.js","RichTextFragment.js","Row.js","Column.js","Range.js","Relationships.js","PageBreaks.js","ContentTypes.js","AppProperties.js","CoreProperties.js","SharedStrings.js","StyleSheet.js","Encryptor.js","XmlParser.js","XmlBuilder.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA,AENA;ADIA,AFMA,ACHA,AENA;ADIA,AFMA,ACHA,AENA;ADIA,AFMA,AIZA,AHSA,AENA;ADIA,AFMA,AIZA,AHSA,AENA;ADIA,AFMA,AIZA,AHSA,AENA;ADIA,AFMA,AIZA,AHSA,AENA,AENA;AHUA,AFMA,AIZA,AHSA,AENA,AENA;AHUA,AFMA,ACHA,AENA,AENA;ACFA,AJYA,AFMA,ACHA,AENA,AENA;ACFA,AJYA,AFMA,ACHA,AENA,AENA;ACFA,AJYA,AFMA,ACHA,AENA,AENA;AELA,ADGA,AJYA,AFMA,ACHA,AENA,AENA;AELA,ADGA,AJYA,AFMA,ACHA,AENA,AENA;AELA,ADGA,AJYA,AFMA,ACHA,AENA,AENA;AGRA,ADGA,ADGA,AJYA,AFMA,ACHA,AENA,AENA;AGRA,ADGA,ADGA,AJYA,AFMA,AGTA,AENA;AGRA,ADGA,ADGA,AJYA,AFMA,AGTA,AENA;AGRA,ADGA,ADGA,AJYA,AFMA,AS3BA,ANkBA,AENA;AGRA,ADGA,ADGA,AJYA,AFMA,AS3BA,ANkBA,AENA;AGRA,ADGA,ADGA,AJYA,AFMA,AS3BA,AJYA;AGRA,ADGA,ADGA,AJYA,AFMA,AS3BA,ACHA,ALeA;AGRA,ADGA,ADGA,AJYA,AFMA,AS3BA,ACHA,ALeA;AGRA,ADGA,ADGA,AJYA,AFMA,AS3BA,ACHA,ALeA;AGRA,ADGA,AIZA,ALeA,AJYA,AFMA,AS3BA,ACHA,ALeA;AGRA,ADGA,AIZA,ALeA,AJYA,AFMA,AS3BA,ACHA,ALeA;AGRA,ADGA,AIZA,ALeA,AJYA,AFMA,AS3BA,ACHA,ALeA;AGRA,ADGA,AIZA,ALeA,AMlBA,AV8BA,AFMA,AS3BA,ACHA,ALeA;AGRA,ADGA,AIZA,ALeA,AMlBA,AV8BA,AFMA,AS3BA,ACHA,ALeA;AGRA,ADGA,AIZA,ALeA,AMlBA,AV8BA,AFMA,AS3BA,ACHA,ALeA;AGRA,ADGA,AIZA,ALeA,AMlBA,AV8BA,AFMA,AS3BA,AIZA,AHSA,ALeA;AGRA,ADGA,AIZA,ALeA,AMlBA,AV8BA,AFMA,AS3BA,AIZA,AHSA,ALeA;AGRA,ADGA,AIZA,ALeA,AMlBA,AV8BA,AFMA,AS3BA,AIZA,AHSA,ALeA;AGRA,ADGA,AIZA,AGTA,ARwBA,AMlBA,AV8BA,AFMA,AS3BA,AIZA,AHSA,ALeA;AGRA,ADGA,AIZA,AGTA,ARwBA,AMlBA,AV8BA,AFMA,AS3BA,AIZA,AHSA,ALeA;AGRA,ADGA,AIZA,AGTA,ARwBA,AMlBA,AV8BA,AFMA,AS3BA,AIZA,AHSA,ALeA;AGRA,ADGA,AIZA,AGTA,ACHA,AT2BA,AMlBA,AV8BA,AFMA,AS3BA,AIZA,AHSA,ALeA;AGRA,ADGA,AIZA,AGTA,ACHA,AT2BA,AMlBA,AV8BA,AFMA,AS3BA,AIZA,AHSA,ALeA;AGRA,ADGA,AIZA,AGTA,ACHA,AT2BA,AMlBA,AV8BA,AFMA,AS3BA,AIZA,AHSA,ALeA;AGRA,ADGA,AIZA,AGTA,ACHA,ACHA,AV8BA,AMlBA,AV8BA,AFMA,AS3BA,AIZA,AHSA,ALeA;AGRA,ADGA,AIZA,AGTA,ACHA,ACHA,AV8BA,AMlBA,AV8BA,AFMA,AS3BA,AIZA,AHSA,ALeA;AGRA,ADGA,AIZA,AGTA,ACHA,ACHA,AV8BA,AMlBA,AV8BA,AFMA,AS3BA,AIZA,AHSA,ALeA;AGRA,ADGA,AU9BA,ANkBA,AGTA,ACHA,ACHA,AV8BA,AMlBA,AV8BA,AFMA,AS3BA,AIZA,AHSA,ALeA;AGRA,ADGA,AU9BA,ANkBA,AGTA,ACHA,ACHA,AV8BA,AMlBA,AV8BA,AFMA,AS3BA,AIZA,AHSA,ALeA;AGRA,ADGA,AU9BA,ANkBA,AGTA,ACHA,ACHA,AV8BA,AMlBA,AV8BA,AFMA,AS3BA,AIZA,AHSA,ALeA;AGRA,ADGA,AU9BA,ANkBA,AOrBA,AJYA,ACHA,ACHA,AV8BA,AMlBA,AV8BA,AFMA,AS3BA,AIZA,AHSA,ALeA;AGRA,ADGA,AU9BA,ANkBA,AOrBA,AJYA,ACHA,ACHA,AV8BA,AMlBA,AV8BA,AFMA,AS3BA,AIZA,AHSA,ALeA;AGRA,ADGA,AU9BA,ANkBA,AOrBA,AJYA,ACHA,ACHA,AV8BA,AMlBA,AV8BA,AFMA,AS3BA,AIZA,AHSA,ALeA;AGRA,ADGA,AU9BA,ANkBA,AOrBA,ACHA,ALeA,ACHA,ACHA,AV8BA,AMlBA,AV8BA,AFMA,AS3BA,AIZA,AHSA,ALeA;AGRA,ADGA,AU9BA,ANkBA,AOrBA,ACHA,ALeA,ACHA,ACHA,AV8BA,AMlBA,AV8BA,AFMA,AS3BA,AIZA,AHSA,ALeA;AGRA,ADGA,AU9BA,ANkBA,AOrBA,ACHA,ALeA,ACHA,ACHA,AV8BA,AMlBA,AV8BA,AFMA,AS3BA,AIZA,AHSA,ALeA;AGRA,ADGA,AU9BA,ANkBA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AV8BA,AMlBA,AV8BA,AFMA,AS3BA,AIZA,AHSA,ALeA;AGRA,ADGA,AU9BA,ANkBA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AV8BA,AMlBA,AV8BA,AFMA,AS3BA,AIZA,AHSA,ALeA;AGRA,ADGA,AU9BA,ANkBA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AV8BA,AMlBA,AV8BA,AFMA,AS3BA,AIZA,AHSA,ALeA;AGRA,ADGA,AU9BA,AIZA,AV8BA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AV8BA,AMlBA,AV8BA,AFMA,AS3BA,AIZA,AHSA,ALeA;AGRA,ADGA,AU9BA,AIZA,AV8BA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AV8BA,AMlBA,AV8BA,AFMA,AS3BA,AIZA,AHSA,ALeA;AGRA,ADGA,AU9BA,AIZA,AV8BA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AV8BA,AMlBA,AV8BA,AFMA,AS3BA,AIZA,AHSA,ALeA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AV8BA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AV8BA,AMlBA,AV8BA,AFMA,AS3BA,AIZA,AHSA,ALeA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AV8BA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AV8BA,AMlBA,AV8BA,AFMA,AS3BA,AIZA,AHSA,ALeA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AV8BA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AV8BA,AMlBA,AV8BA,AFMA,AS3BA,AIZA,AHSA,ALeA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AENA,AZoCA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AV8BA,AMlBA,AV8BA,AFMA,AS3BA,AIZA,AHSA,ALeA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AENA,AZoCA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AV8BA,AMlBA,AV8BA,AFMA,AS3BA,AIZA,AHSA,ALeA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AENA,AZoCA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AV8BA,AMlBA,AV8BA,AFMA,AS3BA,AIZA,AHSA,ALeA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AENA,AZoCA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AV8BA,AFMA,AS3BA,AIZA,AHSA,ALeA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AENA,AZoCA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AV8BA,AFMA,AS3BA,AIZA,AHSA,ALeA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AENA,AZoCA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AV8BA,AFMA,AS3BA,AIZA,AHSA,ALeA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AENA,AZoCA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AFMA,AS3BA,AIZA,AHSA,ALeA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AENA,AZoCA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AFMA,AS3BA,AIZA,AHSA,ALeA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AENA,AZoCA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AFMA,AS3BA,AIZA,AHSA,ALeA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AENA,AGTA,Af6CA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AFMA,AS3BA,AIZA,AHSA,ALeA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AENA,AGTA,Af6CA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AFMA,AS3BA,AIZA,AHSA,ALeA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AENA,AGTA,Af6CA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AFMA,AS3BA,AIZA,AHSA,ALeA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AENA,AGTA,Af6CA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AFMA,A2BjFA,AlBsDA,AIZA,AHSA,ALeA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AENA,AGTA,Af6CA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AFMA,A2BjFA,AlBsDA,AIZA,AHSA,ALeA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AENA,AGTA,Af6CA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AFMA,A2BjFA,AlBsDA,AIZA,AHSA,ALeA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AENA,AGTA,Af6CA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AFMA,A4BpFA,ADGA,AlBsDA,AIZA,AHSA,ALeA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AENA,AGTA,Af6CA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AFMA,A4BpFA,ADGA,AlBsDA,AIZA,AHSA,ALeA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AENA,AGTA,Af6CA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AFMA,A4BpFA,ADGA,AlBsDA,AIZA,AHSA,ALeA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AENA,AGTA,Af6CA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AFMA,A4BpFA,ADGA,AlBsDA,AIZA,AHSA,ALeA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AENA,AGTA,Af6CA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AFMA,A4BpFA,ADGA,AlBsDA,AIZA,AHSA,ALeA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AENA,AGTA,Af6CA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AFMA,A4BpFA,ADGA,AlBsDA,AIZA,AHSA,ALeA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AENA,AGTA,Af6CA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AFMA,A4BpFA,ADGA,AlBsDA,AIZA,AHSA,ALeA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AENA,AGTA,Af6CA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AFMA,A4BpFA,ADGA,AlBsDA,AIZA,AHSA,ALeA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AENA,AGTA,Af6CA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AFMA,A4BpFA,ADGA,AlBsDA,AIZA,ARwBA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AENA,AGTA,Af6CA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AIZA,ARwBA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AENA,AGTA,Af6CA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AIZA,ARwBA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AENA,AGTA,Af6CA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AIZA,ARwBA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AENA,AGTA,Af6CA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AIZA,ARwBA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AENA,AGTA,Af6CA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AIZA,ARwBA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AENA,AGTA,Af6CA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AIZA,ARwBA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AENA,AGTA,Af6CA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AIZA,ARwBA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AENA,AGTA,Af6CA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AIZA,ARwBA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AENA,AGTA,Af6CA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AIZA,ARwBA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AENA,AGTA,Af6CA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AIZA,ARwBA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AENA,AGTA,Af6CA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AIZA,ARwBA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AENA,AGTA,Af6CA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AIZA,ARwBA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AENA,AGTA,Af6CA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AIZA,ARwBA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AENA,AGTA,Af6CA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AIZA,ARwBA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AENA,AGTA,Af6CA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AIZA,ARwBA;AiBlDA,Ad0CA,ADGA,AU9BA,AIZA,AENA,AGTA,Af6CA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AIZA,ARwBA;AiBlDA,Af6CA,AU9BA,AIZA,AENA,AGTA,Af6CA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AIZA,ARwBA;AiBlDA,Af6CA,AU9BA,AIZA,AENA,AGTA,Af6CA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AIZA,ARwBA;AiBlDA,Af6CA,AU9BA,AIZA,AENA,AGTA,Af6CA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AIZA,ARwBA;AiBlDA,Af6CA,AU9BA,AIZA,AENA,AGTA,Af6CA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AIZA,ARwBA;AiBlDA,Af6CA,AU9BA,AIZA,AENA,AGTA,Af6CA,AS3BA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AIZA,ARwBA;AiBlDA,Af6CA,AU9BA,AIZA,AENA,AGTA,ANkBA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AiBlDA,Af6CA,AU9BA,AIZA,AENA,AGTA,ANkBA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AiBlDA,Af6CA,AU9BA,AIZA,AENA,AGTA,ANkBA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AiBlDA,Af6CA,AU9BA,AIZA,AENA,AGTA,ANkBA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AiBlDA,Af6CA,AU9BA,AIZA,AENA,AGTA,ANkBA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AiBlDA,Af6CA,AU9BA,AIZA,AENA,AGTA,ANkBA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AiBlDA,Af6CA,AU9BA,AIZA,AENA,AGTA,ANkBA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AiBlDA,Af6CA,AU9BA,AIZA,AENA,AGTA,ANkBA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AiBlDA,Af6CA,AU9BA,AIZA,AENA,AGTA,ANkBA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AiBlDA,Af6CA,AU9BA,AIZA,AENA,AGTA,ANkBA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AiBlDA,Af6CA,AU9BA,AIZA,AENA,AGTA,ANkBA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AiBlDA,Af6CA,AU9BA,AIZA,AENA,AGTA,ANkBA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AiBlDA,Af6CA,AU9BA,AIZA,AENA,AGTA,ANkBA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AiBlDA,Af6CA,AU9BA,AIZA,AENA,AGTA,ANkBA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AiBlDA,Af6CA,AU9BA,AIZA,AENA,AGTA,ANkBA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AiBlDA,Af6CA,AU9BA,AIZA,AENA,AGTA,ANkBA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AiBlDA,Af6CA,AU9BA,AIZA,AENA,AGTA,ANkBA,AFMA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AiBlDA,Af6CA,AU9BA,AIZA,AENA,AGTA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AiBlDA,Af6CA,AU9BA,AIZA,AENA,AGTA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AiBlDA,Af6CA,AU9BA,AIZA,AENA,AGTA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AiBlDA,Af6CA,AU9BA,AIZA,AENA,AGTA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AiBlDA,Af6CA,AU9BA,AIZA,AENA,AGTA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AiBlDA,Af6CA,AU9BA,AIZA,AENA,AGTA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AiBlDA,Af6CA,AU9BA,AIZA,AENA,AGTA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AiBlDA,Af6CA,AU9BA,AMlBA,AGTA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AiBlDA,Af6CA,AU9BA,AMlBA,AGTA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AiBlDA,Af6CA,AU9BA,AMlBA,AGTA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AiBlDA,Af6CA,AU9BA,AMlBA,AGTA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AELA,AU9BA,AMlBA,AGTA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AELA,AU9BA,AMlBA,AGTA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AELA,AU9BA,AMlBA,AGTA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AELA,AU9BA,AMlBA,AGTA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AELA,AU9BA,AMlBA,AGTA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AELA,AU9BA,AMlBA,AGTA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AELA,AU9BA,AMlBA,AGTA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AELA,AU9BA,AMlBA,AGTA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AELA,AU9BA,AMlBA,AGTA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AELA,AU9BA,AMlBA,AGTA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AELA,AU9BA,AMlBA,AGTA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AELA,AU9BA,AMlBA,AGTA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AELA,AU9BA,AMlBA,AGTA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AELA,AU9BA,AMlBA,AGTA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AELA,AU9BA,AMlBA,AGTA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AELA,AU9BA,AS3BA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AELA,AU9BA,AS3BA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AELA,AU9BA,AS3BA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AELA,AU9BA,AS3BA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AELA,AU9BA,AS3BA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AELA,AU9BA,AS3BA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AELA,AU9BA,AS3BA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AELA,AU9BA,AS3BA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AELA,AU9BA,AS3BA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AELA,AU9BA,AS3BA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AELA,AU9BA,AS3BA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AELA,AU9BA,AS3BA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AELA,AU9BA,AS3BA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,ADGA,AlBsDA,AJYA;AELA,AU9BA,AS3BA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,AnByDA,AJYA;AELA,AU9BA,AS3BA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,AnByDA,AJYA;AELA,AU9BA,AS3BA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,AnByDA,AJYA;AELA,AU9BA,AS3BA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,AnByDA,AJYA;AELA,AU9BA,AS3BA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,AnByDA,AJYA;AELA,AU9BA,AS3BA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,AnByDA,AJYA;AELA,AU9BA,AS3BA,ARwBA,ACHA,ALeA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,AnByDA,AJYA;AELA,AU9BA,AS3BA,ARwBA,AJYA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,AnByDA,AJYA;AELA,AU9BA,AS3BA,ARwBA,AJYA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,AnByDA,AJYA;AELA,AU9BA,AS3BA,ARwBA,AJYA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,AnByDA,AJYA;AELA,AU9BA,AS3BA,ARwBA,AJYA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,AnByDA,AJYA;AELA,AU9BA,AS3BA,ARwBA,AJYA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,AnByDA,AJYA;AELA,AU9BA,AS3BA,ARwBA,AJYA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,AnByDA,AJYA;AELA,AU9BA,AS3BA,ARwBA,AJYA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,AnByDA,AJYA;AELA,AU9BA,AS3BA,ARwBA,AJYA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,AnByDA,AJYA;AELA,AU9BA,AS3BA,ARwBA,AJYA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,AnByDA,AJYA;AELA,AU9BA,AS3BA,ARwBA,AJYA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,A0B9EA,AnByDA,AJYA;AELA,AU9BA,AS3BA,ARwBA,AJYA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AOrBA,AJYA;AELA,AU9BA,AS3BA,ARwBA,AJYA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AOrBA,AJYA;AELA,AU9BA,AS3BA,ARwBA,AJYA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AOrBA,AJYA;AELA,AU9BA,AS3BA,ARwBA,AJYA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AOrBA,AJYA;AELA,AU9BA,AS3BA,ARwBA,AJYA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AOrBA,AJYA;AELA,AU9BA,AS3BA,ARwBA,AJYA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AOrBA,AJYA;AELA,AU9BA,AS3BA,ARwBA,AJYA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AOrBA,AJYA;AELA,AU9BA,AS3BA,ARwBA,AJYA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AOrBA,AJYA;AELA,AU9BA,AS3BA,ARwBA,AJYA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AOrBA,AJYA;AELA,AU9BA,AS3BA,ARwBA,AJYA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AOrBA,AJYA;AELA,AU9BA,AS3BA,ARwBA,AJYA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AOrBA,AJYA;AELA,AU9BA,AS3BA,ARwBA,AJYA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AOrBA,AJYA;AELA,AU9BA,AS3BA,ARwBA,AJYA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AOrBA,AJYA;AELA,AU9BA,AS3BA,ARwBA,AJYA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AOrBA,AJYA;AELA,AU9BA,AS3BA,ARwBA,AJYA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AOrBA,AJYA;AELA,AU9BA,AS3BA,ARwBA,AJYA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AOrBA,AJYA;AELA,AU9BA,AS3BA,ARwBA,AJYA,ACHA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AOrBA,AJYA;AELA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AOrBA,AJYA;AELA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AOrBA,AJYA;AELA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AOrBA,AJYA;AELA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AOrBA,AJYA;AELA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AOrBA,AJYA;AELA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AOrBA,AJYA;AELA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AOrBA,AJYA;AELA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AOrBA;AFOA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AOrBA;AFOA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AOrBA;AFOA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AOrBA;AFOA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AOrBA;AFOA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AOrBA;AFOA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AOrBA;AFOA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AOrBA;AFOA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AOrBA;AFOA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AOrBA;AFOA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA,AOrBA;AFOA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AQxBA,AlBsDA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AU9BA,AS3BA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AHSA,ACHA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AFMA,AV8BA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ARwBA,AZoCA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AavCA,AvBqEA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AMlBA,AV8BA;AKdA,AmBzDA,ApB4DA,AJYA;AKdA,AmBzDA,ApB4DA,AJYA;AKdA,AmBzDA,ApB4DA,AJYA;AKdA,AmBzDA,ApB4DA,AJYA;AKdA,AmBzDA,ApB4DA,AJYA;AKdA,AmBzDA,ApB4DA,AJYA;AKdA,AmBzDA,ApB4DA,AJYA;AKdA,AmBzDA,ApB4DA,AJYA;AKdA,AmBzDA,ApB4DA,AJYA;AKdA,AmBzDA,ApB4DA,AJYA;AKdA,AmBzDA,ApB4DA,AJYA;AKdA,AmBzDA,ApB4DA,AJYA;AKdA,AmBzDA,ApB4DA,AJYA;AKdA,AmBzDA,ApB4DA,AJYA;AKdA,AmBzDA,ApB4DA,AJYA;AKdA,AmBzDA,ApB4DA,AJYA;AKdA,AmBzDA,ApB4DA,AJYA;AKdA,AmBzDA,ApB4DA,AJYA;AKdA,AmBzDA,ApB4DA,AJYA;AKdA,AmBzDA,ApB4DA,AJYA;AKdA,AmBzDA,ApB4DA,AJYA;AKdA,AmBzDA,ApB4DA,AJYA;AKdA,AmBzDA,ApB4DA,AJYA;AKdA,AmBzDA,ApB4DA,AJYA;AKdA,AmBzDA,ApB4DA,AJYA;AKdA,AmBzDA,ApB4DA,AJYA;AKdA,AmBzDA,ApB4DA,AJYA;AKdA,AmBzDA,ApB4DA,AJYA;AKdA,AmBzDA,ApB4DA,AJYA;AKdA,AmBzDA,ApB4DA,AJYA;AKdA,AmBzDA,ApB4DA,AJYA;AKdA,AmBzDA,ApB4DA,AJYA;AKdA,AmBzDA,ApB4DA,AJYA;AwBvEA,Apfile":"index.js","sourcesContent":["\n\nconst externals = require(\"./externals\");\nconst Workbook = require(\"./Workbook\");\nconst FormulaError = require(\"./FormulaError\");\nconst dateConverter = require(\"./dateConverter\");\nconst RichText = require(\"./RichText\");\n\n/**\n * xlsx-poulate namespace.\n * @namespace\n */\nclass XlsxPopulate {\n    /**\n     * Convert a date to a number for Excel.\n     * @param {Date} date - The date.\n     * @returns {number} The number.\n     */\n    static dateToNumber(date) {\n        return dateConverter.dateToNumber(date);\n    }\n\n    /**\n     * Create a new blank workbook.\n     * @returns {Promise.<Workbook>} The workbook.\n     */\n    static fromBlankAsync() {\n        return Workbook.fromBlankAsync();\n    }\n\n    /**\n     * Loads a workbook from a data object. (Supports any supported [JSZip data types]{@link https://stuk.github.io/jszip/documentation/api_jszip/load_async.html}.)\n     * @param {string|Array.<number>|ArrayBuffer|Uint8Array|Buffer|Blob|Promise.<*>} data - The data to load.\n     * @param {{}} [opts] - Options\n     * @param {string} [opts.password] - The password to decrypt the workbook.\n     * @returns {Promise.<Workbook>} The workbook.\n     */\n    static fromDataAsync(data, opts) {\n        return Workbook.fromDataAsync(data, opts);\n    }\n\n    /**\n     * Loads a workbook from file.\n     * @param {string} path - The path to the workbook.\n     * @param {{}} [opts] - Options\n     * @param {string} [opts.password] - The password to decrypt the workbook.\n     * @returns {Promise.<Workbook>} The workbook.\n     */\n    static fromFileAsync(path, opts) {\n        return Workbook.fromFileAsync(path, opts);\n    }\n\n    /**\n     * Convert an Excel number to a date.\n     * @param {number} number - The number.\n     * @returns {Date} The date.\n     */\n    static numberToDate(number) {\n        return dateConverter.numberToDate(number);\n    }\n\n    /**\n     * The Promise library.\n     * @type {Promise}\n     */\n    static get Promise() {\n        return externals.Promise;\n    }\n    static set Promise(Promise) {\n        externals.Promise = Promise;\n    }\n}\n\n/**\n * The XLSX mime type.\n * @type {string}\n */\nXlsxPopulate.MIME_TYPE = Workbook.MIME_TYPE;\n\n/**\n * Formula error class.\n * @type {FormulaError}\n */\nXlsxPopulate.FormulaError = FormulaError;\n\n/**\n * RichTexts class\n * @type {RichText}\n */\nXlsxPopulate.RichText = RichText;\n\nmodule.exports = XlsxPopulate;\n","\n\nconst JSZip = require(\"jszip\");\n\n/**\n * External modules.\n * @private\n */\nmodule.exports = {\n    /**\n     * The Promise library.\n     * @type {Promise}\n     */\n    get Promise() {\n        return JSZip.external.Promise;\n    },\n\n    set Promise(Promise) {\n        JSZip.external.Promise = Promise;\n    }\n};\n","\n\nconst _ = require(\"lodash\");\nconst fs = require(\"fs\");\nconst JSZip = require('jszip');\n\nconst externals = require(\"./externals\");\nconst regexify = require(\"./regexify\");\nconst blank = require(\"./blank\")();\nconst xmlq = require(\"./xmlq\");\nconst Sheet = require(\"./Sheet\");\nconst ContentTypes = require(\"./ContentTypes\");\nconst AppProperties = require(\"./AppProperties\");\nconst CoreProperties = require(\"./CoreProperties\");\nconst Relationships = require(\"./Relationships\");\nconst SharedStrings = require(\"./SharedStrings\");\nconst StyleSheet = require(\"./StyleSheet\");\nconst Encryptor = require(\"./Encryptor\");\nconst XmlParser = require(\"./XmlParser\");\nconst XmlBuilder = require(\"./XmlBuilder\");\nconst ArgHandler = require(\"./ArgHandler\");\nconst addressConverter = require(\"./addressConverter\");\n\n// Options for adding files to zip. Do not create folders and use a fixed time at epoch.\n// The default JSZip behavior uses current time, which causes idential workbooks to be different each time.\nconst zipFileOpts = {\n    date: new Date(0),\n    createFolders: false\n};\n\n// Initialize the parser and builder.\nconst xmlParser = new XmlParser();\nconst xmlBuilder = new XmlBuilder();\n\n// Initialize the encryptor if present (can be excluded in browser build).\nconst encryptor = typeof Encryptor === \"function\" && new Encryptor();\n\n// Characters not allowed in sheet names.\nconst badSheetNameChars = ['\\\\', '/', '*', '[', ']', ':', '?'];\n\n// Excel limits sheet names to 31 chars.\nconst maxSheetNameLength = 31;\n\n// Order of the nodes as defined by the spec.\nconst nodeOrder = [\n    \"fileVersion\", \"fileSharing\", \"workbookPr\", \"workbookProtection\", \"bookViews\", \"sheets\", \"functionGroups\",\n    \"externalReferences\", \"definedNames\", \"calcPr\", \"oleSize\", \"customWorkbookViews\", \"pivotCaches\", \"smartTagPr\",\n    \"smartTagTypes\", \"webPublishing\", \"fileRecoveryPr\", \"webPublishObjects\", \"extLst\"\n];\n\n/**\n * A workbook.\n */\nclass Workbook {\n    /**\n     * Create a new blank workbook.\n     * @returns {Promise.<Workbook>} The workbook.\n     * @ignore\n     */\n    static fromBlankAsync() {\n        return Workbook.fromDataAsync(blank);\n    }\n\n    /**\n     * Loads a workbook from a data object. (Supports any supported [JSZip data types]{@link https://stuk.github.io/jszip/documentation/api_jszip/load_async.html}.)\n     * @param {string|Array.<number>|ArrayBuffer|Uint8Array|Buffer|Blob|Promise.<*>} data - The data to load.\n     * @param {{}} [opts] - Options\n     * @returns {Promise.<Workbook>} The workbook.\n     * @ignore\n     */\n    static fromDataAsync(data, opts) {\n        return new Workbook()._initAsync(data, opts);\n    }\n\n    /**\n     * Loads a workbook from file.\n     * @param {string} path - The path to the workbook.\n     * @param {{}} [opts] - Options\n     * @returns {Promise.<Workbook>} The workbook.\n     * @ignore\n     */\n    static fromFileAsync(path, opts) {\n        if (process.browser) throw new Error(\"Workbook.fromFileAsync is not supported in the browser\");\n        return new externals.Promise((resolve, reject) => {\n            fs.readFile(path, (err, data) => {\n                if (err) return reject(err);\n                resolve(data);\n            });\n        }).then(data => Workbook.fromDataAsync(data, opts));\n    }\n\n    /**\n     * Get the active sheet in the workbook.\n     * @returns {Sheet} The active sheet.\n     *//**\n     * Set the active sheet in the workbook.\n     * @param {Sheet|string|number} sheet - The sheet or name of sheet or index of sheet to activate. The sheet must not be hidden.\n     * @returns {Workbook} The workbook.\n     */\n    activeSheet() {\n        return new ArgHandler('Workbook.activeSheet')\n            .case(() => {\n                return this._activeSheet;\n            })\n            .case('*', sheet => {\n                // Get the sheet from name/index if needed.\n                if (!(sheet instanceof Sheet)) sheet = this.sheet(sheet);\n\n                // Check if the sheet is hidden.\n                if (sheet.hidden()) throw new Error(\"You may not activate a hidden sheet.\");\n\n                // Deselect all sheets except the active one (mirroring ying Excel behavior).\n                _.forEach(this._sheets, current => {\n                    current.tabSelected(current === sheet);\n                });\n\n                this._activeSheet = sheet;\n\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Add a new sheet to the workbook.\n     * @param {string} name - The name of the sheet. Must be unique, less than 31 characters, and may not contain the following characters: \\ / * [ ] : ?\n     * @param {number|string|Sheet} [indexOrBeforeSheet] The index to move the sheet to or the sheet (or name of sheet) to move this sheet before. Omit this argument to move to the end of the workbook.\n     * @returns {Sheet} The new sheet.\n     */\n    addSheet(name, indexOrBeforeSheet) {\n        return this._addSheet(name, indexOrBeforeSheet);\n    }\n    \n    /**\n     * Gets a defined name scoped to the workbook.\n     * @param {string} name - The defined name.\n     * @returns {undefined|string|Cell|Range|Row|Column} What the defined name refers to or undefined if not found. Will return the string formula if not a Row, Column, Cell, or Range.\n     *//**\n     * Set a defined name scoped to the workbook.\n     * @param {string} name - The defined name.\n     * @param {string|Cell|Range|Row|Column} refersTo - What the name refers to.\n     * @returns {Workbook} The workbook.\n     */\n    definedName() {\n        return new ArgHandler(\"Workbook.definedName\")\n            .case('string', name => {\n                return this.scopedDefinedName(undefined, name);\n            })\n            .case(['string', '*'], (name, refersTo) => {\n                this.scopedDefinedName(undefined, name, refersTo);\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Delete a sheet from the workbook.\n     * @param {Sheet|string|number} sheet - The sheet or name of sheet or index of sheet to move.\n     * @returns {Workbook} The workbook.\n     */\n    deleteSheet(sheet) {\n        // Get the sheet to move.\n        if (!(sheet instanceof Sheet)) {\n            sheet = this.sheet(sheet);\n            if (!sheet) throw new Error(\"Invalid move sheet reference.\");\n        }\n\n        // Make sure we are not deleting the only visible sheet.\n        const visibleSheets = _.filter(this._sheets, sheet => !sheet.hidden());\n        if (visibleSheets.length === 1 && visibleSheets[0] === sheet) {\n            throw new Error(\"This sheet may not be deleted as a workbook must contain at least one visible sheet.\");\n        }\n\n        // Remove the sheet.\n        let index = this._sheets.indexOf(sheet);\n        this._sheets.splice(index, 1);\n\n        // Set the new active sheet.\n        if (sheet === this.activeSheet()) {\n            if (index >= this._sheets.length) index--;\n            this.activeSheet(index);\n        }\n\n        return this;\n    }\n\n    /**\n     * Find the given pattern in the workbook and optionally replace it.\n     * @param {string|RegExp} pattern - The pattern to look for. Providing a string will result in a case-insensitive substring search. Use a RegExp for more sophisticated searches.\n     * @param {string|function} [replacement] - The text to replace or a String.replace callback function. If pattern is a string, all occurrences of the pattern in each cell will be replaced.\n     * @returns {boolean} A flag indicating if the pattern was found.\n     */\n    find(pattern, replacement) {\n        pattern = regexify(pattern);\n\n        let matches = [];\n        this._sheets.forEach(sheet => {\n            matches = matches.concat(sheet.find(pattern, replacement));\n        });\n\n        return matches;\n    }\n\n    /**\n     * Move a sheet to a new position.\n     * @param {Sheet|string|number} sheet - The sheet or name of sheet or index of sheet to move.\n     * @param {number|string|Sheet} [indexOrBeforeSheet] The index to move the sheet to or the sheet (or name of sheet) to move this sheet before. Omit this argument to move to the end of the workbook.\n     * @returns {Workbook} The workbook.\n     */\n    moveSheet(sheet, indexOrBeforeSheet) {\n        // Get the sheet to move.\n        if (!(sheet instanceof Sheet)) {\n            sheet = this.sheet(sheet);\n            if (!sheet) throw new Error(\"Invalid move sheet reference.\");\n        }\n\n        // Get the to/from indexes.\n        const from = this._sheets.indexOf(sheet);\n        let to;\n        if (_.isNil(indexOrBeforeSheet)) {\n            to = this._sheets.length - 1;\n        } else if (_.isInteger(indexOrBeforeSheet)) {\n            to = indexOrBeforeSheet;\n        } else {\n            if (!(indexOrBeforeSheet instanceof Sheet)) {\n                indexOrBeforeSheet = this.sheet(indexOrBeforeSheet);\n                if (!indexOrBeforeSheet) throw new Error(\"Invalid before sheet reference.\");\n            }\n\n            to = this._sheets.indexOf(indexOrBeforeSheet);\n        }\n\n        // Insert the sheet at the appropriate place.\n        this._sheets.splice(to, 0, this._sheets.splice(from, 1)[0]);\n\n        return this;\n    }\n\n    /**\n     * Generates the workbook output.\n     * @param {string} [type] - The type of the data to return: base64, binarystring, uint8array, arraybuffer, blob, nodebuffer. Defaults to 'nodebuffer' in Node.js and 'blob' in browsers.\n     * @returns {Promise<string|Uint8Array|ArrayBuffer|Blob|Buffer>} The data.\n     *//**\n     * Generates the workbook output.\n     * @param {{}} [opts] Options\n     * @param {string} [opts.type] - The type of the data to return: base64, binarystring, uint8array, arraybuffer, blob, nodebuffer. Defaults to 'nodebuffer' in Node.js and 'blob' in browsers.\n     * @param {string} [opts.password] - The password to use to encrypt the workbook.\n     * @returns {Promise<string|Uint8Array|ArrayBuffer|Blob|Buffer>} The data.\n     */\n    outputAsync(opts) {\n        opts = opts || {};\n        if (typeof opts === 'string') opts = { type: opts };\n\n        this._setSheetRefs();\n\n        let definedNamesNode = xmlq.findChild(this._node, \"definedNames\");\n\n        this._sheets.forEach((sheet, i) => {\n            if (!sheet._autoFilter) return;\n\n            if (!definedNamesNode) {\n                definedNamesNode = {\n                    name: \"definedNames\",\n                    attributes: {},\n                    children: []\n                };\n\n                xmlq.insertInOrder(this._node, definedNamesNode, nodeOrder);\n            }\n\n            xmlq.appendChild(definedNamesNode, {\n                name: \"definedName\",\n                attributes: {\n                    name: \"_xlnm._FilterDatabase\",\n                    localSheetId: i,\n                    hidden: \"1\"\n                },\n                children: [sheet._autoFilter.address({ includeSheetName: true, anchored: true })]\n            });\n        });\n\n        this._sheetsNode.children = [];\n        this._sheets.forEach((sheet, i) => {\n            const sheetPath = `xl/worksheets/sheet${i + 1}.xml`;\n            const sheetRelsPath = `xl/worksheets/_rels/sheet${i + 1}.xml.rels`;\n            const sheetXmls = sheet.toXmls();\n            const relationship = this._relationships.findById(sheetXmls.id.attributes['r:id']);\n            relationship.attributes.Target = `worksheets/sheet${i + 1}.xml`;\n            this._sheetsNode.children.push(sheetXmls.id);\n            this._zip.file(sheetPath, xmlBuilder.build(sheetXmls.sheet), zipFileOpts);\n\n            const relationshipsXml = xmlBuilder.build(sheetXmls.relationships);\n            if (relationshipsXml) {\n                this._zip.file(sheetRelsPath, relationshipsXml, zipFileOpts);\n            } else {\n                this._zip.remove(sheetRelsPath);\n            }\n        });\n\n        // Set the app security to true if a password is set, false if not.\n        // this._appProperties.isSecure(!!opts.password);\n\n        // Convert the various components to XML strings and add them to the zip.\n        this._zip.file(\"[Content_Types].xml\", xmlBuilder.build(this._contentTypes), zipFileOpts);\n        this._zip.file(\"docProps/app.xml\", xmlBuilder.build(this._appProperties), zipFileOpts);\n        this._zip.file(\"docProps/core.xml\", xmlBuilder.build(this._coreProperties), zipFileOpts);\n        this._zip.file(\"xl/_rels/workbook.xml.rels\", xmlBuilder.build(this._relationships), zipFileOpts);\n        this._zip.file(\"xl/sharedStrings.xml\", xmlBuilder.build(this._sharedStrings), zipFileOpts);\n        this._zip.file(\"xl/styles.xml\", xmlBuilder.build(this._styleSheet), zipFileOpts);\n        this._zip.file(\"xl/workbook.xml\", xmlBuilder.build(this._node), zipFileOpts);\n\n        // Generate the zip.\n        return this._zip.generateAsync({\n            type: \"nodebuffer\",\n            compression: \"DEFLATE\"\n        }).then(output => {\n            // If a password is set, encrypt the workbook.\n            if (opts.password) output = encryptor.encrypt(output, opts.password);\n\n            // Convert and return\n            return this._convertBufferToOutput(output, opts.type);\n        });\n    }\n\n    /**\n     * Gets the sheet with the provided name or index (0-based).\n     * @param {string|number} sheetNameOrIndex - The sheet name or index.\n     * @returns {Sheet|undefined} The sheet or undefined if not found.\n     */\n    sheet(sheetNameOrIndex) {\n        if (_.isInteger(sheetNameOrIndex)) return this._sheets[sheetNameOrIndex];\n        return _.find(this._sheets, sheet => sheet.name() === sheetNameOrIndex);\n    }\n\n    /**\n     * Get an array of all the sheets in the workbook.\n     * @returns {Array.<Sheet>} The sheets.\n     */\n    sheets() {\n        return this._sheets.slice();\n    }\n\n    /**\n     * Gets an individual property.\n     * @param {string} name - The name of the property.\n     * @returns {*} The property.\n     *//**\n     * Gets multiple properties.\n     * @param {Array.<string>} names - The names of the properties.\n     * @returns {object.<string, *>} Object whose keys are the property names and values are the properties.\n     *//**\n     * Sets an individual property.\n     * @param {string} name - The name of the property.\n     * @param {*} value - The value to set.\n     * @returns {Workbook} The workbook.\n     *//**\n     * Sets multiple properties.\n     * @param {object.<string, *>} properties - Object whose keys are the property names and values are the values to set.\n     * @returns {Workbook} The workbook.\n     */\n    property() {\n        return new ArgHandler(\"Workbook.property\")\n            .case('string', name => {\n                // Get single value\n                return this._coreProperties.get(name);\n            })\n            .case('array', names => {\n                // Get list of values\n                const values = {};\n                names.forEach(name => {\n                    values[name] = this._coreProperties.get(name);\n                });\n\n                return values;\n            })\n            .case(['string', '*'], (name, value) => {\n                // Set a single value for all cells to a single value\n                this._coreProperties.set(name, value);\n                return this;\n            })\n            .case('object', nameValues => {\n                // Object of key value pairs to set\n                for (const name in nameValues) {\n                    if (!nameValues.hasOwnProperty(name)) continue;\n                    const value = nameValues[name];\n                    this._coreProperties.set(name, value);\n                }\n\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Get access to core properties object\n     * @returns {CoreProperties} The core properties.\n     */\n    properties() {\n        return this._coreProperties;\n    }\n\n    /**\n     * Write the workbook to file. (Not supported in browsers.)\n     * @param {string} path - The path of the file to write.\n     * @param {{}} [opts] - Options\n     * @param {string} [opts.password] - The password to encrypt the workbook.\n     * @returns {Promise.<undefined>} A promise.\n     */\n    toFileAsync(path, opts) {\n        if (process.browser) throw new Error(\"Workbook.toFileAsync is not supported in the browser.\");\n        return this.outputAsync(opts)\n            .then(data => new externals.Promise((resolve, reject) => {\n                fs.writeFile(path, data, err => {\n                    if (err) return reject(err);\n                    resolve();\n                });\n            }));\n    }\n\n    /**\n     * Gets a scoped defined name.\n     * @param {Sheet} sheetScope - The sheet the name is scoped to. Use undefined for workbook scope.\n     * @param {string} name - The defined name.\n     * @returns {undefined|Cell|Range|Row|Column} What the defined name refers to.\n     * @ignore\n     *//**\n     * Sets a scoped defined name.\n     * @param {Sheet} sheetScope - The sheet the name is scoped to. Use undefined for workbook scope.\n     * @param {string} name - The defined name.\n     * @param {undefined|Cell|Range|Row|Column} refersTo - What the defined name refers to.\n     * @returns {Workbook} The workbook.\n     * @ignore\n     */\n    scopedDefinedName(sheetScope, name, refersTo) {\n        let definedNamesNode = xmlq.findChild(this._node, \"definedNames\");\n        let definedNameNode = definedNamesNode && _.find(definedNamesNode.children, node => node.attributes.name === name && node.localSheet === sheetScope);\n\n        return new ArgHandler('Workbook.scopedDefinedName')\n            .case(['*', 'string'], () => {\n                // Get the address from the definedNames node.\n                const refersTo = definedNameNode && definedNameNode.children[0];\n                if (!refersTo) return undefined;\n\n                // Try to parse the address.\n                const ref = addressConverter.fromAddress(refersTo);\n                if (!ref) return refersTo;\n\n                // Load the appropriate selection type.\n                const sheet = this.sheet(ref.sheetName);\n                if (ref.type === 'cell') return sheet.cell(ref.rowNumber, ref.columnNumber);\n                if (ref.type === 'range') return sheet.range(ref.startRowNumber, ref.startColumnNumber, ref.endRowNumber, ref.endColumnNumber);\n                if (ref.type === 'row') return sheet.row(ref.rowNumber);\n                if (ref.type === 'column') return sheet.column(ref.columnNumber);\n                return refersTo;\n            })\n            .case(['*', 'string', 'nil'], () => {\n                if (definedNameNode) xmlq.removeChild(definedNamesNode, definedNameNode);\n                if (definedNamesNode && !definedNamesNode.children.length) xmlq.removeChild(this._node, definedNamesNode);\n                return this;\n            })\n            .case(['*', 'string', '*'], () => {\n                if (typeof refersTo !== 'string') {\n                    refersTo = refersTo.address({\n                        includeSheetName: true,\n                        anchored: true\n                    });\n                }\n\n                if (!definedNamesNode) {\n                    definedNamesNode = {\n                        name: \"definedNames\",\n                        attributes: {},\n                        children: []\n                    };\n\n                    xmlq.insertInOrder(this._node, definedNamesNode, nodeOrder);\n                }\n\n                if (!definedNameNode) {\n                    definedNameNode = {\n                        name: \"definedName\",\n                        attributes: { name },\n                        children: [refersTo]\n                    };\n\n                    if (sheetScope) definedNameNode.localSheet = sheetScope;\n\n                    xmlq.appendChild(definedNamesNode, definedNameNode);\n                }\n\n                definedNameNode.children = [refersTo];\n\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Get the shared strings table.\n     * @returns {SharedStrings} The shared strings table.\n     * @ignore\n     */\n    sharedStrings() {\n        return this._sharedStrings;\n    }\n\n    /**\n     * Get the style sheet.\n     * @returns {StyleSheet} The style sheet.\n     * @ignore\n     */\n    styleSheet() {\n        return this._styleSheet;\n    }\n\n    /**\n     * Add a new sheet to the workbook.\n     * \n     * **WARN:** this function has limits:  if you clone a sheet with some images or other things link outside the Sheet object, these things in the cloned sheet will be locked when you open in MS Excel app.\n     * @param {Sheet} from - The sheet to be cloned.\n     * @param {string} name - The name of the new sheet. Must be unique, less than 31 characters, and may not contain the following characters: \\ / * [ ] : ?\n     * @param {number|string|Sheet} [indexOrBeforeSheet] The index to move the sheet to or the sheet (or name of sheet) to move this sheet before. Omit this argument to move to the end of the workbook.\n     * @returns {Sheet} The new sheet.\n     */\n    cloneSheet(from, name, indexOrBeforeSheet) {\n        if (!from || !(from instanceof Sheet)) throw new Error(\"Invalid clone from.\");\n\n        return this._addSheet(name, indexOrBeforeSheet, () => {\n            const cloneXml = node => {\n                // If the node has a toXml method, call it.\n                if (node && _.isFunction(node.toXml)) node = node.toXml();\n        \n                if (typeof node === 'object') {\n                    if (node.name) {\n                        const result = {\n                            name: node.name,\n                            attributes: {},\n                            children: []\n                        };\n                        \n                        _.forOwn(node.attributes, (value, name) => {\n                            result.attributes[name] = value;\n                        }); \n                    \n                        let chld;\n                        if (node.children) { \n                            node.children.forEach(child => {\n                                chld = cloneXml(child);\n                                if (child !== null) {\n                                    result.children.push(chld);\n                                }\n                            });\n                        }\n                        return result;\n                    }\n                } else if (node !== null) {\n                    return node;\n                } \n                return null;\n            };\n\n            // clone SheetNode & relationshipNode from source\n            const fromXml = from.toXmls();\n            const sheetNode = cloneXml(fromXml.sheet);\n            const relationshipNode = cloneXml(fromXml.relationships);\n            return { sheetNode, relationshipNode };\n        });\n    }\n\n    /**\n     * Add a new sheet to the workbook.\n     * @param {string} name - The name of the sheet. Must be unique, less than 31 characters, and may not contain the following characters: \\ / * [ ] : ?\n     * @param {number|string|Sheet} [indexOrBeforeSheet] The index to move the sheet to or the sheet (or name of sheet) to move this sheet before. Omit this argument to move to the end of the workbook.\n     * @param {callback} [getTemplateNodes] optional callback function for template nodes\n     * @returns {Sheet} The new sheet.\n     * @private\n     */\n    _addSheet(name, indexOrBeforeSheet, getTemplateNodes) {\n        // Validate the sheet name.\n        if (!name || typeof name !== \"string\") throw new Error(\"Invalid sheet name.\");\n        if (_.some(badSheetNameChars, char => name.indexOf(char) >= 0)) throw new Error(`Sheet name may not contain any of the following characters: ${badSheetNameChars.join(\" \")}`);\n        if (name.length > maxSheetNameLength) throw new Error(`Sheet name may not be greater than ${maxSheetNameLength} characters.`);\n        if (this.sheet(name)) throw new Error(`Sheet with name \"${name}\" already exists.`);\n\n        // Get the destination index of new sheet.\n        let index;\n        if (_.isNil(indexOrBeforeSheet)) {\n            index = this._sheets.length;\n        } else if (_.isInteger(indexOrBeforeSheet)) {\n            index = indexOrBeforeSheet;\n        } else {\n            if (!(indexOrBeforeSheet instanceof Sheet)) {\n                indexOrBeforeSheet = this.sheet(indexOrBeforeSheet);\n                if (!indexOrBeforeSheet) throw new Error(\"Invalid before sheet reference.\");\n            }\n\n            index = this._sheets.indexOf(indexOrBeforeSheet);\n        }\n\n        // Add a new relationship for the new sheet and create the new sheet ID node.\n        const relationship = this._relationships.add(\"worksheet\"); // Leave target blank as it will be filled later.\n        const sheetIdNode = {\n            name: \"sheet\",\n            attributes: {\n                name,\n                sheetId: ++this._maxSheetId,\n                'r:id': relationship.attributes.Id\n            },\n            children: []\n        };\n\n        // Create the new sheet.\n        let sheet;\n        if (getTemplateNodes) {\n            const { sheetNode, relationshipNode } = getTemplateNodes();\n            sheet = new Sheet(this, sheetIdNode, sheetNode, relationshipNode);\n        } else {\n            sheet = new Sheet(this, sheetIdNode);\n        }\n\n        // Insert the sheet at the appropriate index.\n        this._sheets.splice(index, 0, sheet);\n\n        return sheet;\n    }\n\n    /**\n     * Initialize the workbook. (This is separated from the constructor to ease testing.)\n     * @param {string|ArrayBuffer|Uint8Array|Buffer|Blob} data - The data to load.\n     * @param {{}} [opts] - Options\n     * @param {boolean} [opts.base64=false] - No used unless input is a string. True if the input string is base64 encoded, false for binary.\n     * @returns {Promise.<Workbook>} The workbook.\n     * @private\n     */\n    _initAsync(data, opts) {\n        opts = opts || {};\n\n        this._maxSheetId = 0;\n        this._sheets = [];\n\n        return externals.Promise.resolve()\n            .then(() => {\n                // Make sure the input is a Buffer\n                return this._convertInputToBufferAsync(data, opts.base64)\n                    .then(buffer => {\n                        data = buffer;\n                    });\n            })\n            .then(() => {\n                if (!opts.password) return;\n                return encryptor.decryptAsync(data, opts.password)\n                    .then(decrypted => {\n                        data = decrypted;\n                    });\n            })\n            .then(() => JSZip.loadAsync(data))\n            .then(zip => {\n                this._zip = zip;\n                return this._parseNodesAsync([\n                    \"[Content_Types].xml\",\n                    \"docProps/app.xml\",\n                    \"docProps/core.xml\",\n                    \"xl/_rels/workbook.xml.rels\",\n                    \"xl/sharedStrings.xml\",\n                    \"xl/styles.xml\",\n                    \"xl/workbook.xml\"\n                ]);\n            })\n            .then(nodes => {\n                const contentTypesNode = nodes[0];\n                const appPropertiesNode = nodes[1];\n                const corePropertiesNode = nodes[2];\n                const relationshipsNode = nodes[3];\n                const sharedStringsNode = nodes[4];\n                const styleSheetNode = nodes[5];\n                const workbookNode = nodes[6];\n\n                // Load the various components.\n                this._contentTypes = new ContentTypes(contentTypesNode);\n                this._appProperties = new AppProperties(appPropertiesNode);\n                this._coreProperties = new CoreProperties(corePropertiesNode);\n                this._relationships = new Relationships(relationshipsNode);\n                this._sharedStrings = new SharedStrings(sharedStringsNode);\n                this._styleSheet = new StyleSheet(styleSheetNode);\n                this._node = workbookNode;\n\n                // Add the shared strings relationship if it doesn't exist.\n                if (!this._relationships.findByType(\"sharedStrings\")) {\n                    this._relationships.add(\"sharedStrings\", \"sharedStrings.xml\");\n                }\n\n                // Add the shared string content type if it doesn't exist.\n                if (!this._contentTypes.findByPartName(\"/xl/sharedStrings.xml\")) {\n                    this._contentTypes.add(\"/xl/sharedStrings.xml\", \"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml\");\n                }\n\n                // Kill the calc chain. It's not required and the workbook will corrupt unless we keep it up to date.\n                this._zip.remove(\"xl/calcChain.xml\");\n\n                // Load each sheet.\n                this._sheetsNode = xmlq.findChild(this._node, \"sheets\");\n                return externals.Promise.all(_.map(this._sheetsNode.children, (sheetIdNode, i) => {\n                    if (sheetIdNode.attributes.sheetId > this._maxSheetId) this._maxSheetId = sheetIdNode.attributes.sheetId;\n\n                    return this._parseNodesAsync([`xl/worksheets/sheet${i + 1}.xml`, `xl/worksheets/_rels/sheet${i + 1}.xml.rels`])\n                        .then(nodes => {\n                            const sheetNode = nodes[0];\n                            const sheetRelationshipsNode = nodes[1];\n\n                            // Insert at position i as the promises will resolve at different times.\n                            this._sheets[i] = new Sheet(this, sheetIdNode, sheetNode, sheetRelationshipsNode);\n                        });\n                }));\n            })\n            .then(() => this._parseSheetRefs())\n            .then(() => this);\n    }\n\n    /**\n     * Parse files out of zip into XML node objects.\n     * @param {Array.<string>} names - The file names to parse.\n     * @returns {Promise.<Array.<{}>>} An array of the parsed objects.\n     * @private\n     */\n    _parseNodesAsync(names) {\n        return externals.Promise.all(_.map(names, name => this._zip.file(name)))\n            .then(files => externals.Promise.all(_.map(files, file => file && file.async(\"string\"))))\n            .then(texts => externals.Promise.all(_.map(texts, text => text && xmlParser.parseAsync(text))));\n    }\n\n    /**\n     * Parse the sheet references out so we can reorder freely.\n     * @returns {undefined}\n     * @private\n     */\n    _parseSheetRefs() {\n        // Parse the active sheet.\n        const bookViewsNode = xmlq.findChild(this._node, \"bookViews\");\n        const workbookViewNode = bookViewsNode && xmlq.findChild(bookViewsNode, \"workbookView\");\n        const activeTabId = workbookViewNode && workbookViewNode.attributes.activeTab || 0;\n        this._activeSheet = this._sheets[activeTabId];\n\n        // Set the location sheet on the defined name nodes. The defined name should point to the index of the sheet\n        // but reordering sheets messes this up. So store it on the node and we'll update the index on XML build.\n        const definedNamesNode = xmlq.findChild(this._node, \"definedNames\");\n        if (definedNamesNode) {\n            _.forEach(definedNamesNode.children, definedNameNode => {\n                if (definedNameNode.attributes.hasOwnProperty(\"localSheetId\")) {\n                    definedNameNode.localSheet = this._sheets[definedNameNode.attributes.localSheetId];\n                }\n            });\n        }\n    }\n\n    /**\n     * Set the proper sheet references in the XML.\n     * @returns {undefined}\n     * @private\n     */\n    _setSheetRefs() {\n        // Set the active sheet.\n        let bookViewsNode = xmlq.findChild(this._node, \"bookViews\");\n        if (!bookViewsNode) {\n            bookViewsNode = { name: 'bookViews', attributes: {}, children: [] };\n            xmlq.insertInOrder(this._node, bookViewsNode, nodeOrder);\n        }\n\n        let workbookViewNode = xmlq.findChild(bookViewsNode, \"workbookView\");\n        if (!workbookViewNode) {\n            workbookViewNode = { name: 'workbookView', attributes: {}, children: [] };\n            xmlq.appendChild(bookViewsNode, workbookViewNode);\n        }\n\n        workbookViewNode.attributes.activeTab = this._sheets.indexOf(this._activeSheet);\n\n        // Set the defined names local sheet indexes.\n        const definedNamesNode = xmlq.findChild(this._node, \"definedNames\");\n        if (definedNamesNode) {\n            _.forEach(definedNamesNode.children, definedNameNode => {\n                if (definedNameNode.localSheet) {\n                    definedNameNode.attributes.localSheetId = this._sheets.indexOf(definedNameNode.localSheet);\n                }\n            });\n        }\n    }\n\n    /**\n     * Convert buffer to desired output format\n     * @param {Buffer} buffer - The buffer\n     * @param {string} type - The type to convert to: buffer/nodebuffer, blob, base64, binarystring, uint8array, arraybuffer\n     * @returns {Buffer|Blob|string|Uint8Array|ArrayBuffer} The output\n     * @private\n     */\n    _convertBufferToOutput(buffer, type) {\n        if (!type) type = process.browser ? \"blob\" : \"nodebuffer\";\n\n        if (type === \"buffer\" || type === \"nodebuffer\") return buffer;\n        if (process.browser && type === \"blob\") return new Blob([buffer], { type: Workbook.MIME_TYPE });\n        if (type === \"base64\") return buffer.toString(\"base64\");\n        if (type === \"binarystring\") return buffer.toString(\"utf8\");\n        if (type === \"uint8array\") return new Uint8Array(buffer);\n        if (type === \"arraybuffer\") return new Uint8Array(buffer).buffer;\n\n        throw new Error(`Output type '${type}' not supported.`);\n    }\n\n    /**\n     * Convert input to buffer\n     * @param {Buffer|Blob|string|Uint8Array|ArrayBuffer} input - The input\n     * @param {boolean} [base64=false] - Only applies if input is a string. If true, the string is base64 encoded, false for binary\n     * @returns {Promise.<Buffer>} The buffer.\n     * @private\n     */\n    _convertInputToBufferAsync(input, base64) {\n        return externals.Promise.resolve()\n            .then(() => {\n                if (Buffer.isBuffer(input)) return input;\n\n                if (process.browser && input instanceof Blob) {\n                    return new externals.Promise(resolve => {\n                        const fileReader = new FileReader();\n                        fileReader.onload = event => {\n                            resolve(Buffer.from(event.target.result));\n                        };\n                        fileReader.readAsArrayBuffer(input);\n                    });\n                }\n\n                if (typeof input === \"string\" && base64) return Buffer.from(input, \"base64\");\n                if (typeof input === \"string\" && !base64) return Buffer.from(input, \"utf8\");\n                if (input instanceof Uint8Array || input instanceof ArrayBuffer) return Buffer.from(input);\n\n                throw new Error(`Input type unknown.`);\n            });\n    }\n}\n\n/**\n * The XLSX mime type.\n * @type {string}\n * @ignore\n */\nWorkbook.MIME_TYPE = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\";\n\nmodule.exports = Workbook;\n\n/*\nxl/workbook.xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<workbook xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x15\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\">\n\t<fileVersion appName=\"xl\" lastEdited=\"7\" lowestEdited=\"7\" rupBuild=\"16925\"/>\n\t<workbookPr defaultThemeVersion=\"164011\"/>\n\t<mc:AlternateContent xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\">\n\t\t<mc:Choice Requires=\"x15\">\n\t\t\t<x15ac:absPath url=\"\\path\\to\\file\" xmlns:x15ac=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/ac\"/>\n\t\t</mc:Choice>\n\t</mc:AlternateContent>\n\t<bookViews>\n\t\t<workbookView xWindow=\"3720\" yWindow=\"0\" windowWidth=\"27870\" windowHeight=\"12795\"/>\n\t</bookViews>\n\t<sheets>\n\t\t<sheet name=\"Sheet1\" sheetId=\"1\" r:id=\"rId1\"/>\n\t</sheets>\n\t<calcPr calcId=\"171027\"/>\n\t<extLst>\n\t\t<ext uri=\"{140A7094-0E35-4892-8432-C4D2E57EDEB5}\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\">\n\t\t\t<x15:workbookPr chartTrackingRefBase=\"1\"/>\n\t\t</ext>\n\t</extLst>\n</workbook>\n// */\n","\n\nconst _ = require(\"lodash\");\n\n/**\n * Convert a pattern to a RegExp.\n * @param {RegExp|string} pattern - The pattern to convert.\n * @returns {RegExp} The regex.\n * @private\n */\nmodule.exports = pattern => {\n    if (typeof pattern === \"string\") {\n        pattern = new RegExp(_.escapeRegExp(pattern), \"igm\");\n    }\n\n    pattern.lastIndex = 0;\n\n    return pattern;\n};\n","\n\n// Export as a function as proxyquireify has trouble with constant exports.\nmodule.exports = () => Buffer.from(\"UEsDBBQAAAAIAAAAIQC1VTAj7AAAAEwCAAALAAAAX3JlbHMvLnJlbHONks1OwzAMgO9IvEPk++puSAihpbsgpN0QKg9gEvdHbeMoCdC9PeGAoNIYPcaxP3+2vD/M06jeOcRenIZtUYJiZ8T2rtXwUj9u7kDFRM7SKI41nDjCobq+2j/zSCkXxa73UWWKixq6lPw9YjQdTxQL8ezyTyNhopSfoUVPZqCWcVeWtxh+M6BaMNXRaghHewOqPnlew5am6Q0/iHmb2KUzLZDnxM6y3fiQ60Pq8zSqptBy0mDFPOVwRPK+yGjA80a79UZ/T4sTJ7KUCI0EvuzzlXFJaLte6P8VLTN+bOYRPyQMryLDtwsubqD6BFBLAwQUAAAACAAAACEA3kEW2XsBAAARAwAAEAAAAGRvY1Byb3BzL2FwcC54bWydkkFP4zAQhe9I/IfId+oElhWqHCNUQBwWbaUWOBtn0lg4tuUZopZfj5OqIV32xO3NzNPLlxmL621rsw4iGu9KVsxyloHTvjJuU7Kn9f3ZFcuQlKuU9Q5KtgNk1/L0RCyjDxDJAGYpwmHJGqIw5xx1A63CWRq7NKl9bBWlMm64r2uj4dbr9xYc8fM8/81hS+AqqM7CGMj2ifOOfhpaed3z4fN6F1KeFDchWKMVpb+Uj0ZHj76m7G6rwQo+HYoUtAL9Hg3tZC74tBQrrSwsUrCslUUQ/KshHkD1S1sqE1GKjuYdaPIxQ/OR1nbOsleF0OOUrFPRKEdsb9sXg7YBKcoXH9+wASAUfGwOcuqdavNLFoMhiWMjH0GSPkZcG7KAf+ulivQf4mJKPDCwCeOq5yu+8R2+9E/2wrdBubRAPqo/xr3hU1j7W0VwWOdxU6waFaFKFxjXPTbEQ+KKtvcvGuU2UB083wf98Z/3L1wWl7P8Is+Hmx96gn+9ZfkJUEsDBBQAAAAIAOehdkc+qGWw1QAAAG0BAAARAAAAZG9jUHJvcHMvY29yZS54bWxtkE1Lw0AQhu9C/0PYezKJBZGQpDdPCkIVvA67Y7qY/WBnNO2/7zZoFOxxeJ95mHm73dFNxRcltsH3qqlqVZDXwVg/9ur15aG8VwULeoNT8NSrE7HaDZubTsdWh0TPKURKYomLbPLc6tirg0hsAVgfyCFXmfA5fA/JoeQxjRBRf+BIcFvXd+BI0KAgXIRlXI3qW2n0qoyfaVoERgNN5MgLQ1M18MsKJcdXF5bkD+msnCJdRX/ClT6yXcF5nqt5u6D5/gbenh73y6ul9ZeuNKmhg38FDWdQSwMEFAAAAAAA2aF2RwAAAAAAAAAAAAAAAAkAAAB4bC9fcmVscy9QSwMEFAAAAAgAAAAhAI2H2nDaAAAALQIAABoAAAB4bC9fcmVscy93b3JrYm9vay54bWwucmVsc62R3YrCMBCF7xf2HcLcb9NWWGQx9UYWeiv1AUI6/cE2CZlZtW9vXMEfEPHCq+FMmO+cySyWh3EQOwzUO6sgS1IQaI2re9sq2FS/X3MQxNrWenAWFUxIsCw+PxZrHDTHIep6TyJSLCnomP2PlGQ6HDUlzqONL40Lo+YoQyu9NlvdoszT9FuGWwYUd0xR1gpCWc9AVJPHV9iuaXqDK2f+RrT8wEIST0NcQFQ6tMgKzjqJHJCP7fN32nOcxav7vzw3s2cZsndm2LuwpQ6RrzkurfhBp3IJI++OXBwBUEsDBBQAAAAIAAAAIQDeI/LTbgIAALEFAAANAAAAeGwvc3R5bGVzLnhtbKWUXWvbMBSG7wf7D0L3rmw3zpJguyxNDYVuDJrBbhVbTkT1YSSlSzb233tkO7FDxzbWK53z6ug5rz7s9OYgBXpmxnKtMhxdhRgxVeqKq22Gv66LYIaRdVRVVGjFMnxkFt/k79+l1h0Fe9wx5hAglM3wzrlmQYgtd0xSe6UbpmCm1kZSB6nZEtsYRivrF0lB4jCcEkm5wh1hIct/gUhqnvZNUGrZUMc3XHB3bFkYyXJxv1Xa0I0Aq4doQssTu01e4SUvjba6dleAI7quecleu5yTOQFSntZaOYtKvVcOzgrQHrp4Uvq7KvyUF7uqPLU/0DMVoESY5GmphTbIQVfmi0BRVLKu4pYKvjHcizWVXBw7OfZCa7Svkxy25kXSdWgHC4u4EGdXMe6EPIXTccyoAhLUx+tjA+0VXGSHaev+Ur019BjFyWhBO0DfjTYVPJzhPE5SngpWO1hg+HbnR6cb4iedg1PO04rTrVZUeORpRR8AtmRCPPrH9a2+YB9qpPaykO6+yjA8U7/7UwiG+rDDdInnj2kd+81YdKgv+Wd02+iCflaRv+8Mf/YPWQwItNlz4bj6jWFgVofBazvr/Mu+7AKMitV0L9z6PJnhIf7EKr6X8bnqC3/Wrq8a4gd/U9HU92AH92BdO6K94Rn+ebf8MF/dFXEwC5ezYHLNkmCeLFdBMrldrlbFPIzD21+jD+0Nn1n7O4BLiSYLK6DK9JvtzT8OWoZHSWe/PT+wPfY+j6fhxyQKg+I6jILJlM6C2fQ6CYokilfTyfIuKZKR9+T/vEchiaLBfLJwXDLBFbu0vx6rcEmQ/mET5HQTZPjX5i9QSwMEFAAAAAAA2aF2RwAAAAAAAAAAAAAAAAkAAAB4bC90aGVtZS9QSwMEFAAAAAgAAAAhAIuCblj1BQAAjhoAABMAAAB4bC90aGVtZS90aGVtZTEueG1s7VlPjxs1FL8j8R2suafzfyZZNVslk6SF7rZVd1vUozNxMm4842js7G5UVULtEQkJURAXJG4cEFCplbiUT7NQBEXqV8DjyR9P4tCFbqWCmkjJ+Pn3nn9+7/nZM3Px0klKwBHKGaZZ07AvWAZAWUwHOBs1jVuHvVrdAIzDbAAJzVDTmCFmXNp9/72LcIcnKEVA6GdsBzaNhPPJjmmyWIghu0AnKBN9Q5qnkItmPjIHOTwWdlNiOpYVmCnEmQEymAqz14dDHCNwWJg0dhfGu0T8ZJwVgpjkB7EcUdWQ2MHYLv7YjEUkB0eQNA0xzoAeH6ITbgACGRcdTcOSH8PcvWgulQjfoqvo9eRnrjdXGIwdqZeP+ktFz/O9oLW075T2N3HdsBt0g6U9CYBxLGZqb2D9dqPd8edYBVReamx3wo5rV/CKfXcD3/KLbwXvrvDeBr7Xi1Y+VEDlpa/xSehEXgXvr/DBBj60Wh0vrOAlKCE4G2+gLT9wo8Vsl5AhJVe08Ibv9UJnDl+hTCW7Sv2Mb8u1FN6leU8AZHAhxxngswkawljgIkhwP8dgD48SkXgTmFEmxJZj9SxX/BZfT15Jj8AdBBXtUhSzDVHBB7A4xxPeND4UVg0F8vLZ9y+fPQEvnz0+ffD09MFPpw8fnj74UaN4BWYjVfHFt5/9+fXH4I8n37x49IUez1T8rz988svPn+uBXAU+//Lxb08fP//q09+/e6SBt3LYV+GHOEUMXEPH4CZNxdw0A6B+/s80DhOIKxowEUgNsMuTCvDaDBIdro2qzrudiyKhA16e3q1wPUjyKcca4NUkrQD3KSVtmmunc7UYS53ONBvpB8+nKu4mhEe6saO10HanE5HtWGcySlCF5g0iog1HKEMcFH10jJBG7Q7GFb/u4zinjA45uINBG2KtSw5xn+uVruBUxGWmIyhCXfHN/m3QpkRnvoOOqkixICDRmUSk4sbLcMphqmUMU6Ii9yBPdCQPZnlccTjjItIjRCjoDhBjOp3r+axC96ooLvqw75NZWkXmHI91yD1IqYrs0HGUwHSi5YyzRMV+wMYiRSG4QbmWBK2ukKIt4gCzreG+jVEl3K9e1rdEXdUnSNEzzXVLAtHqepyRIUTSuLlWzVOcvbK0rxV1/11R1xf1Vo61S2u9lG/D/QcLeAdOsxtIrBkN9F39fle///f1e9taPv+qvSrUZqmonN3TrUf3ISbkgM8I2mOyxDMxvUFPCGVDKi3vFCaJuJwPV8GNciivQU75R5gnBwmciGFsOcKIzU2PGJhQJjYJY6vtooNM0306KKW2vbg5FQqQr+Rik1nIxZbES2kQru7CluZla8RUAr40enYSymBVEq6GROiejYRtnReLhoZF3f47FqYSFbH+ACyea/heyUjkGyRoUMSp1F9E99wjvc2Z1Wk7muk1vLM5+QyRrpBQ0q1KQknDBA7QuvicY91YhbRCz9HSCOtvItbmZm0gWbUFjsWac31hJoaTpjEUx0NxmU6EPVbUTUhGWdOI+dzR/6ayTHLGO5AlJUx2lfNPMUc5IDgVua6GgWQrbrYTWm8vuYb19nnOXA8yGg5RzLdIVk3RVxrR9r4muGjQqSB9kAyOQZ9M85tQOMoP7cKBA8z40psDnCvJvfLiWrmaL8XKQ7PVEoVkksD5jqIW8xIur5d0lHlIpuuzqrbnk+mPeuex675aqehQiuaWDSTcWsXe3CavsHL1rHxtrWvUl1L9LvH6G4JCra6n5uqpWVuoneOBQBku2OK35R5x3rvBetaayrlStjbeTtD+XZH5HXFcnRLOJFV0Iu4RosVz5bISSOmiupxwMM1x07hn+S0vcvyoZtX9bs1zPatW91tureX7rt31bavTdu4Lp/Aktf1y7J64nyGz+csXKd94AZMujtkXYpqaVJ6DTaksX8DYzvYXMAALz9wLnF7DbbSDWsNt9Wpep12vNaKgXesEUdjpdSK/3ujdN8CRBHstN/KCbr0W2FFU8wKroF9v1ELPcVpe2Kp3vdb9ua/FzBf/C/dKXrt/AVBLAwQUAAAACAAAACEAfDzuwy4CAACbBAAADwAAAHhsL3dvcmtib29rLnhtbK2UTY+bMBCG75X6H5DvhI9AN0Ehq81H1UjVarXN7l5yccwQ3Bib2qZJVPW/d4CSps1lK+0Fj8344Z13bCa3x1I430EbrmRKgoFPHJBMZVzuUvK0/uiOiGMslRkVSkJKTmDI7fT9u8lB6f1Wqb2DAGlSUlhbJZ5nWAElNQNVgcQ3udIltTjVO89UGmhmCgBbCi/0/Q9eSbkkHSHRr2GoPOcMForVJUjbQTQIalG+KXhlelrJXoMrqd7XlctUWSFiywW3pxZKnJIlq51Umm4Fln0M4p6M4RW65Ewro3I7QNRvkVf1Br4XBF3J00nOBTx3tju0qu5p2XxFEEdQY5cZt5ClBGUIdYC/FnRdzWoucBJEUegTb3puxYN2MshpLewaZfV4TIyHYRg2mVjUnbCgJbUwV9Kih2/kV8ueFwoLdx7hW801mM626QSflCV0ax6oLZxai5TMk82TQX2b7KsqpFFyM1cZbI7CHN1KVTV2FDaCbzcXrtNrif/hO2WNAd5ZZRf/68Z00hj5zOFg/vjaTJ3jC5eZOqRkPMQ7cupnGB/a8IVntkhJOPRvzmufgO8Kiw3wh12nvAt6K7AfHdkegC9NHOCNa8ZV02NseMIx0KssaAn9NkYFw4Y3Q5sYh3HQZsDRfja2HdFrnpIfQeTf3fjjyPWXw9iNRuPQHUXD0J1Hi3AZ3ywXy1n8822PN1KSi2PJCqrtWlO2x//KI+QzaqAprikIdXbPVrXX75r+AlBLAwQUAAAAAADZoXZHAAAAAAAAAAAAAAAADgAAAHhsL3dvcmtzaGVldHMvUEsDBBQAAAAIAAAAIQDmVajjXQEAAIQCAAAYAAAAeGwvd29ya3NoZWV0cy9zaGVldDEueG1sjZJPawIxEMXvhX6HkLtGbW2ruEpBpB4Kpf/u2ezsbjDJLMlY9dt3dq1S8OJtXibz471JZou9d+IHYrIYMjnsD6SAYLCwocrk1+eq9yRFIh0K7TBAJg+Q5GJ+ezPbYdykGoAEE0LKZE3UTJVKpgavUx8bCNwpMXpNLGOlUhNBF92Qd2o0GDwor22QR8I0XsPAsrQGlmi2HgIdIRGcJvafatukE82ba3Bex8226Rn0DSNy6ywdOqgU3kzXVcCoc8e598N7bU7sTlzgvTURE5bUZ9yf0cvMEzVRTJrPCssJ2rWLCGUmn4dSzWfdxW8Lu/SvFqTzD3BgCAp+Iyna3eeIm7a55qNBO6ouZldd0LcoCij11tE77l7AVjUxZMxZ2hTT4rCEZHiXjOmPxmcTS02a60ZX8KpjZUMSDsru1qMU8YjpasKmqxiZIxH6k6o5OcRW3UlRItJJtG7P/2f+C1BLAwQUAAAACAAAACEApFPFz0EBAAAIBAAAEwAAAFtDb250ZW50X1R5cGVzXS54bWytk89OAjEQxu8mvkPTK9kWPBhjWDj456gc8AFqO8s2dNumUxDe3tmCHgiKBC/b7M583+/bdjqebjrH1pDQBl/zkRhyBl4HY/2i5m/z5+qOM8zKG+WCh5pvAfl0cn01nm8jICO1x5q3Ocd7KVG30CkUIYKnShNSpzK9poWMSi/VAuTNcHgrdfAZfK5y78En40do1Mpl9rShz7skCRxy9rBr7Fk1VzE6q1Wmulx7c0Cp9gRBytKDrY04oAYujxL6ys+Ave6VtiZZA2ymUn5RHXXJjZMfIS3fQ1iK302OpAxNYzWYoFcdSQTGBMpgC5A7J8oqOmX94DS/NKMsy+ifg3z7n8iR6bxh97w8QrE5AcS8dYAXow62vZj+RibhLIWINLkJzqd/jWavriIZQcr2j0SyPh948LvQT70Bc4Qtyz2efAJQSwECFAAUAAAACAAAACEAtVUwI+wAAABMAgAACwAAAAAAAAABAAAAAAAAAAAAX3JlbHMvLnJlbHNQSwECFAAUAAAACAAAACEA3kEW2XsBAAARAwAAEAAAAAAAAAABAAAAAAAVAQAAZG9jUHJvcHMvYXBwLnhtbFBLAQIUABQAAAAIAOehdkc+qGWw1QAAAG0BAAARAAAAAAAAAAEAIAAAAL4CAABkb2NQcm9wcy9jb3JlLnhtbFBLAQIUABQAAAAAANmhdkcAAAAAAAAAAAAAAAAJAAAAAAAAAAAAEAAAAMIDAAB4bC9fcmVscy9QSwECFAAUAAAACAAAACEAjYfacNoAAAAtAgAAGgAAAAAAAAABAAAAAADpAwAAeGwvX3JlbHMvd29ya2Jvb2sueG1sLnJlbHNQSwECFAAUAAAACAAAACEA3iPy024CAACxBQAADQAAAAAAAAABAAAAAAD7BAAAeGwvc3R5bGVzLnhtbFBLAQIUABQAAAAAANmhdkcAAAAAAAAAAAAAAAAJAAAAAAAAAAAAEAAAAJQHAAB4bC90aGVtZS9QSwECFAAUAAAACAAAACEAi4JuWPUFAACOGgAAEwAAAAAAAAABAAAAAAC7BwAAeGwvdGhlbWUvdGhlbWUxLnhtbFBLAQIUABQAAAAIAAAAIQB8PO7DLgIAAJsEAAAPAAAAAAAAAAEAAAAAAOENAAB4bC93b3JrYm9vay54bWxQSwECFAAUAAAAAADZoXZHAAAAAAAAAAAAAAAADgAAAAAAAAAAABAAAAA8EAAAeGwvd29ya3NoZWV0cy9QSwECFAAUAAAACAAAACEA5lWo410BAACEAgAAGAAAAAAAAAABAAAAAABoEAAAeGwvd29ya3NoZWV0cy9zaGVldDEueG1sUEsBAhQAFAAAAAgAAAAhAKRTxc9BAQAACAQAABMAAAAAAAAAAQAAAAAA+xEAAFtDb250ZW50X1R5cGVzXS54bWxQSwUGAAAAAAwADADoAgAAbRMAAAAA\", \"base64\");\n","\n\nconst _ = require(\"lodash\");\n\n/**\n * XML query methods.\n * @private\n */\nmodule.exports = {\n    /**\n     * Append a child to the node.\n     * @param {{}} node - The parent node.\n     * @param {{}} child - The child node.\n     * @returns {undefined}\n     */\n    appendChild(node, child) {\n        if (!node.children) node.children = [];\n        node.children.push(child);\n    },\n\n    /**\n     * Append a child if one with the given name is not found.\n     * @param {{}} node - The parent node.\n     * @param {string} name - The child node name.\n     * @returns {{}} The child.\n     */\n    appendChildIfNotFound(node, name) {\n        let child = this.findChild(node, name);\n        if (!child) {\n            child = { name, attributes: {}, children: [] };\n            this.appendChild(node, child);\n        }\n\n        return child;\n    },\n\n    /**\n     * Find a child with the given name.\n     * @param {{}} node - The parent node.\n     * @param {string} name - The name to find.\n     * @returns {undefined|{}} The child if found.\n     */\n    findChild(node, name) {\n        return _.find(node.children, { name });\n    },\n\n    /**\n     * Get an attribute from a child node.\n     * @param {{}} node - The parent node.\n     * @param {string} name - The name of the child node.\n     * @param {string} attribute - The name of the attribute.\n     * @returns {undefined|*} The value of the attribute if found.\n     */\n    getChildAttribute(node, name, attribute) {\n        const child = this.findChild(node, name);\n        if (child) return child.attributes && child.attributes[attribute];\n    },\n\n    /**\n     * Returns a value indicating whether the node has a child with the given name.\n     * @param {{}} node - The parent node.\n     * @param {string} name - The name of the child node.\n     * @returns {boolean} True if found, false otherwise.\n     */\n    hasChild(node, name) {\n        return _.some(node.children, { name });\n    },\n\n    /**\n     * Insert the child after the specified node.\n     * @param {{}} node - The parent node.\n     * @param {{}} child - The child node.\n     * @param {{}} after - The node to insert after.\n     * @returns {undefined}\n     */\n    insertAfter(node, child, after) {\n        if (!node.children) node.children = [];\n        const index = node.children.indexOf(after);\n        node.children.splice(index + 1, 0, child);\n    },\n\n    /**\n     * Insert the child before the specified node.\n     * @param {{}} node - The parent node.\n     * @param {{}} child - The child node.\n     * @param {{}} before - The node to insert before.\n     * @returns {undefined}\n     */\n    insertBefore(node, child, before) {\n        if (!node.children) node.children = [];\n        const index = node.children.indexOf(before);\n        node.children.splice(index, 0, child);\n    },\n\n    /**\n     * Insert a child node in the correct order.\n     * @param {{}} node - The parent node.\n     * @param {{}} child - The child node.\n     * @param {Array.<string>} nodeOrder - The order of the node names.\n     * @returns {undefined}\n     */\n    insertInOrder(node, child, nodeOrder) {\n        const childIndex = nodeOrder.indexOf(child.name);\n        if (node.children && childIndex >= 0) {\n            for (let i = childIndex + 1; i < nodeOrder.length; i++) {\n                const sibling = this.findChild(node, nodeOrder[i]);\n                if (sibling) {\n                    this.insertBefore(node, child, sibling);\n                    return;\n                }\n            }\n        }\n\n        this.appendChild(node, child);\n    },\n\n    /**\n     * Check if the node is empty (no attributes and no children).\n     * @param {{}} node - The node.\n     * @returns {boolean} True if empty, false otherwise.\n     */\n    isEmpty(node) {\n        return _.isEmpty(node.children) && _.isEmpty(node.attributes);\n    },\n\n    /**\n     * Remove a child node.\n     * @param {{}} node - The parent node.\n     * @param {string|{}} child - The child node or name of node.\n     * @returns {undefined}\n     */\n    removeChild(node, child) {\n        if (!node.children) return;\n        if (typeof child === 'string') {\n            _.remove(node.children, { name: child });\n        } else {\n            const index = node.children.indexOf(child);\n            if (index >= 0) node.children.splice(index, 1);\n        }\n    },\n\n    /**\n     * Set/unset the attributes on the node.\n     * @param {{}} node - The node.\n     * @param {{}} attributes - The attributes to set.\n     * @returns {undefined}\n     */\n    setAttributes(node, attributes) {\n        _.forOwn(attributes, (value, attribute) => {\n            if (_.isNil(value)) {\n                if (node.attributes) delete node.attributes[attribute];\n            } else {\n                if (!node.attributes) node.attributes = {};\n                node.attributes[attribute] = value;\n            }\n        });\n    },\n\n    /**\n     * Set attributes on a child node, creating the child if necessary.\n     * @param {{}} node - The parent node.\n     * @param {string} name - The name of the child node.\n     * @param {{}} attributes - The attributes to set.\n     * @returns {{}} The child.\n     */\n    setChildAttributes(node, name, attributes) {\n        let child = this.findChild(node, name);\n        _.forOwn(attributes, (value, attribute) => {\n            if (_.isNil(value)) {\n                if (child && child.attributes) delete child.attributes[attribute];\n            } else {\n                if (!child) {\n                    child = { name, attributes: {}, children: [] };\n                    this.appendChild(node, child);\n                }\n\n                if (!child.attributes) child.attributes = {};\n                child.attributes[attribute] = value;\n            }\n        });\n\n        return child;\n    },\n\n    /**\n     * Remove the child node if empty.\n     * @param {{}} node - The parent node.\n     * @param {string|{}} child - The child or name of child node.\n     * @returns {undefined}\n     */\n    removeChildIfEmpty(node, child) {\n        if (typeof child === 'string') child = this.findChild(node, child);\n        if (child && this.isEmpty(child)) this.removeChild(node, child);\n    }\n};\n","\n\nconst _ = require(\"lodash\");\nconst Cell = require(\"./Cell\");\nconst Row = require(\"./Row\");\nconst Column = require(\"./Column\");\nconst Range = require(\"./Range\");\nconst Relationships = require(\"./Relationships\");\nconst xmlq = require(\"./xmlq\");\nconst regexify = require(\"./regexify\");\nconst addressConverter = require(\"./addressConverter\");\nconst ArgHandler = require(\"./ArgHandler\");\nconst colorIndexes = require(\"./colorIndexes\");\nconst PageBreaks = require(\"./PageBreaks\");\n\n// Order of the nodes as defined by the spec.\nconst nodeOrder = [\n    \"sheetPr\", \"dimension\", \"sheetViews\", \"sheetFormatPr\", \"cols\", \"sheetData\",\n    \"sheetCalcPr\", \"sheetProtection\", \"autoFilter\", \"protectedRanges\", \"scenarios\", \"autoFilter\",\n    \"sortState\", \"dataConsolidate\", \"customSheetViews\", \"mergeCells\", \"phoneticPr\",\n    \"conditionalFormatting\", \"dataValidations\", \"hyperlinks\", \"printOptions\",\n    \"pageMargins\", \"pageSetup\", \"headerFooter\", \"rowBreaks\", \"colBreaks\",\n    \"customProperties\", \"cellWatches\", \"ignoredErrors\", \"smartTags\", \"drawing\",\n    \"drawingHF\", \"legacyDrawing\", \"legacyDrawingHF\", \"picture\", \"oleObjects\", \"controls\", \"webPublishItems\", \"tableParts\",\n    \"extLst\"\n];\n\n/**\n * A worksheet.\n */\nclass Sheet {\n    // /**\n    //  * Creates a new instance of Sheet.\n    //  * @param {Workbook} workbook - The parent workbook.\n    //  * @param {{}} idNode - The sheet ID node (from the parent workbook).\n    //  * @param {{}} node - The sheet node.\n    //  * @param {{}} [relationshipsNode] - The optional sheet relationships node.\n    //  */\n    constructor(workbook, idNode, node, relationshipsNode) {\n        this._init(workbook, idNode, node, relationshipsNode);\n    }\n\n    /* PUBLIC */\n\n    /**\n     * Gets a value indicating whether the sheet is the active sheet in the workbook.\n     * @returns {boolean} True if active, false otherwise.\n     *//**\n     * Make the sheet the active sheet in the workkbok.\n     * @param {boolean} active - Must be set to `true`. Deactivating directly is not supported. To deactivate, you should activate a different sheet instead.\n     * @returns {Sheet} The sheet.\n     */\n    active() {\n        return new ArgHandler('Sheet.active')\n            .case(() => {\n                return this.workbook().activeSheet() === this;\n            })\n            .case('boolean', active => {\n                if (!active) throw new Error(\"Deactivating sheet directly not supported. Activate a different sheet instead.\");\n                this.workbook().activeSheet(this);\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Get the active cell in the sheet.\n     * @returns {Cell} The active cell.\n     *//**\n     * Set the active cell in the workbook.\n     * @param {string|Cell} cell - The cell or address of cell to activate.\n     * @returns {Sheet} The sheet.\n     *//**\n     * Set the active cell in the workbook by row and column.\n     * @param {number} rowNumber - The row number of the cell.\n     * @param {string|number} columnNameOrNumber - The column name or number of the cell.\n     * @returns {Sheet} The sheet.\n     */\n    activeCell() {\n        const sheetViewNode = this._getOrCreateSheetViewNode();\n        let selectionNode = xmlq.findChild(sheetViewNode, \"selection\");\n        return new ArgHandler('Sheet.activeCell')\n            .case(() => {\n                const cellAddress = selectionNode ? selectionNode.attributes.activeCell : \"A1\";\n                return this.cell(cellAddress);\n            })\n            .case(['number', '*'], (rowNumber, columnNameOrNumber) => {\n                const cell = this.cell(rowNumber, columnNameOrNumber);\n                return this.activeCell(cell);\n            })\n            .case('*', cell => {\n                if (!selectionNode) {\n                    selectionNode = {\n                        name: \"selection\",\n                        attributes: {},\n                        children: []\n                    };\n\n                    xmlq.appendChild(sheetViewNode, selectionNode);\n                }\n\n                if (!(cell instanceof Cell)) cell = this.cell(cell);\n                selectionNode.attributes.activeCell = selectionNode.attributes.sqref = cell.address();\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Gets the cell with the given address.\n     * @param {string} address - The address of the cell.\n     * @returns {Cell} The cell.\n     *//**\n     * Gets the cell with the given row and column numbers.\n     * @param {number} rowNumber - The row number of the cell.\n     * @param {string|number} columnNameOrNumber - The column name or number of the cell.\n     * @returns {Cell} The cell.\n     */\n    cell() {\n        return new ArgHandler('Sheet.cell')\n            .case('string', address => {\n                const ref = addressConverter.fromAddress(address);\n                if (ref.type !== 'cell') throw new Error('Sheet.cell: Invalid address.');\n                return this.row(ref.rowNumber).cell(ref.columnNumber);\n            })\n            .case(['number', '*'], (rowNumber, columnNameOrNumber) => {\n                return this.row(rowNumber).cell(columnNameOrNumber);\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Gets a column in the sheet.\n     * @param {string|number} columnNameOrNumber - The name or number of the column.\n     * @returns {Column} The column.\n     */\n    column(columnNameOrNumber) {\n        const columnNumber = typeof columnNameOrNumber === \"string\" ? addressConverter.columnNameToNumber(columnNameOrNumber) : columnNameOrNumber;\n\n        // If we're already created a column for this column number, return it.\n        if (this._columns[columnNumber]) return this._columns[columnNumber];\n\n        // We need to create a new column, which requires a backing col node. There may already exist a node whose min/max cover our column.\n        // First, see if there is an existing col node.\n        const existingColNode = this._colNodes[columnNumber];\n\n        let colNode;\n        if (existingColNode) {\n            // If the existing node covered earlier columns than the new one, we need to have a col node to cover the min up to our new node.\n            if (existingColNode.attributes.min < columnNumber) {\n                // Clone the node and set the max to the column before our new col.\n                const beforeColNode = _.cloneDeep(existingColNode);\n                beforeColNode.attributes.max = columnNumber - 1;\n\n                // Update the col nodes cache.\n                for (let i = beforeColNode.attributes.min; i <= beforeColNode.attributes.max; i++) {\n                    this._colNodes[i] = beforeColNode;\n                }\n            }\n\n            // Make a clone for the new column. Set the min/max to the column number and cache it.\n            colNode = _.cloneDeep(existingColNode);\n            colNode.attributes.min = columnNumber;\n            colNode.attributes.max = columnNumber;\n            this._colNodes[columnNumber] = colNode;\n\n            // If the max of the existing node is greater than the nre one, create a col node for that too.\n            if (existingColNode.attributes.max > columnNumber) {\n                const afterColNode = _.cloneDeep(existingColNode);\n                afterColNode.attributes.min = columnNumber + 1;\n                for (let i = afterColNode.attributes.min; i <= afterColNode.attributes.max; i++) {\n                    this._colNodes[i] = afterColNode;\n                }\n            }\n        } else {\n            // The was no existing node so create a new one.\n            colNode = {\n                name: 'col',\n                attributes: {\n                    min: columnNumber,\n                    max: columnNumber\n                },\n                children: []\n            };\n\n            this._colNodes[columnNumber] = colNode;\n        }\n\n        // Create the new column and cache it.\n        const column = new Column(this, colNode);\n        this._columns[columnNumber] = column;\n        return column;\n    }\n\n    /**\n     * Gets a defined name scoped to the sheet.\n     * @param {string} name - The defined name.\n     * @returns {undefined|string|Cell|Range|Row|Column} What the defined name refers to or undefined if not found. Will return the string formula if not a Row, Column, Cell, or Range.\n     *//**\n     * Set a defined name scoped to the sheet.\n     * @param {string} name - The defined name.\n     * @param {string|Cell|Range|Row|Column} refersTo - What the name refers to.\n     * @returns {Workbook} The workbook.\n     */\n    definedName() {\n        return new ArgHandler(\"Workbook.definedName\")\n            .case('string', name => {\n                return this.workbook().scopedDefinedName(this, name);\n            })\n            .case(['string', '*'], (name, refersTo) => {\n                this.workbook().scopedDefinedName(this, name, refersTo);\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Deletes the sheet and returns the parent workbook.\n     * @returns {Workbook} The workbook.\n     */\n    delete() {\n        this.workbook().deleteSheet(this);\n        return this.workbook();\n    }\n\n    /**\n     * Find the given pattern in the sheet and optionally replace it.\n     * @param {string|RegExp} pattern - The pattern to look for. Providing a string will result in a case-insensitive substring search. Use a RegExp for more sophisticated searches.\n     * @param {string|function} [replacement] - The text to replace or a String.replace callback function. If pattern is a string, all occurrences of the pattern in each cell will be replaced.\n     * @returns {Array.<Cell>} The matching cells.\n     */\n    find(pattern, replacement) {\n        pattern = regexify(pattern);\n\n        let matches = [];\n        this._rows.forEach(row => {\n            if (!row) return;\n            matches = matches.concat(row.find(pattern, replacement));\n        });\n\n        return matches;\n    }\n\n    /**\n     * Gets a value indicating whether this sheet's grid lines are visible.\n     * @returns {boolean} True if selected, false if not.\n     *//**\n     * Sets whether this sheet's grid lines are visible.\n     * @param {boolean} selected - True to make visible, false to hide.\n     * @returns {Sheet} The sheet.\n     */\n    gridLinesVisible() {\n        const sheetViewNode = this._getOrCreateSheetViewNode();\n        return new ArgHandler('Sheet.gridLinesVisible')\n            .case(() => {\n                return sheetViewNode.attributes.showGridLines === 1 || sheetViewNode.attributes.showGridLines === undefined;\n            })\n            .case('boolean', visible => {\n                sheetViewNode.attributes.showGridLines = visible ? 1 : 0;\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Gets a value indicating if the sheet is hidden or not.\n     * @returns {boolean|string} True if hidden, false if visible, and 'very' if very hidden.\n     *//**\n     * Set whether the sheet is hidden or not.\n     * @param {boolean|string} hidden - True to hide, false to show, and 'very' to make very hidden.\n     * @returns {Sheet} The sheet.\n     */\n    hidden() {\n        return new ArgHandler('Sheet.hidden')\n            .case(() => {\n                if (this._idNode.attributes.state === 'hidden') return true;\n                if (this._idNode.attributes.state === 'veryHidden') return \"very\";\n                return false;\n            })\n            .case('*', hidden => {\n                if (hidden) {\n                    const visibleSheets = _.filter(this.workbook().sheets(), sheet => !sheet.hidden());\n                    if (visibleSheets.length === 1 && visibleSheets[0] === this) {\n                        throw new Error(\"This sheet may not be hidden as a workbook must contain at least one visible sheet.\");\n                    }\n\n                    // If activate, activate the first other visible sheet.\n                    if (this.active()) {\n                        const activeIndex = visibleSheets[0] === this ? 1 : 0;\n                        visibleSheets[activeIndex].active(true);\n                    }\n                }\n\n                if (hidden === 'very') this._idNode.attributes.state = 'veryHidden';\n                else if (hidden) this._idNode.attributes.state = 'hidden';\n                else delete this._idNode.attributes.state;\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Move the sheet.\n     * @param {number|string|Sheet} [indexOrBeforeSheet] The index to move the sheet to or the sheet (or name of sheet) to move this sheet before. Omit this argument to move to the end of the workbook.\n     * @returns {Sheet} The sheet.\n     */\n    move(indexOrBeforeSheet) {\n        this.workbook().moveSheet(this, indexOrBeforeSheet);\n        return this;\n    }\n\n    /**\n     * Get the name of the sheet.\n     * @returns {string} The sheet name.\n     *//**\n     * Set the name of the sheet. *Note: this method does not rename references to the sheet so formulas, etc. can be broken. Use with caution!*\n     * @param {string} name - The name to set to the sheet.\n     * @returns {Sheet} The sheet.\n     */\n    name() {\n        return new ArgHandler('Sheet.name')\n            .case(() => {\n                return `${this._idNode.attributes.name}`;\n            })\n            .case('string', name => {\n                this._idNode.attributes.name = name;\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Gets a range from the given range address.\n     * @param {string} address - The range address (e.g. 'A1:B3').\n     * @returns {Range} The range.\n     *//**\n     * Gets a range from the given cells or cell addresses.\n     * @param {string|Cell} startCell - The starting cell or cell address (e.g. 'A1').\n     * @param {string|Cell} endCell - The ending cell or cell address (e.g. 'B3').\n     * @returns {Range} The range.\n     *//**\n     * Gets a range from the given row numbers and column names or numbers.\n     * @param {number} startRowNumber - The starting cell row number.\n     * @param {string|number} startColumnNameOrNumber - The starting cell column name or number.\n     * @param {number} endRowNumber - The ending cell row number.\n     * @param {string|number} endColumnNameOrNumber - The ending cell column name or number.\n     * @returns {Range} The range.\n     */\n    range() {\n        return new ArgHandler('Sheet.range')\n            .case('string', address => {\n                const ref = addressConverter.fromAddress(address);\n                if (ref.type !== 'range') throw new Error('Sheet.range: Invalid address');\n                return this.range(ref.startRowNumber, ref.startColumnNumber, ref.endRowNumber, ref.endColumnNumber);\n            })\n            .case(['*', '*'], (startCell, endCell) => {\n                if (typeof startCell === \"string\") startCell = this.cell(startCell);\n                if (typeof endCell === \"string\") endCell = this.cell(endCell);\n                return new Range(startCell, endCell);\n            })\n            .case(['number', '*', 'number', '*'], (startRowNumber, startColumnNameOrNumber, endRowNumber, endColumnNameOrNumber) => {\n                return this.range(this.cell(startRowNumber, startColumnNameOrNumber), this.cell(endRowNumber, endColumnNameOrNumber));\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Unsets sheet autoFilter.\n     * @returns {Sheet} This sheet.\n     *//**\n     * Sets sheet autoFilter to a Range.\n     * @param {Range} range - The autoFilter range.\n     * @returns {Sheet} This sheet.\n     */\n    autoFilter(range) {\n        this._autoFilter = range;\n\n        return this;\n    }\n\n    /**\n     * Gets the row with the given number.\n     * @param {number} rowNumber - The row number.\n     * @returns {Row} The row with the given number.\n     */\n    row(rowNumber) {\n        if (rowNumber < 1) throw new RangeError(`Invalid row number ${rowNumber}. Remember that spreadsheets use 1-based indexing.`);\n\n        if (this._rows[rowNumber]) return this._rows[rowNumber];\n\n        const rowNode = {\n            name: 'row',\n            attributes: {\n                r: rowNumber\n            },\n            children: []\n        };\n\n        const row = new Row(this, rowNode);\n        this._rows[rowNumber] = row;\n        return row;\n    }\n\n    /**\n     * Get the tab color. (See style [Color](#color).)\n     * @returns {undefined|Color} The color or undefined if not set.\n     *//**\n     * Sets the tab color. (See style [Color](#color).)\n     * @returns {Color|string|number} color - Color of the tab. If string, will set an RGB color. If number, will set a theme color.\n     */\n    tabColor() {\n        return new ArgHandler(\"Sheet.tabColor\")\n            .case(() => {\n                const tabColorNode = xmlq.findChild(this._sheetPrNode, \"tabColor\");\n                if (!tabColorNode) return;\n\n                const color = {};\n                if (tabColorNode.attributes.hasOwnProperty('rgb')) color.rgb = tabColorNode.attributes.rgb;\n                else if (tabColorNode.attributes.hasOwnProperty('theme')) color.theme = tabColorNode.attributes.theme;\n                else if (tabColorNode.attributes.hasOwnProperty('indexed')) color.rgb = colorIndexes[tabColorNode.attributes.indexed];\n\n                if (tabColorNode.attributes.hasOwnProperty('tint')) color.tint = tabColorNode.attributes.tint;\n\n                return color;\n            })\n            .case(\"string\", rgb => this.tabColor({ rgb }))\n            .case(\"integer\", theme => this.tabColor({ theme }))\n            .case(\"nil\", () => {\n                xmlq.removeChild(this._sheetPrNode, \"tabColor\");\n                return this;\n            })\n            .case(\"object\", color => {\n                const tabColorNode = xmlq.appendChildIfNotFound(this._sheetPrNode, \"tabColor\");\n                xmlq.setAttributes(tabColorNode, {\n                    rgb: color.rgb && color.rgb.toUpperCase(),\n                    indexed: null,\n                    theme: color.theme,\n                    tint: color.tint\n                });\n\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Gets a value indicating whether this sheet is selected.\n     * @returns {boolean} True if selected, false if not.\n     *//**\n     * Sets whether this sheet is selected.\n     * @param {boolean} selected - True to select, false to deselected.\n     * @returns {Sheet} The sheet.\n     */\n    tabSelected() {\n        const sheetViewNode = this._getOrCreateSheetViewNode();\n        return new ArgHandler('Sheet.tabSelected')\n            .case(() => {\n                return sheetViewNode.attributes.tabSelected === 1;\n            })\n            .case('boolean', selected => {\n                if (selected) sheetViewNode.attributes.tabSelected = 1;\n                else delete sheetViewNode.attributes.tabSelected;\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Gets a value indicating whether this sheet is rtl (Right To Left).\n     * @returns {boolean} True if rtl, false if ltr.\n     *//**\n     * Sets whether this sheet is rtl.\n     * @param {boolean} rtl - True to rtl, false to ltr (Left To Right).\n     * @returns {Sheet} The sheet.\n     */\n    rightToLeft() {\n        const sheetViewNode = this._getOrCreateSheetViewNode();\n        return new ArgHandler('Sheet.rightToLeft')\n            .case(() => {\n                return sheetViewNode.attributes.rightToLeft;\n            })\n            .case('boolean', rtl => {\n                if (rtl) sheetViewNode.attributes.rightToLeft = true;\n                else delete sheetViewNode.attributes.rightToLeft;\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Get the range of cells in the sheet that have contained a value or style at any point. Useful for extracting the entire sheet contents.\n     * @returns {Range|undefined} The used range or undefined if no cells in the sheet are used.\n     */\n    usedRange() {\n        const minRowNumber = _.findIndex(this._rows);\n        const maxRowNumber = this._rows.length - 1;\n\n        let minColumnNumber = 0;\n        let maxColumnNumber = 0;\n        for (let i = 0; i < this._rows.length; i++) {\n            const row = this._rows[i];\n            if (!row) continue;\n\n            const minUsedColumnNumber = row.minUsedColumnNumber();\n            const maxUsedColumnNumber = row.maxUsedColumnNumber();\n            if (minUsedColumnNumber > 0 && (!minColumnNumber || minUsedColumnNumber < minColumnNumber)) minColumnNumber = minUsedColumnNumber;\n            if (maxUsedColumnNumber > 0 && (!maxColumnNumber || maxUsedColumnNumber > maxColumnNumber)) maxColumnNumber = maxUsedColumnNumber;\n        }\n\n        // Return undefined if nothing in the sheet is used.\n        if (minRowNumber <= 0 || minColumnNumber <= 0 || maxRowNumber <= 0 || maxColumnNumber <= 0) return;\n\n        return this.range(minRowNumber, minColumnNumber, maxRowNumber, maxColumnNumber);\n    }\n\n    /**\n     * Gets the parent workbook.\n     * @returns {Workbook} The parent workbook.\n     */\n    workbook() {\n        return this._workbook;\n    }\n\n    /**\n     * Gets all page breaks.\n     * @returns {{}} the object holds both vertical and horizontal PageBreaks.\n     */\n    pageBreaks() {\n        return this._pageBreaks;\n    }\n\n    /**\n     * Gets the vertical page breaks.\n     * @returns {PageBreaks} vertical PageBreaks.\n     */\n    verticalPageBreaks() {\n        return this._pageBreaks.colBreaks;\n    }\n\n    /**\n     * Gets the horizontal page breaks.\n     * @returns {PageBreaks} horizontal PageBreaks.\n     */\n    horizontalPageBreaks() {\n        return this._pageBreaks.rowBreaks;\n    }\n\n    /* INTERNAL */\n\n    /**\n     * Clear cells that are using a given shared formula ID.\n     * @param {number} sharedFormulaId - The shared formula ID.\n     * @returns {undefined}\n     * @ignore\n     */\n    clearCellsUsingSharedFormula(sharedFormulaId) {\n        this._rows.forEach(row => {\n            if (!row) return;\n            row.clearCellsUsingSharedFormula(sharedFormulaId);\n        });\n    }\n\n    /**\n     * Get an existing column style ID.\n     * @param {number} columnNumber - The column number.\n     * @returns {undefined|number} The style ID.\n     * @ignore\n     */\n    existingColumnStyleId(columnNumber) {\n        // This will work after setting Column.style because Column updates the attributes live.\n        const colNode = this._colNodes[columnNumber];\n        return colNode && colNode.attributes.style;\n    }\n\n    /**\n     * Call a callback for each column number that has a node defined for it.\n     * @param {Function} callback - The callback.\n     * @returns {undefined}\n     * @ignore\n     */\n    forEachExistingColumnNumber(callback) {\n        _.forEach(this._colNodes, (node, columnNumber) => {\n            if (!node) return;\n            callback(columnNumber);\n        });\n    }\n\n    /**\n     * Call a callback for each existing row.\n     * @param {Function} callback - The callback.\n     * @returns {undefined}\n     * @ignore\n     */\n    forEachExistingRow(callback) {\n        _.forEach(this._rows, (row, rowNumber) => {\n            if (row) callback(row, rowNumber);\n        });\n\n        return this;\n    }\n\n    /**\n     * Get the hyperlink attached to the cell with the given address.\n     * @param {string} address - The address of the hyperlinked cell.\n     * @returns {string|undefined} The hyperlink or undefined if not set.\n     *//**\n     * Set the hyperlink on the cell with the given address.\n     * @param {string} address - The address of the hyperlinked cell.\n     * @param {string} hyperlink - The hyperlink to set or undefined to clear.\n     * @param {boolean} [internal] - The flag to force hyperlink to be internal. If true, then autodetect is skipped.\n     * @returns {Sheet} The sheet.\n     *//**\n     * Set the hyperlink on the cell with the given address. If opts is a Cell an internal hyperlink is added.\n     * @param {string} address - The address of the hyperlinked cell.\n     * @param {object|Cell} opts - Options.\n     * @returns {Sheet} The sheet.\n     * @ignore\n     *//**\n     * Set the hyperlink on the cell with the given address and options.\n     * @param {string} address - The address of the hyperlinked cell.\n     * @param {{}|Cell} opts - Options or Cell. If opts is a Cell then an internal hyperlink is added.\n     * @param {string|Cell} [opts.hyperlink] - The hyperlink to set, can be a Cell or an internal/external string.\n     * @param {string} [opts.tooltip] - Additional text to help the user understand more about the hyperlink.\n     * @param {string} [opts.email] - Email address, ignored if opts.hyperlink is set.\n     * @param {string} [opts.emailSubject] - Email subject, ignored if opts.hyperlink is set.\n     * @returns {Sheet} The sheet.\n     */\n    hyperlink() {\n        return new ArgHandler('Sheet.hyperlink')\n            .case('string', address => {\n                const hyperlinkNode = this._hyperlinks[address];\n                if (!hyperlinkNode) return;\n                const relationship = this._relationships.findById(hyperlinkNode.attributes['r:id']);\n                return relationship && relationship.attributes.Target;\n            })\n            .case(['string', 'nil'], address => {\n                // TODO: delete relationship\n                delete this._hyperlinks[address];\n                return this;\n            })\n            .case(['string', 'string'], (address, hyperlink) => {\n                return this.hyperlink(address, hyperlink, false);\n            })\n            .case(['string', 'string', 'boolean'], (address, hyperlink, internal) => {\n                const isHyperlinkInternalAddress = internal || addressConverter.fromAddress(hyperlink);\n                let nodeAttributes;\n                if (isHyperlinkInternalAddress) {\n                    nodeAttributes = {\n                        ref: address,\n                        location: hyperlink,\n                        display: hyperlink\n                    };\n                } else {\n                    const relationship = this._relationships.add(\"hyperlink\", hyperlink, \"External\");\n                    nodeAttributes = {\n                        ref: address,\n                        'r:id': relationship.attributes.Id\n                    };\n                }\n                this._hyperlinks[address] = {\n                    name: 'hyperlink',\n                    attributes: nodeAttributes,\n                    children: []\n                };\n                return this;\n            })\n            .case(['string', 'object'], (address, opts) => {\n                if (opts instanceof Cell) {\n                    const cell = opts;\n                    const hyperlink = cell.address({ includeSheetName: true });\n                    this.hyperlink(address, hyperlink, true);\n                } else if (opts.hyperlink) {\n                    this.hyperlink(address, opts.hyperlink);\n                } else if (opts.email) {\n                    const email = opts.email;\n                    const subject = opts.emailSubject || '';\n                    this.hyperlink(address, encodeURI(`mailto:${email}?subject=${subject}`));\n                }\n                const hyperlinkNode = this._hyperlinks[address];\n                if (hyperlinkNode) {\n                    if (opts.tooltip) {\n                        hyperlinkNode.attributes.tooltip = opts.tooltip;\n                    }\n                }\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Increment and return the max shared formula ID.\n     * @returns {number} The new max shared formula ID.\n     * @ignore\n     */\n    incrementMaxSharedFormulaId() {\n        return ++this._maxSharedFormulaId;\n    }\n\n    /**\n     * Get a value indicating whether the cells in the given address are merged.\n     * @param {string} address - The address to check.\n     * @returns {boolean} True if merged, false if not merged.\n     * @ignore\n     *//**\n     * Merge/unmerge cells by adding/removing a mergeCell entry.\n     * @param {string} address - The address to merge.\n     * @param {boolean} merged - True to merge, false to unmerge.\n     * @returns {Sheet} The sheet.\n     * @ignore\n     */\n    merged() {\n        return new ArgHandler('Sheet.merge')\n            .case('string', address => {\n                return this._mergeCells.hasOwnProperty(address);\n            })\n            .case(['string', '*'], (address, merge) => {\n                if (merge) {\n                    this._mergeCells[address] = {\n                        name: 'mergeCell',\n                        attributes: { ref: address },\n                        children: []\n                    };\n                } else {\n                    delete this._mergeCells[address];\n                }\n\n                return this;\n            })\n            .handle(arguments);\n    }\n\n\n    /**\n     * Gets a Object or undefined of the cells in the given address.\n     * @param {string} address - The address to check.\n     * @returns {object|boolean} Object or false if not set\n     * @ignore\n     *//**\n     * Removes dataValidation at the given address\n     * @param {string} address - The address to remove.\n     * @param {boolean} obj - false to delete.\n     * @returns {boolean} true if removed.\n     * @ignore\n     *//**\n     * Add dataValidation to cells at the given address if object or string\n     * @param {string} address - The address to set.\n     * @param {object|string} obj - Object or String to set\n     * @returns {Sheet} The sheet.\n     * @ignore\n     */\n    dataValidation() {\n        return new ArgHandler('Sheet.dataValidation')\n            .case('string', address => {\n                if (this._dataValidations[address]) {\n                    return {\n                        type: this._dataValidations[address].attributes.type,\n                        allowBlank: this._dataValidations[address].attributes.allowBlank,\n                        showInputMessage: this._dataValidations[address].attributes.showInputMessage,\n                        prompt: this._dataValidations[address].attributes.prompt,\n                        promptTitle: this._dataValidations[address].attributes.promptTitle,\n                        showErrorMessage: this._dataValidations[address].attributes.showErrorMessage,\n                        error: this._dataValidations[address].attributes.error,\n                        errorTitle: this._dataValidations[address].attributes.errorTitle,\n                        operator: this._dataValidations[address].attributes.operator,\n                        formula1: this._dataValidations[address].children[0].children[0],\n                        formula2: this._dataValidations[address].children[1] ? this._dataValidations[address].children[1].children[0] : undefined\n                    };\n                } else {\n                    return false;\n                }\n            })\n            .case(['string', 'boolean'], (address, obj) => {\n                if (this._dataValidations[address]) {\n                    if (obj === false) return delete this._dataValidations[address];\n                } else {\n                    return false;\n                }\n            })\n            .case(['string', '*'], (address, obj) => {\n                if (typeof obj === 'string') {\n                    this._dataValidations[address] = {\n                        name: 'dataValidation',\n                        attributes: {\n                            type: 'list',\n                            allowBlank: false,\n                            showInputMessage: false,\n                            prompt: '',\n                            promptTitle: '',\n                            showErrorMessage: false,\n                            error: '',\n                            errorTitle: '',\n                            operator: '',\n                            sqref: address\n                        },\n                        children: [\n                            {\n                                name: 'formula1',\n                                atrributes: {},\n                                children: [obj]\n                            },\n                            {\n                                name: 'formula2',\n                                atrributes: {},\n                                children: ['']\n                            }\n                        ]\n                    };\n                } else if (typeof obj === 'object') {\n                    this._dataValidations[address] = {\n                        name: 'dataValidation',\n                        attributes: {\n                            type: obj.type ? obj.type : 'list',\n                            allowBlank: obj.allowBlank,\n                            showInputMessage: obj.showInputMessage,\n                            prompt: obj.prompt,\n                            promptTitle: obj.promptTitle,\n                            showErrorMessage: obj.showErrorMessage,\n                            error: obj.error,\n                            errorTitle: obj.errorTitle,\n                            operator: obj.operator,\n                            sqref: address\n                        },\n                        children: [\n                            {\n                                name: 'formula1',\n                                atrributes: {},\n                                children: [\n                                    obj.formula1\n                                ]\n                            },\n                            {\n                                name: 'formula2',\n                                atrributes: {},\n                                children: [\n                                    obj.formula2\n                                ]\n                            }\n                        ]\n                    };\n                }\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Convert the sheet to a collection of XML objects.\n     * @returns {{}} The XML forms.\n     * @ignore\n     */\n    toXmls() {\n        // Shallow clone the node so we don't have to remove these children later if they don't belong.\n        const node = _.clone(this._node);\n        node.children = node.children.slice();\n\n        // Add the columns if needed.\n        this._colsNode.children = _.filter(this._colNodes, (colNode, i) => {\n            // Columns should only be present if they have attributes other than min/max.\n            return colNode && i === colNode.attributes.min && Object.keys(colNode.attributes).length > 2;\n        });\n        if (this._colsNode.children.length) {\n            xmlq.insertInOrder(node, this._colsNode, nodeOrder);\n        }\n\n        // Add the hyperlinks if needed.\n        this._hyperlinksNode.children = _.values(this._hyperlinks);\n        if (this._hyperlinksNode.children.length) {\n            xmlq.insertInOrder(node, this._hyperlinksNode, nodeOrder);\n        }\n\n        // Add the printOptions if needed.\n        if (this._printOptionsNode) {\n            if (Object.keys(this._printOptionsNode.attributes).length) {\n                xmlq.insertInOrder(node, this._printOptionsNode, nodeOrder);\n            }\n        }\n\n        // Add the pageMargins if needed.\n        if (this._pageMarginsNode && this._pageMarginsPresetName) {\n            // Clone to preserve the current state of this sheet.\n            const childNode = _.clone(this._pageMarginsNode);\n            if (Object.keys(this._pageMarginsNode.attributes).length) {\n                // Fill in any missing attribute values with presets.\n                childNode.attributes = _.assign(\n                    this._pageMarginsPresets[this._pageMarginsPresetName],\n                    this._pageMarginsNode.attributes);\n            } else {\n                // No need to fill in, all attributes is currently empty, simply replace.\n                childNode.attributes = this._pageMarginsPresets[this._pageMarginsPresetName];\n            }\n            xmlq.insertInOrder(node, childNode, nodeOrder);\n        }\n\n        // Add the merge cells if needed.\n        this._mergeCellsNode.children = _.values(this._mergeCells);\n        if (this._mergeCellsNode.children.length) {\n            xmlq.insertInOrder(node, this._mergeCellsNode, nodeOrder);\n        }\n\n        // Add the DataValidation cells if needed.\n        this._dataValidationsNode.children = _.values(this._dataValidations);\n        if (this._dataValidationsNode.children.length) {\n            xmlq.insertInOrder(node, this._dataValidationsNode, nodeOrder);\n        }\n\n        if (this._autoFilter) {\n            xmlq.insertInOrder(node, {\n                name: \"autoFilter\",\n                children: [],\n                attributes: {\n                    ref: this._autoFilter.address()\n                }\n            }, nodeOrder);\n        }\n\n        // Add the PageBreaks nodes if needed.\n        ['colBreaks', 'rowBreaks'].forEach(name => {\n            const breaks = this[`_${name}Node`];\n            if (breaks.attributes.count) {\n                xmlq.insertInOrder(node, breaks, nodeOrder);\n            }\n        });\n\n        return {\n            id: this._idNode,\n            sheet: node,\n            relationships: this._relationships\n        };\n    }\n\n    /**\n     * Update the max shared formula ID to the given value if greater than current.\n     * @param {number} sharedFormulaId - The new shared formula ID.\n     * @returns {undefined}\n     * @ignore\n     */\n    updateMaxSharedFormulaId(sharedFormulaId) {\n        if (sharedFormulaId > this._maxSharedFormulaId) {\n            this._maxSharedFormulaId = sharedFormulaId;\n        }\n    }\n\n    /**\n     * Get the print option given a valid print option attribute.\n     * @param {string} attributeName - Attribute name of the printOptions.\n     *   gridLines - Used in conjunction with gridLinesSet. If both gridLines and gridlinesSet are true, then grid lines shall print. Otherwise, they shall not (i.e., one or both have false values).\n     *   gridLinesSet - Used in conjunction with gridLines. If both gridLines and gridLinesSet are true, then grid lines shall print. Otherwise, they shall not (i.e., one or both have false values).\n     *   headings - Print row and column headings.\n     *   horizontalCentered - Center on page horizontally when printing.\n     *   verticalCentered - Center on page vertically when printing.\n     * @returns {boolean}\n     *//**\n     * Set the print option given a valid print option attribute and a value.\n     * @param {string} attributeName - Attribute name of the printOptions. See get print option for list of valid attributes.\n     * @param {undefined|boolean} attributeEnabled - If `undefined` or `false` then the attribute is removed, otherwise the print option is enabled.\n     * @returns {Sheet} The sheet.\n     */\n    printOptions() {\n        const supportedAttributeNames = [\n            'gridLines', 'gridLinesSet', 'headings', 'horizontalCentered', 'verticalCentered'];\n        const checkAttributeName = this._getCheckAttributeNameHelper('printOptions', supportedAttributeNames);\n        return new ArgHandler('Sheet.printOptions')\n            .case(['string'], attributeName => {\n                checkAttributeName(attributeName);\n                return this._printOptionsNode.attributes[attributeName] === 1;\n            })\n            .case(['string', 'nil'], attributeName => {\n                checkAttributeName(attributeName);\n                delete this._printOptionsNode.attributes[attributeName];\n                return this;\n            })\n            .case(['string', 'boolean'], (attributeName, attributeEnabled) => {\n                checkAttributeName(attributeName);\n                if (attributeEnabled) {\n                    this._printOptionsNode.attributes[attributeName] = 1;\n                    return this;\n                } else {\n                    return this.printOptions(attributeName, undefined);\n                }\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Get the print option for the gridLines attribute value.\n     * @returns {boolean}\n     *//**\n     * Set the print option for the gridLines attribute value.\n     * @param {undefined|boolean} enabled - If `undefined` or `false` then attribute is removed, otherwise gridLines is enabled.\n     * @returns {Sheet} The sheet.\n     */\n    printGridLines() {\n        return new ArgHandler('Sheet.gridLines')\n            .case(() => {\n                return this.printOptions('gridLines') && this.printOptions('gridLinesSet');\n            })\n            .case(['nil'], () => {\n                this.printOptions('gridLines', undefined);\n                this.printOptions('gridLinesSet', undefined);\n                return this;\n            })\n            .case(['boolean'], enabled => {\n                this.printOptions('gridLines', enabled);\n                this.printOptions('gridLinesSet', enabled);\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Get the page margin given a valid attribute name.\n     * If the value is not yet defined, then it will return the current preset value.\n     * @param {string} attributeName - Attribute name of the pageMargins.\n     *     left - Left Page Margin in inches.\n     *     right - Right page margin in inches.\n     *     top - Top Page Margin in inches.\n     *     buttom - Bottom Page Margin in inches.\n     *     footer - Footer Page Margin in inches.\n     *     header - Header Page Margin in inches.\n     * @returns {number} the attribute value.\n     *//**\n     * Set the page margin (or override the preset) given an attribute name and a value.\n     * @param {string} attributeName - Attribute name of the pageMargins. See get page margin for list of valid attributes.\n     * @param {undefined|number|string} attributeStringValue - If `undefined` then set back to preset value, otherwise, set the given attribute value.\n     * @returns {Sheet} The sheet.\n     */\n    pageMargins() {\n        if (this.pageMarginsPreset() === undefined) {\n            throw new Error('Sheet.pageMargins: preset is undefined.');\n        }\n        const supportedAttributeNames = [\n            'left', 'right', 'top', 'bottom', 'header', 'footer'];\n        const checkAttributeName = this._getCheckAttributeNameHelper('pageMargins', supportedAttributeNames);\n        const checkRange = this._getCheckRangeHelper('pageMargins', 0, undefined);\n        return new ArgHandler('Sheet.pageMargins')\n            .case(['string'], attributeName => {\n                checkAttributeName(attributeName);\n                const attributeValue = this._pageMarginsNode.attributes[attributeName];\n                if (attributeValue !== undefined) {\n                    return parseFloat(attributeValue);\n                } else if (this._pageMarginsPresetName) {\n                    return parseFloat(this._pageMarginsPresets[this._pageMarginsPresetName][attributeName]);\n                } else {\n                    return undefined;\n                }\n            })\n            .case(['string', 'nil'], attributeName => {\n                checkAttributeName(attributeName);\n                delete this._pageMarginsNode.attributes[attributeName];\n                return this;\n            })\n            .case(['string', 'number'], (attributeName, attributeNumberValue) => {\n                checkAttributeName(attributeName);\n                checkRange(attributeNumberValue);\n                this._pageMarginsNode.attributes[attributeName] = attributeNumberValue;\n                return this;\n            })\n            .case(['string', 'string'], (attributeName, attributeStringValue) => {\n                return this.pageMargins(attributeName, parseFloat(attributeStringValue));\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Page margins preset is a set of page margins associated with a name.\n     * The page margin preset acts as a fallback when not explicitly defined by `Sheet.pageMargins`.\n     * If a sheet already contains page margins, it attempts to auto-detect, otherwise they are defined as the template preset.\n     * If no page margins exist, then the preset is undefined and will not be included in the output of `Sheet.toXmls`.\n     * Available presets include: normal, wide, narrow, template.\n     *\n     * Get the page margins preset name. The registered name of a predefined set of attributes.\n     * @returns {string} The preset name.\n     *//**\n     * Set the page margins preset by name, clearing any existing/temporary attribute values.\n     * @param {undefined|string} presetName - The preset name. If `undefined`, page margins will not be included in the output of `Sheet.toXmls`.\n     * @returns {Sheet} The sheet.\n     *//**\n     * Set a new page margins preset by name and attributes object.\n     * @param {string} presetName - The preset name.\n     * @param {object} presetAttributes - The preset attributes.\n     * @returns {Sheet} The sheet.\n     */\n    pageMarginsPreset() {\n        return new ArgHandler('Sheet.pageMarginsPreset')\n            .case(() => {\n                return this._pageMarginsPresetName;\n            })\n            .case(['nil'], () => {\n                // Remove all preset overrides and exclude from sheet\n                this._pageMarginsPresetName = undefined;\n\n                // Remove all preset overrides\n                this._pageMarginsNode.attributes = {};\n                return this;\n            })\n            .case(['string'], presetName => {\n                const checkPresetName = this._getCheckAttributeNameHelper(\n                    'pageMarginsPreset', Object.keys(this._pageMarginsPresets));\n                checkPresetName(presetName);\n\n                // Change to new preset\n                this._pageMarginsPresetName = presetName;\n\n                // Remove all preset overrides\n                this._pageMarginsNode.attributes = {};\n                return this;\n            })\n            .case(['string', 'object'], (presetName, presetAttributes) => {\n                if (this._pageMarginsPresets.hasOwnProperty(presetName)) {\n                    throw new Error(`Sheet.pageMarginsPreset: The preset ${presetName} already exists!`);\n                }\n\n                // Validate preset attribute keys.\n                const pageMarginsAttributeNames = [\n                    'left', 'right', 'top', 'bottom', 'header', 'footer'];\n                const isValidPresetAttributeKeys = _.isEqual(\n                    _.sortBy(pageMarginsAttributeNames),\n                    _.sortBy(Object.keys(presetAttributes)));\n                if (isValidPresetAttributeKeys === false) {\n                    throw new Error(`Sheet.pageMarginsPreset: Invalid preset attributes for one or key(s)! - \"${Object.keys(presetAttributes)}\"`);\n                }\n\n                // Validate preset attribute values.\n                _.forEach((attributeValue, attributeName) => {\n                    const attributeNumberValue = parseFloat(attributeValue);\n                    if (_.isNaN(attributeNumberValue) || _.isNumber(attributeNumberValue) === false) {\n                        throw new Error(`Sheet.pageMarginsPreset: Invalid preset attribute value! - \"${attributeValue}\"`);\n                    }\n                });\n\n                // Change to new preset\n                this._pageMarginsPresetName = presetName;\n\n                // Remove all preset overrides\n                this._pageMarginsNode.attributes = {};\n\n                // Register the preset\n                this._pageMarginsPresets[presetName] = presetAttributes;\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * https://docs.microsoft.com/en-us/dotnet/api/documentformat.openxml.spreadsheet.pane?view=openxml-2.8.1\n     * @typedef {Object} PaneOptions\n     * @property {string} activePane=bottomRight Active Pane. The pane that is active.\n     * @property {string} state Split State. Indicates whether the pane has horizontal / vertical splits,\n     * and whether those splits are frozen.\n     * @property {string} topLeftCell Top Left Visible Cell. Location of the top left visible cell in the bottom\n     * right pane (when in Left-To-Right mode).\n     * @property {number} xSplit (Horizontal Split Position) Horizontal position of the split, in 1/20th of a point;\n     * 0 (zero) if none. If the pane is frozen, this value indicates the number of columns visible in the top pane.\n     * @property {number} ySplit (Vertical Split Position) Vertical position of the split, in 1/20th of a point; 0\n     * (zero) if none. If the pane is frozen, this value indicates the number of rows visible in the left pane.\n     *//**\n     * Gets sheet view pane options\n     * @return {PaneOptions} sheet view pane options\n     *//**\n     * Sets sheet view pane options\n     * @param {PaneOptions|null|undefined} paneOptions sheet view pane options\n     * @return {Sheet} The sheet\n     */\n    panes() {\n        const supportedStates = ['split', 'frozen', 'frozenSplit'];\n        const supportedActivePanes = ['bottomLeft', 'bottomRight', 'topLeft', 'topRight'];\n        const checkStateName = this._getCheckAttributeNameHelper('pane.state', supportedStates);\n        const checkActivePane = this._getCheckAttributeNameHelper('pane.activePane', supportedActivePanes);\n        const sheetViewNode = this._getOrCreateSheetViewNode();\n        let paneNode = xmlq.findChild(sheetViewNode, 'pane');\n        return new ArgHandler('Sheet.pane')\n            .case(() => {\n                if (paneNode) {\n                    const result = _.cloneDeep(paneNode.attributes);\n                    if (!result.state) result.state = 'split';\n                    return result;\n                }\n            })\n            .case(['nil'], () => {\n                xmlq.removeChild(sheetViewNode, 'pane');\n                return this;\n            })\n            .case(['object'], paneAttributes => {\n                const attributes = _.assign({ activePane: 'bottomRight' }, paneAttributes);\n                checkStateName(attributes.state);\n                checkActivePane(attributes.activePane);\n                if (paneNode) {\n                    paneNode.attributes = attributes;\n                } else {\n                    paneNode = {\n                        name: \"pane\",\n                        attributes,\n                        children: []\n                    };\n                    xmlq.appendChild(sheetViewNode, paneNode);\n                }\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Freezes Panes for this sheet.\n     * @param {number} xSplit the number of columns visible in the top pane. 0 (zero) if none.\n     * @param {number} ySplit the number of rows visible in the left pane. 0 (zero) if none.\n     * @return {Sheet} The sheet\n     *//**\n     * freezes Panes for this sheet.\n     * @param {string} topLeftCell Top Left Visible Cell. Location of the top left visible cell in the bottom\n     * right pane (when in Left-To-Right mode).\n     * @return {Sheet} The sheet\n     */\n    freezePanes() {\n        return new ArgHandler('Sheet.feezePanes')\n            .case(['integer', 'integer'], (xSplit, ySplit) => {\n                const topLeftCell = addressConverter.columnNumberToName(xSplit + 1) + (ySplit + 1);\n                let activePane = xSplit === 0 ? 'bottomLeft' : 'bottomRight';\n                activePane = ySplit === 0 ? 'topRight' : activePane;\n                return this.panes({ state: 'frozen', topLeftCell, xSplit, ySplit, activePane });\n            })\n            .case(['string'], topLeftCell => {\n                const ref = addressConverter.fromAddress(topLeftCell);\n                const xSplit = ref.columnNumber - 1, ySplit = ref.rowNumber - 1;\n                let activePane = xSplit === 0 ? 'bottomLeft' : 'bottomRight';\n                activePane = ySplit === 0 ? 'topRight' : activePane;\n                return this.panes({ state: 'frozen', topLeftCell, xSplit, ySplit, activePane });\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Splits Panes for this sheet.\n     * @param {number} xSplit (Horizontal Split Position) Horizontal position of the split,\n     * in 1/20th of a point; 0 (zero) if none.\n     * @param {number} ySplit (Vertical Split Position) VVertical position of the split,\n     * in 1/20th of a point; 0 (zero) if none.\n     * @return {Sheet} The sheet\n     */\n    splitPanes(xSplit, ySplit) {\n        return this.panes({ state: 'split', xSplit, ySplit });\n    }\n\n    /**\n     * resets to default sheet view panes.\n     * @return {Sheet} The sheet\n     */\n    resetPanes() {\n        return this.panes(null);\n    }\n\n    /* PRIVATE */\n\n    /**\n     * Get a helper function to check that the attribute name provided is supported.\n     * @param {string} functionName - Name of the parent function.\n     * @param {array} supportedAttributeNames - Array of supported attribute name strings.\n     * @returns {function} The helper function, which takes an attribute name. If the array of supported attribute names does not contain the given attribute name, then an Error is thrown.\n     * @ignore\n     */\n    _getCheckAttributeNameHelper(functionName, supportedAttributeNames) {\n        return attributeName => {\n            if (!_.includes(supportedAttributeNames, attributeName)) {\n                throw new Error(`Sheet.${functionName}: \"${attributeName}\" is not supported.`);\n            }\n        };\n    }\n\n    /**\n     * Get a helper function to check that the value is of the expected type.\n     * @param {string} functionName - Name of the parent function.\n     * @param {string} valueType - A string produced by typeof.\n     * @returns {function} The helper function, which takes a value. If the value type is not expected, a TypeError is thrown.\n     * @ignore\n     */\n    _getCheckTypeHelper(functionName, valueType) {\n        return value => {\n            if (typeof value !== valueType) {\n                throw new TypeError(`Sheet.${functionName}: invalid type - value must be of type ${valueType}.`);\n            }\n        };\n    }\n\n    /**\n     * Get a helper function to check that the value is within the expected range.\n     * @param {string} functionName - Name of the parent function.\n     * @param {undefined|number} valueMin - The minimum value of the range. This value is range-inclusive.\n     * @param {undefined|number} valueMax - The maximum value of the range. This value is range-exclusive.\n     * @returns {function} The helper function, which takes a value. If the value type is not 'number', a TypeError is thrown. If the value is not within the range, a RangeError is thrown.\n     * @ignore\n     */\n    _getCheckRangeHelper(functionName, valueMin, valueMax) {\n        const checkType = this._getCheckTypeHelper(functionName, 'number');\n        return value => {\n            checkType(value);\n            if (valueMin !== undefined) {\n                if (value < valueMin) {\n                    throw new RangeError(`Sheet.${functionName}: value too small - value must be greater than or equal to ${valueMin}.`);\n                }\n            }\n            if (valueMax !== undefined) {\n                if (valueMax <= value) {\n                    throw new RangeError(`Sheet.${functionName}: value too large - value must be less than ${valueMax}.`);\n                }\n            }\n        };\n    }\n\n    /**\n     * Get the sheet view node if it exists or create it if it doesn't.\n     * @returns {{}} The sheet view node.\n     * @private\n     */\n    _getOrCreateSheetViewNode() {\n        let sheetViewsNode = xmlq.findChild(this._node, \"sheetViews\");\n        if (!sheetViewsNode) {\n            sheetViewsNode = {\n                name: \"sheetViews\",\n                attributes: {},\n                children: [{\n                    name: \"sheetView\",\n                    attributes: {\n                        workbookViewId: 0\n                    },\n                    children: []\n                }]\n            };\n\n            xmlq.insertInOrder(this._node, sheetViewsNode, nodeOrder);\n        }\n\n        return xmlq.findChild(sheetViewsNode, \"sheetView\");\n    }\n\n    /**\n     * Initializes the sheet.\n     * @param {Workbook} workbook - The parent workbook.\n     * @param {{}} idNode - The sheet ID node (from the parent workbook).\n     * @param {{}} node - The sheet node.\n     * @param {{}} [relationshipsNode] - The optional sheet relationships node.\n     * @returns {undefined}\n     * @private\n     */\n    _init(workbook, idNode, node, relationshipsNode) {\n        if (!node) {\n            node = {\n                name: \"worksheet\",\n                attributes: {\n                    xmlns: \"http://schemas.openxmlformats.org/spreadsheetml/2006/main\",\n                    'xmlns:r': \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\",\n                    'xmlns:mc': \"http://schemas.openxmlformats.org/markup-compatibility/2006\",\n                    'mc:Ignorable': \"x14ac\",\n                    'xmlns:x14ac': \"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\"\n                },\n                children: [{\n                    name: \"sheetData\",\n                    attributes: {},\n                    children: []\n                }]\n            };\n        }\n\n        this._workbook = workbook;\n        this._idNode = idNode;\n        this._node = node;\n        this._maxSharedFormulaId = -1;\n        this._mergeCells = {};\n        this._dataValidations = {};\n        this._hyperlinks = {};\n        this._autoFilter = null;\n\n        // Create the relationships.\n        this._relationships = new Relationships(relationshipsNode);\n\n        // Delete the optional dimension node\n        xmlq.removeChild(this._node, \"dimension\");\n\n        // Create the rows.\n        this._rows = [];\n        this._sheetDataNode = xmlq.findChild(this._node, \"sheetData\");\n        this._sheetDataNode.children.forEach(rowNode => {\n            const row = new Row(this, rowNode);\n            this._rows[row.rowNumber()] = row;\n        });\n        this._sheetDataNode.children = this._rows;\n\n        // Create the columns node.\n        this._columns = [];\n        this._colsNode = xmlq.findChild(this._node, \"cols\");\n        if (this._colsNode) {\n            xmlq.removeChild(this._node, this._colsNode);\n        } else {\n            this._colsNode = { name: 'cols', attributes: {}, children: [] };\n        }\n\n        // Cache the col nodes.\n        this._colNodes = [];\n        _.forEach(this._colsNode.children, colNode => {\n            const min = colNode.attributes.min;\n            const max = colNode.attributes.max;\n            for (let i = min; i <= max; i++) {\n                this._colNodes[i] = colNode;\n            }\n        });\n\n        // Create the sheet properties node.\n        this._sheetPrNode = xmlq.findChild(this._node, \"sheetPr\");\n        if (!this._sheetPrNode) {\n            this._sheetPrNode = { name: 'sheetPr', attributes: {}, children: [] };\n            xmlq.insertInOrder(this._node, this._sheetPrNode, nodeOrder);\n        }\n\n        // Create the merge cells.\n        this._mergeCellsNode = xmlq.findChild(this._node, \"mergeCells\");\n        if (this._mergeCellsNode) {\n            xmlq.removeChild(this._node, this._mergeCellsNode);\n        } else {\n            this._mergeCellsNode = { name: 'mergeCells', attributes: {}, children: [] };\n        }\n\n        const mergeCellNodes = this._mergeCellsNode.children;\n        this._mergeCellsNode.children = [];\n        mergeCellNodes.forEach(mergeCellNode => {\n            this._mergeCells[mergeCellNode.attributes.ref] = mergeCellNode;\n        });\n\n\n        // Create the DataValidations.\n        this._dataValidationsNode = xmlq.findChild(this._node, \"dataValidations\");\n        if (this._dataValidationsNode) {\n            xmlq.removeChild(this._node, this._dataValidationsNode);\n        } else {\n            this._dataValidationsNode = { name: 'dataValidations', attributes: {}, children: [] };\n        }\n\n        const dataValidationNodes = this._dataValidationsNode.children;\n        this._dataValidationsNode.children = [];\n        dataValidationNodes.forEach(dataValidationNode => {\n            this._dataValidations[dataValidationNode.attributes.sqref] = dataValidationNode;\n        });\n\n\n        // Create the hyperlinks.\n        this._hyperlinksNode = xmlq.findChild(this._node, \"hyperlinks\");\n        if (this._hyperlinksNode) {\n            xmlq.removeChild(this._node, this._hyperlinksNode);\n        } else {\n            this._hyperlinksNode = { name: 'hyperlinks', attributes: {}, children: [] };\n        }\n\n        const hyperlinkNodes = this._hyperlinksNode.children;\n        this._hyperlinksNode.children = [];\n        hyperlinkNodes.forEach(hyperlinkNode => {\n            this._hyperlinks[hyperlinkNode.attributes.ref] = hyperlinkNode;\n        });\n\n\n        // Create the printOptions.\n        this._printOptionsNode = xmlq.findChild(this._node, \"printOptions\");\n        if (this._printOptionsNode) {\n            xmlq.removeChild(this._node, this._printOptionsNode);\n        } else {\n            this._printOptionsNode = { name: 'printOptions', attributes: {}, children: [] };\n        }\n\n\n        // Create the pageMargins.\n        this._pageMarginsPresets = {\n            normal: {\n                left: 0.7,\n                right: 0.7,\n                top: 0.75,\n                bottom: 0.75,\n                header: 0.3,\n                footer: 0.3\n            },\n            wide: {\n                left: 1,\n                right: 1,\n                top: 1,\n                bottom: 1,\n                header: 0.5,\n                footer: 0.5\n            },\n            narrow: {\n                left: 0.25,\n                right: 0.25,\n                top: 0.75,\n                bottom: 0.75,\n                header: 0.3,\n                footer: 0.3\n            }\n        };\n        this._pageMarginsNode = xmlq.findChild(this._node, \"pageMargins\");\n        if (this._pageMarginsNode) {\n            // Sheet has page margins, assume preset is template.\n            this._pageMarginsPresetName = 'template';\n\n            // Search for a preset that matches existing attributes.\n            for (const presetName in this._pageMarginsPresets) {\n                if (_.isEqual(this._pageMarginsNode.attributes, this._pageMarginsPresets[presetName])) {\n                    this._pageMarginsPresetName = presetName;\n                    break;\n                }\n            }\n\n            // If template preset, then register as template preset, and clear attributes.\n            if (this._pageMarginsPresetName === 'template') {\n                this._pageMarginsPresets.template = this._pageMarginsNode.attributes;\n                this._pageMarginsNode.attributes = {};\n            }\n\n            xmlq.removeChild(this._node, this._pageMarginsNode);\n        } else {\n            // Sheet has no page margins, the preset assignment is therefore undefined.\n            this._pageMarginsPresetName = undefined;\n            this._pageMarginsNode = { name: 'pageMargins', attributes: {}, children: [] };\n        }\n\n        // Create the pageBreaks\n        ['colBreaks', 'rowBreaks'].forEach(name => {\n            this[`_${name}Node`] = xmlq.findChild(this._node, name);\n            if (this[`_${name}Node`]) {\n                xmlq.removeChild(this._node, this[`_${name}Node`]);\n            } else {\n                this[`_${name}Node`] = {\n                    name,\n                    children: [],\n                    attributes: {\n                        count: 0,\n                        manualBreakCount: 0\n                    }\n                };\n            }\n        });\n        this._pageBreaks = {\n            colBreaks: new PageBreaks(this._colBreaksNode),\n            rowBreaks: new PageBreaks(this._rowBreaksNode)\n        };\n    }\n}\n\nmodule.exports = Sheet;\n\n/*\nxl/workbook.xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<worksheet ...>\n    ...\n\n    <printOptions headings=\"1\" gridLines=\"1\" />\n    <pageMargins left=\"0.7\" right=\"0.7\" top=\"0.75\" bottom=\"0.75\" header=\"0.3\" footer=\"0.3\" />\n    <pageSetup orientation=\"portrait\" horizontalDpi=\"0\" verticalDpi=\"0\" />\n</worksheet>\n// */\n","\n\nconst _ = require(\"lodash\");\nconst ArgHandler = require(\"./ArgHandler\");\nconst addressConverter = require(\"./addressConverter\");\nconst dateConverter = require(\"./dateConverter\");\nconst regexify = require(\"./regexify\");\nconst xmlq = require(\"./xmlq\");\nconst FormulaError = require(\"./FormulaError\");\nconst Style = require(\"./Style\");\nconst RichText = require(\"./RichText\");\n\n/**\n * A cell\n */\nclass Cell {\n    // /**\n    //  * Creates a new instance of cell.\n    //  * @param {Row} row - The parent row.\n    //  * @param {{}} node - The cell node.\n    //  */\n    constructor(row, node, styleId) {\n        this._row = row;\n        this._init(node, styleId);\n    }\n\n    /* PUBLIC */\n\n    /**\n     * Gets a value indicating whether the cell is the active cell in the sheet.\n     * @returns {boolean} True if active, false otherwise.\n     *//**\n     * Make the cell the active cell in the sheet.\n     * @param {boolean} active - Must be set to `true`. Deactivating directly is not supported. To deactivate, you should activate a different cell instead.\n     * @returns {Cell} The cell.\n     */\n    active() {\n        return new ArgHandler('Cell.active')\n            .case(() => {\n                return this.sheet().activeCell() === this;\n            })\n            .case('boolean', active => {\n                if (!active) throw new Error(\"Deactivating cell directly not supported. Activate a different cell instead.\");\n                this.sheet().activeCell(this);\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Get the address of the column.\n     * @param {{}} [opts] - Options\n     * @param {boolean} [opts.includeSheetName] - Include the sheet name in the address.\n     * @param {boolean} [opts.rowAnchored] - Anchor the row.\n     * @param {boolean} [opts.columnAnchored] - Anchor the column.\n     * @param {boolean} [opts.anchored] - Anchor both the row and the column.\n     * @returns {string} The address\n     */\n    address(opts) {\n        return addressConverter.toAddress({\n            type: 'cell',\n            rowNumber: this.rowNumber(),\n            columnNumber: this.columnNumber(),\n            sheetName: opts && opts.includeSheetName && this.sheet().name(),\n            rowAnchored: opts && (opts.rowAnchored || opts.anchored),\n            columnAnchored: opts && (opts.columnAnchored || opts.anchored)\n        });\n    }\n\n    /**\n     * Gets the parent column of the cell.\n     * @returns {Column} The parent column.\n     */\n    column() {\n        return this.sheet().column(this.columnNumber());\n    }\n\n    /**\n     * Clears the contents from the cell.\n     * @returns {Cell} The cell.\n     */\n    clear() {\n        const hostSharedFormulaId = this._formulaRef && this._sharedFormulaId;\n\n        delete this._value;\n        delete this._formulaType;\n        delete this._formula;\n        delete this._sharedFormulaId;\n        delete this._formulaRef;\n\n        // TODO in future version: Move shared formula to some other cell. This would require parsing the formula...\n        if (!_.isNil(hostSharedFormulaId)) this.sheet().clearCellsUsingSharedFormula(hostSharedFormulaId);\n\n        return this;\n    }\n\n    /**\n     * Gets the column name of the cell.\n     * @returns {string} The column name.\n     */\n    columnName() {\n        return addressConverter.columnNumberToName(this.columnNumber());\n    }\n\n    /**\n     * Gets the column number of the cell (1-based).\n     * @returns {number} The column number.\n     */\n    columnNumber() {\n        return this._columnNumber;\n    }\n\n    /**\n     * Find the given pattern in the cell and optionally replace it.\n     * @param {string|RegExp} pattern - The pattern to look for. Providing a string will result in a case-insensitive substring search. Use a RegExp for more sophisticated searches.\n     * @param {string|function} [replacement] - The text to replace or a String.replace callback function. If pattern is a string, all occurrences of the pattern in the cell will be replaced.\n     * @returns {boolean} A flag indicating if the pattern was found.\n     */\n    find(pattern, replacement) {\n        pattern = regexify(pattern);\n\n        const value = this.value();\n        if (typeof value !== 'string') return false;\n\n        if (_.isNil(replacement)) {\n            return pattern.test(value);\n        } else {\n            const replaced = value.replace(pattern, replacement);\n            if (replaced === value) return false;\n            this.value(replaced);\n            return true;\n        }\n    }\n\n    /**\n     * Gets the formula in the cell. Note that if a formula was set as part of a range, the getter will return 'SHARED'. This is a limitation that may be addressed in a future release.\n     * @returns {string} The formula in the cell.\n     *//**\n     * Sets the formula in the cell.\n     * @param {string} formula - The formula to set.\n     * @returns {Cell} The cell.\n     */\n    formula() {\n        return new ArgHandler('Cell.formula')\n            .case(() => {\n                // TODO in future: Return translated formula.\n                if (this._formulaType === \"shared\" && !this._formulaRef) return \"SHARED\";\n                return this._formula;\n            })\n            .case('nil', () => {\n                this.clear();\n                return this;\n            })\n            .case('string', formula => {\n                this.clear();\n                this._formulaType = \"normal\";\n                this._formula = formula;\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Gets the hyperlink attached to the cell.\n     * @returns {string|undefined} The hyperlink or undefined if not set.\n     *//**\n     * Set or clear the hyperlink on the cell.\n     * @param {string|Cell|undefined} hyperlink - The hyperlink to set or undefined to clear.\n     * @returns {Cell} The cell.\n     *//**\n     * Set the hyperlink options on the cell.\n     * @param {{}|Cell} opts - Options or Cell. If opts is a Cell then an internal hyperlink is added.\n     * @param {string|Cell} [opts.hyperlink] - The hyperlink to set, can be a Cell or an internal/external string.\n     * @param {string} [opts.tooltip] - Additional text to help the user understand more about the hyperlink.\n     * @param {string} [opts.email] - Email address, ignored if opts.hyperlink is set.\n     * @param {string} [opts.emailSubject] - Email subject, ignored if opts.hyperlink is set.\n     * @returns {Cell} The cell.\n     */\n    hyperlink() {\n        return new ArgHandler('Cell.hyperlink')\n            .case(() => {\n                return this.sheet().hyperlink(this.address());\n            })\n            .case('string', hyperlink => {\n                this.sheet().hyperlink(this.address(), hyperlink);\n                return this;\n            })\n            .case(['object'], opts => {\n                this.sheet().hyperlink(this.address(), opts);\n                return this;\n            })\n            .handle(arguments);\n    }\n\n\n    /**\n     * Gets the data validation object attached to the cell.\n     * @returns {object|undefined} The data validation or undefined if not set.\n     *//**\n     * Set or clear the data validation object of the cell.\n     * @param {object|undefined} dataValidation - Object or null to clear.\n     * @returns {Cell} The cell.\n     */\n    dataValidation() {\n        return new ArgHandler('Cell.dataValidation')\n            .case(() => {\n                return this.sheet().dataValidation(this.address());\n            })\n            .case('boolean', obj => {\n                return this.sheet().dataValidation(this.address(), obj);\n            })\n            .case('*', obj => {\n                this.sheet().dataValidation(this.address(), obj);\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Callback used by tap.\n     * @callback Cell~tapCallback\n     * @param {Cell} cell - The cell\n     * @returns {undefined}\n     *//**\n     * Invoke a callback on the cell and return the cell. Useful for method chaining.\n     * @param {Cell~tapCallback} callback - The callback function.\n     * @returns {Cell} The cell.\n     */\n    tap(callback) {\n        callback(this);\n        return this;\n    }\n\n    /**\n     * Callback used by thru.\n     * @callback Cell~thruCallback\n     * @param {Cell} cell - The cell\n     * @returns {*} The value to return from thru.\n     *//**\n     * Invoke a callback on the cell and return the value provided by the callback. Useful for method chaining.\n     * @param {Cell~thruCallback} callback - The callback function.\n     * @returns {*} The return value of the callback.\n     */\n    thru(callback) {\n        return callback(this);\n    }\n\n    /**\n     * Create a range from this cell and another.\n     * @param {Cell|string} cell - The other cell or cell address to range to.\n     * @returns {Range} The range.\n     */\n    rangeTo(cell) {\n        return this.sheet().range(this, cell);\n    }\n\n    /**\n     * Returns a cell with a relative position given the offsets provided.\n     * @param {number} rowOffset - The row offset (0 for the current row).\n     * @param {number} columnOffset - The column offset (0 for the current column).\n     * @returns {Cell} The relative cell.\n     */\n    relativeCell(rowOffset, columnOffset) {\n        const row = rowOffset + this.rowNumber();\n        const column = columnOffset + this.columnNumber();\n        return this.sheet().cell(row, column);\n    }\n\n    /**\n     * Gets the parent row of the cell.\n     * @returns {Row} The parent row.\n     */\n    row() {\n        return this._row;\n    }\n\n    /**\n     * Gets the row number of the cell (1-based).\n     * @returns {number} The row number.\n     */\n    rowNumber() {\n        return this.row().rowNumber();\n    }\n\n    /**\n     * Gets the parent sheet.\n     * @returns {Sheet} The parent sheet.\n     */\n    sheet() {\n        return this.row().sheet();\n    }\n\n    /**\n     * Gets an individual style.\n     * @param {string} name - The name of the style.\n     * @returns {*} The style.\n     *//**\n     * Gets multiple styles.\n     * @param {Array.<string>} names - The names of the style.\n     * @returns {object.<string, *>} Object whose keys are the style names and values are the styles.\n     *//**\n     * Sets an individual style.\n     * @param {string} name - The name of the style.\n     * @param {*} value - The value to set.\n     * @returns {Cell} The cell.\n     *//**\n     * Sets the styles in the range starting with the cell.\n     * @param {string} name - The name of the style.\n     * @param {Array.<Array.<*>>} - 2D array of values to set.\n     * @returns {Range} The range that was set.\n     *//**\n     * Sets multiple styles.\n     * @param {object.<string, *>} styles - Object whose keys are the style names and values are the styles to set.\n     * @returns {Cell} The cell.\n     *//**\n     * Sets to a specific style\n     * @param {Style} style - Style object given from stylesheet.createStyle\n     * @returns {Cell} The cell.\n     */\n    style() {\n        if (!this._style && !(arguments[0] instanceof Style)) {\n            this._style = this.workbook().styleSheet().createStyle(this._styleId);\n        }\n\n        return new ArgHandler(\"Cell.style\")\n            .case('string', name => {\n                // Get single value\n                return this._style.style(name);\n            })\n            .case('array', names => {\n                // Get list of values\n                const values = {};\n                names.forEach(name => {\n                    values[name] = this.style(name);\n                });\n\n                return values;\n            })\n            .case([\"string\", \"array\"], (name, values) => {\n                const numRows = values.length;\n                const numCols = values[0].length;\n                const range = this.rangeTo(this.relativeCell(numRows - 1, numCols - 1));\n                return range.style(name, values);\n            })\n            .case(['string', '*'], (name, value) => {\n                // Set a single value for all cells to a single value\n                this._style.style(name, value);\n                return this;\n            })\n            .case('object', nameValues => {\n                // Object of key value pairs to set\n                for (const name in nameValues) {\n                    if (!nameValues.hasOwnProperty(name)) continue;\n                    const value = nameValues[name];\n                    this.style(name, value);\n                }\n\n                return this;\n            })\n            .case('Style', style => {\n                this._style = style;\n                this._styleId = style.id();\n\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Gets the value of the cell.\n     * @returns {string|boolean|number|Date|RichText|undefined} The value of the cell.\n     *//**\n     * Sets the value of the cell.\n     * @param {string|boolean|number|null|undefined|RichText} value - The value to set.\n     * @returns {Cell} The cell.\n     *//**\n     * Sets the values in the range starting with the cell.\n     * @param {Array.<Array.<string|boolean|number|null|undefined>>} - 2D array of values to set.\n     * @returns {Range} The range that was set.\n     */\n    value() {\n        return new ArgHandler('Cell.value')\n            .case(() => {\n                if (this._value instanceof RichText) {\n                    return this._value.getInstanceWithCellRef(this);\n                }\n                return this._value;\n            })\n            .case(\"array\", values => {\n                const numRows = values.length;\n                const numCols = values[0].length;\n                const range = this.rangeTo(this.relativeCell(numRows - 1, numCols - 1));\n                return range.value(values);\n            })\n            .case('*', value => {\n                this.clear();\n                if (value instanceof RichText) {\n                    this._value = value.copy(this);\n                } else {\n                    this._value = value;\n                }\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Gets the parent workbook.\n     * @returns {Workbook} The parent workbook.\n     */\n    workbook() {\n        return this.row().workbook();\n    }\n\n    /**\n     * Append horizontal page break after the cell.\n     * @returns {Cell} the cell.\n     */\n    addHorizontalPageBreak() {\n        this.row().addPageBreak();\n        return this;\n    }\n\n    /* INTERNAL */\n\n    /**\n     * Gets the formula if a shared formula ref cell.\n     * @returns {string|undefined} The formula.\n     * @ignore\n     */\n    getSharedRefFormula() {\n        return this._formulaType === \"shared\" ? this._formulaRef && this._formula : undefined;\n    }\n\n    /**\n     * Check if this cell uses a given shared a formula ID.\n     * @param {number} id - The shared formula ID.\n     * @returns {boolean} A flag indicating if shared.\n     * @ignore\n     */\n    sharesFormula(id) {\n        return this._formulaType === \"shared\" && this._sharedFormulaId === id;\n    }\n\n    /**\n     * Set a shared formula on the cell.\n     * @param {number} id - The shared formula index.\n     * @param {string} [formula] - The formula (if the reference cell).\n     * @param {string} [sharedRef] - The address of the shared range (if the reference cell).\n     * @returns {undefined}\n     * @ignore\n     */\n    setSharedFormula(id, formula, sharedRef) {\n        this.clear();\n\n        this._formulaType = \"shared\";\n        this._sharedFormulaId = id;\n        this._formula = formula;\n        this._formulaRef = sharedRef;\n    }\n\n    /**\n     * Convert the cell to an XML object.\n     * @returns {{}} The XML form.\n     * @ignore\n     */\n    toXml() {\n        // Create a node.\n        const node = {\n            name: 'c',\n            attributes: this._remainingAttributes || {}, // Start with any remaining attributes we don't current handle.\n            children: []\n        };\n\n        // Set the address.\n        node.attributes.r = this.address();\n\n        if (!_.isNil(this._formulaType)) {\n            // Add the formula.\n            const fNode = {\n                name: 'f',\n                attributes: this._remainingFormulaAttributes || {}\n            };\n\n            if (this._formulaType !== \"normal\") fNode.attributes.t = this._formulaType;\n            if (!_.isNil(this._formulaRef)) fNode.attributes.ref = this._formulaRef;\n            if (!_.isNil(this._sharedFormulaId)) fNode.attributes.si = this._sharedFormulaId;\n            if (!_.isNil(this._formula)) fNode.children = [this._formula];\n\n            node.children.push(fNode);\n        } else if (!_.isNil(this._value)) {\n            // Add the value. Don't emit value if a formula is set as Excel will show this stale value.\n            let type, text;\n            if (typeof this._value === \"string\") {\n                type = \"s\";\n                text = this.workbook().sharedStrings().getIndexForString(this._value);\n            } else if (typeof this._value === \"boolean\") {\n                type = \"b\";\n                text = this._value ? 1 : 0;\n            } else if (typeof this._value === \"number\") {\n                text = this._value;\n            } else if (this._value instanceof Date) {\n                text = dateConverter.dateToNumber(this._value);\n            } else if (this._value instanceof RichText || typeof this._value === \"object\" && this._value.constructor.name === \"RichText\") { // Hack to make Jasmine test work\n                type = \"s\";\n                text = this.workbook().sharedStrings().getIndexForString(this._value.toXml());\n            }\n\n            if (type) node.attributes.t = type;\n            const vNode = { name: 'v', children: [text] };\n            node.children.push(vNode);\n        }\n\n        // If the style is set, set the style ID.\n        if (!_.isNil(this._style)) {\n            node.attributes.s = this._style.id();\n        } else if (!_.isNil(this._styleId)) {\n            node.attributes.s = this._styleId;\n        }\n\n        // Add any remaining children that we don't currently handle.\n        if (this._remainingChildren) {\n            node.children = node.children.concat(this._remainingChildren);\n        }\n\n        return node;\n    }\n\n    /* PRIVATE */\n\n    /**\n     * Initialize the cell node.\n     * @param {{}|number} nodeOrColumnNumber - The existing node or the column number of a new cell.\n     * @param {number} [styleId] - The style ID for the new cell.\n     * @returns {undefined}\n     * @private\n     */\n    _init(nodeOrColumnNumber, styleId) {\n        if (_.isObject(nodeOrColumnNumber)) {\n            // Parse the existing node.\n            this._parseNode(nodeOrColumnNumber);\n        } else {\n            // This is a new cell.\n            this._columnNumber = nodeOrColumnNumber;\n            if (!_.isNil(styleId)) this._styleId = styleId;\n        }\n    }\n\n    /**\n     * Parse the existing node.\n     * @param {{}} node - The existing node.\n     * @returns {undefined}\n     * @private\n     */\n    _parseNode(node) {\n        // Parse the column numbr out of the address.\n        const ref = addressConverter.fromAddress(node.attributes.r);\n        this._columnNumber = ref.columnNumber;\n\n        // Store the style ID if present.\n        if (!_.isNil(node.attributes.s)) this._styleId = node.attributes.s;\n\n        // Parse the formula if present..\n        const fNode = xmlq.findChild(node, 'f');\n        if (fNode) {\n            this._formulaType = fNode.attributes.t || \"normal\";\n            this._formulaRef = fNode.attributes.ref;\n            this._formula = fNode.children[0];\n\n            this._sharedFormulaId = fNode.attributes.si;\n            if (!_.isNil(this._sharedFormulaId)) {\n                // Update the sheet's max shared formula ID so we can set future IDs an index beyond this.\n                this.sheet().updateMaxSharedFormulaId(this._sharedFormulaId);\n            }\n\n            // Delete the known attributes.\n            delete fNode.attributes.t;\n            delete fNode.attributes.ref;\n            delete fNode.attributes.si;\n\n            // If any unknown attributes are still present, store them for later output.\n            if (!_.isEmpty(fNode.attributes)) this._remainingFormulaAttributes = fNode.attributes;\n        }\n\n        // Parse the value.\n        const type = node.attributes.t;\n        if (type === \"s\") {\n            // String value.\n            const vNode = xmlq.findChild(node, 'v');\n            if (vNode) {\n                const sharedIndex = vNode.children[0];\n                this._value = this.workbook().sharedStrings().getStringByIndex(sharedIndex);\n\n                // rich text\n                if (_.isArray(this._value)) {\n                    this._value = new RichText(this._value);\n                }\n            } else {\n                this._value = '';\n            }\n        } else if (type === \"str\") {\n            // Simple string value.\n            const vNode = xmlq.findChild(node, 'v');\n            this._value = vNode && vNode.children[0];\n        } else if (type === \"inlineStr\") {\n            // Inline string value: can be simple text or rich text.\n            const isNode = xmlq.findChild(node, 'is');\n            if (isNode.children[0].name === \"t\") {\n                const tNode = isNode.children[0];\n                this._value = tNode.children[0];\n            } else {\n                this._value = isNode.children;\n            }\n        } else if (type === \"b\") {\n            // Boolean value.\n            this._value = xmlq.findChild(node, 'v').children[0] === 1;\n        } else if (type === \"e\") {\n            // Error value.\n            const error = xmlq.findChild(node, 'v').children[0];\n            this._value = FormulaError.getError(error);\n        } else {\n            // Number value.\n            const vNode = xmlq.findChild(node, 'v');\n            this._value = vNode && Number(vNode.children[0]);\n        }\n\n        // Delete known attributes.\n        delete node.attributes.r;\n        delete node.attributes.s;\n        delete node.attributes.t;\n\n        // If any unknown attributes are still present, store them for later output.\n        if (!_.isEmpty(node.attributes)) this._remainingAttributes = node.attributes;\n\n        // Delete known children.\n        xmlq.removeChild(node, 'f');\n        xmlq.removeChild(node, 'v');\n        xmlq.removeChild(node, 'is');\n\n        // If any unknown children are still present, store them for later output.\n        if (!_.isEmpty(node.children)) this._remainingChildren = node.children;\n    }\n}\n\nmodule.exports = Cell;\n\n/*\n<c r=\"A6\" s=\"1\" t=\"s\">\n    <v>2</v>\n</c>\n*/\n\n","\n\nconst _ = require(\"lodash\");\n\n/**\n * Method argument handler. Used for overloading methods.\n * @private\n */\nclass ArgHandler {\n    /**\n     * Creates a new instance of ArgHandler.\n     * @param {string} name - The method name to use in error messages.\n     */\n    constructor(name) {\n        this._name = name;\n        this._cases = [];\n    }\n\n    /**\n     * Add a case.\n     * @param {string|Array.<string>} [types] - The type or types of arguments to match this case.\n     * @param {Function} handler - The function to call when this case is matched.\n     * @returns {ArgHandler} The handler for chaining.\n     */\n    case(types, handler) {\n        if (arguments.length === 1) {\n            handler = types;\n            types = [];\n        }\n\n        if (!Array.isArray(types)) types = [types];\n        this._cases.push({ types, handler });\n        return this;\n    }\n\n    /**\n     * Handle the method arguments by checking each case in order until one matches and then call its handler.\n     * @param {Arguments|Array.<*>} args - The method arguments.\n     * @returns {*} The result of the handler.\n     * @throws {Error} Throws if no case matches.\n     */\n    handle(args) {\n        for (let i = 0; i < this._cases.length; i++) {\n            const c = this._cases[i];\n            if (this._argsMatchTypes(args, c.types)) {\n                return c.handler.apply(null, args);\n            }\n        }\n\n        throw new Error(`${this._name}: Invalid arguments.`);\n    }\n\n    /**\n     * Check if the arguments match the given types.\n     * @param {Arguments} args - The arguments.\n     * @param {Array.<string>} types - The types.\n     * @returns {boolean} True if matches, false otherwise.\n     * @throws {Error} Throws if unknown type.\n     * @private\n     */\n    _argsMatchTypes(args, types) {\n        if (args.length !== types.length) return false;\n\n        return _.every(args, (arg, i) => {\n            const type = types[i];\n\n            if (type === '*') return true;\n            if (type === 'nil') return _.isNil(arg);\n            if (type === 'string') return typeof arg === \"string\";\n            if (type === 'boolean') return typeof arg === \"boolean\";\n            if (type === 'number') return typeof arg === \"number\";\n            if (type === 'integer') return typeof arg === \"number\" && _.isInteger(arg);\n            if (type === 'function') return typeof arg === \"function\";\n            if (type === 'array') return Array.isArray(arg);\n            if (type === 'date') return arg && arg.constructor === Date;\n            if (type === 'object') return arg && arg.constructor === Object;\n            if (arg && arg.constructor && arg.constructor.name === type) return true;\n\n            throw new Error(`Unknown type: ${type}`);\n        });\n    }\n}\n\nmodule.exports = ArgHandler;\n","\n\n// V8 doesn't support optimization for compound assignment of let variables.\n// These methods get called a lot so disable the rule to allow V8 opmtimization.\n/* eslint-disable operator-assignment */\n\nconst _ = require(\"lodash\");\nconst ADDRESS_REGEX = /^(?:'?(.+?)'?!)?(?:(\\$)?([A-Z]+)(\\$)?(\\d+)(?::(\\$)?([A-Z]+)(\\$)?(\\d+))?|(\\$)?([A-Z]+):(\\$)?([A-Z]+)|(\\$)?(\\d+):(\\$)?(\\d+))$/;\n\n/**\n * Address converter.\n * @private\n */\nmodule.exports = {\n    /**\n     * Convert a column name to a number.\n     * @param {string} name - The column name.\n     * @returns {number} The number.\n     */\n    columnNameToNumber(name) {\n        if (!name || typeof name !== \"string\") return;\n\n        name = name.toUpperCase();\n        let sum = 0;\n        for (let i = 0; i < name.length; i++) {\n            sum = sum * 26;\n            sum = sum + (name[i].charCodeAt(0) - 'A'.charCodeAt(0) + 1);\n        }\n\n        return sum;\n    },\n\n    /**\n     * Convert a column number to a name.\n     * @param {number} number - The column number.\n     * @returns {string} The name.\n     */\n    columnNumberToName(number) {\n        let dividend = number;\n        let name = '';\n        let modulo = 0;\n\n        while (dividend > 0) {\n            modulo = (dividend - 1) % 26;\n            name = String.fromCharCode('A'.charCodeAt(0) + modulo) + name;\n            dividend = Math.floor((dividend - modulo) / 26);\n        }\n\n        return name;\n    },\n\n    /**\n     * Convert an address to a reference object.\n     * @param {string} address - The address.\n     * @returns {{}} The reference object.\n     */\n    fromAddress(address) {\n        const match = address.match(ADDRESS_REGEX);\n        if (!match) return;\n        const ref = {};\n\n        if (match[1]) ref.sheetName = match[1].replace(/''/g, \"'\");\n        if (match[3] && match[7]) {\n            ref.type = 'range';\n            ref.startColumnAnchored = !!match[2];\n            ref.startColumnName = match[3];\n            ref.startColumnNumber = this.columnNameToNumber(ref.startColumnName);\n            ref.startRowAnchored = !!match[4];\n            ref.startRowNumber = parseInt(match[5]);\n            ref.endColumnAnchored = !!match[6];\n            ref.endColumnName = match[7];\n            ref.endColumnNumber = this.columnNameToNumber(ref.endColumnName);\n            ref.endRowAnchored = !!match[8];\n            ref.endRowNumber = parseInt(match[9]);\n        } else if (match[3]) {\n            ref.type = 'cell';\n            ref.columnAnchored = !!match[2];\n            ref.columnName = match[3];\n            ref.columnNumber = this.columnNameToNumber(ref.columnName);\n            ref.rowAnchored = !!match[4];\n            ref.rowNumber = parseInt(match[5]);\n        } else if (match[11] && match[11] !== match[13]) {\n            ref.type = 'columnRange';\n            ref.startColumnAnchored = !!match[10];\n            ref.startColumnName = match[11];\n            ref.startColumnNumber = this.columnNameToNumber(ref.startColumnName);\n            ref.endColumnAnchored = !!match[12];\n            ref.endColumnName = match[13];\n            ref.endColumnNumber = this.columnNameToNumber(ref.endColumnName);\n        } else if (match[11]) {\n            ref.type = 'column';\n            ref.columnAnchored = !!match[10];\n            ref.columnName = match[11];\n            ref.columnNumber = this.columnNameToNumber(ref.columnName);\n        } else if (match[15] && match[15] !== match[17]) {\n            ref.type = 'rowRange';\n            ref.startRowAnchored = !!match[14];\n            ref.startRowNumber = parseInt(match[15]);\n            ref.endRowAnchored = !!match[16];\n            ref.endRowNumber = parseInt(match[17]);\n        } else if (match[15]) {\n            ref.type = 'row';\n            ref.rowAnchored = !!match[14];\n            ref.rowNumber = parseInt(match[15]);\n        }\n\n        return ref;\n    },\n\n    /**\n     * Convert a reference object to an address.\n     * @param {{}} ref - The reference object.\n     * @returns {string} The address.\n     */\n    toAddress(ref) {\n        let a, b;\n        const sheetName = ref.sheetName;\n\n        if (ref.type === 'cell') {\n            a = {\n                columnName: ref.columnName,\n                columnNumber: ref.columnNumber,\n                columnAnchored: ref.columnAnchored,\n                rowNumber: ref.rowNumber,\n                rowAnchored: ref.rowAnchored\n            };\n        } else if (ref.type === 'range') {\n            a = {\n                columnName: ref.startColumnName,\n                columnNumber: ref.startColumnNumber,\n                columnAnchored: ref.startColumnAnchored,\n                rowNumber: ref.startRowNumber,\n                rowAnchored: ref.startRowAnchored\n            };\n            b = {\n                columnName: ref.endColumnName,\n                columnNumber: ref.endColumnNumber,\n                columnAnchored: ref.endColumnAnchored,\n                rowNumber: ref.endRowNumber,\n                rowAnchored: ref.endRowAnchored\n            };\n        } else if (ref.type === 'column') {\n            a = b = {\n                columnName: ref.columnName,\n                columnNumber: ref.columnNumber,\n                columnAnchored: ref.columnAnchored\n            };\n        } else if (ref.type === 'row') {\n            a = b = {\n                rowNumber: ref.rowNumber,\n                rowAnchored: ref.rowAnchored\n            };\n        } else if (ref.type === 'columnRange') {\n            a = {\n                columnName: ref.startColumnName,\n                columnNumber: ref.startColumnNumber,\n                columnAnchored: ref.startColumnAnchored\n            };\n            b = {\n                columnName: ref.endColumnName,\n                columnNumber: ref.endColumnNumber,\n                columnAnchored: ref.endColumnAnchored\n            };\n        } else if (ref.type === 'rowRange') {\n            a = {\n                rowNumber: ref.startRowNumber,\n                rowAnchored: ref.startRowAnchored\n            };\n            b = {\n                rowNumber: ref.endRowNumber,\n                rowAnchored: ref.endRowAnchored\n            };\n        }\n\n        let address = '';\n        if (sheetName) address = `${address}'${sheetName.replace(/'/g, \"''\")}'!`;\n        if (a.columnAnchored) address = `${address}$`;\n        if (a.columnName) address = address + a.columnName;\n        else if (a.columnNumber) address = address + this.columnNumberToName(a.columnNumber);\n        if (a.rowAnchored) address = `${address}$`;\n        if (a.rowNumber) address = address + a.rowNumber;\n\n        if (b) {\n            address = `${address}:`;\n            if (b.columnAnchored) address = `${address}$`;\n            if (b.columnName) address = address + b.columnName;\n            else if (b.columnNumber) address = address + this.columnNumberToName(b.columnNumber);\n            if (b.rowAnchored) address = `${address}$`;\n            if (b.rowNumber) address = address + b.rowNumber;\n        }\n\n        return address;\n    }\n};\n","\n\n// The base date = 0.\nconst dateBase = new Date(1900, 0, 0);\n\n// The date conversion has a bug that assumes 1900 was a leap year. So we need to add one for dates after this.\nconst incorrectLeapDate = new Date(1900, 1, 28);\n\n// Number of milliseconds in a day.\nconst millisecondsInDay = 1000 * 60 * 60 * 24;\n\n/**\n * Date converter.\n * @private\n */\nmodule.exports = {\n    /**\n     * Convert a date to a number for Excel.\n     * @param {Date} date - The date.\n     * @returns {number} The number.\n     */\n    dateToNumber(date) {\n        // Clone the date and strip the time off.\n        const dateOnly = new Date(date.getTime());\n        dateOnly.setHours(0, 0, 0, 0);\n\n        // Set the number to be the number of days between the date and the base date.\n        // We need to round as daylight savings will cause fractional days, which we don't want.\n        let number = Math.round((dateOnly - dateBase) / millisecondsInDay);\n        \n        // Add the true fractional days from just the milliseconds left in the current day.\n        number += (date - dateOnly) / millisecondsInDay;\n\n        // Adjust for the \"bug\" in Excel that treats 1900 as a leap year.\n        if (date > incorrectLeapDate) number += 1;\n\n        return number;\n    },\n\n    /**\n     * Convert a number to a date.\n     * @param {number} number - The number.\n     * @returns {Date} The date.\n     */\n    numberToDate(number) {\n        // If the number is greater than the incorrect leap date, we should subtract one.\n        if (number > this.dateToNumber(incorrectLeapDate)) number--;\n        \n        // Break the number of full days and the remaining milliseconds in the current day.\n        const fullDays = Math.floor(number);\n        const partialMilliseconds = Math.round((number - fullDays) * millisecondsInDay);\n\n        // Create a new date from the base date plus the time in the current day.\n        const date = new Date(dateBase.getTime() + partialMilliseconds);\n\n        // Now add the number of full days. JS will properly handle the month/year changes.\n        date.setDate(date.getDate() + fullDays);\n\n        return date;\n    }\n};\n","\n\nconst _ = require(\"lodash\");\n\n/**\n * A formula error (e.g. #DIV/0!).\n */\nclass FormulaError {\n    // /**\n    //  * Creates a new instance of Formula Error.\n    //  * @param {string} error - The error code.\n    //  */\n    constructor(error) {\n        this._error = error;\n    }\n\n    /**\n     * Get the error code.\n     * @returns {string} The error code.\n     */\n    error() {\n        return this._error;\n    }\n}\n\n/**\n * \\#DIV/0! error.\n * @type {FormulaError}\n */\nFormulaError.DIV0 = new FormulaError(\"#DIV/0!\");\n\n/**\n * \\#N/A error.\n * @type {FormulaError}\n */\nFormulaError.NA = new FormulaError(\"#N/A\");\n\n/**\n * \\#NAME? error.\n * @type {FormulaError}\n */\nFormulaError.NAME = new FormulaError(\"#NAME?\");\n\n/**\n * \\#NULL! error.\n * @type {FormulaError}\n */\nFormulaError.NULL = new FormulaError(\"#NULL!\");\n\n/**\n * \\#NUM! error.\n * @type {FormulaError}\n */\nFormulaError.NUM = new FormulaError(\"#NUM!\");\n\n/**\n * \\#REF! error.\n * @type {FormulaError}\n */\nFormulaError.REF = new FormulaError(\"#REF!\");\n\n/**\n * \\#VALUE! error.\n * @type {FormulaError}\n */\nFormulaError.VALUE = new FormulaError(\"#VALUE!\");\n\n/**\n * Get the matching FormulaError object.\n * @param {string} error - The error code.\n * @returns {FormulaError} The matching FormulaError or a new object if no match.\n * @ignore\n */\nFormulaError.getError = error => {\n    return _.find(FormulaError, value => {\n        return value instanceof FormulaError && value.error() === error;\n    }) || new FormulaError(error);\n};\n\nmodule.exports = FormulaError;\n","\n\n/* eslint camelcase:off */\n\nconst ArgHandler = require(\"./ArgHandler\");\nconst _ = require(\"lodash\");\nconst xmlq = require(\"./xmlq\");\nconst colorIndexes = require(\"./colorIndexes\");\n\n/**\n * A style.\n * @ignore\n */\nclass Style {\n    /**\n     * Creates a new instance of _Style.\n     * @constructor\n     * @param {StyleSheet} styleSheet - The styleSheet.\n     * @param {number} id - The style ID.\n     * @param {{}} xfNode - The xf node.\n     * @param {{}} fontNode - The font node.\n     * @param {{}} fillNode - The fill node.\n     * @param {{}} borderNode - The border node.\n     */\n    constructor(styleSheet, id, xfNode, fontNode, fillNode, borderNode) {\n        this._styleSheet = styleSheet;\n        this._id = id;\n        this._xfNode = xfNode;\n        this._fontNode = fontNode;\n        this._fillNode = fillNode;\n        this._borderNode = borderNode;\n    }\n\n    /**\n     * Gets the style ID.\n     * @returns {number} The ID.\n     */\n    id() {\n        return this._id;\n    }\n\n    /**\n     * Gets or sets a style.\n     * @param {string} name - The style name.\n     * @param {*} [value] - The value to set.\n     * @returns {*|Style} The value if getting or the style if setting.\n     */\n    style() {\n        return new ArgHandler(\"_Style.style\")\n            .case('string', name => {\n                const getterName = `_get_${name}`;\n                if (!this[getterName]) throw new Error(`_Style.style: '${name}' is not a valid style`);\n                return this[getterName]();\n            })\n            .case(['string', '*'], (name, value) => {\n                const setterName = `_set_${name}`;\n                if (!this[setterName]) throw new Error(`_Style.style: '${name}' is not a valid style`);\n                this[setterName](value);\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    _getColor(node, name) {\n        const child = xmlq.findChild(node, name);\n        if (!child || !child.attributes) return;\n\n        const color = {};\n        if (child.attributes.hasOwnProperty('rgb')) color.rgb = child.attributes.rgb;\n        else if (child.attributes.hasOwnProperty('theme')) color.theme = child.attributes.theme;\n        else if (child.attributes.hasOwnProperty('indexed')) color.rgb = colorIndexes[child.attributes.indexed];\n\n        if (child.attributes.hasOwnProperty('tint')) color.tint = child.attributes.tint;\n\n        if (_.isEmpty(color)) return;\n\n        return color;\n    }\n\n    _setColor(node, name, color) {\n        if (typeof color === \"string\") color = { rgb: color };\n        else if (typeof color === \"number\") color = { theme: color };\n\n        xmlq.setChildAttributes(node, name, {\n            rgb: color && color.rgb && color.rgb.toUpperCase(),\n            indexed: null,\n            theme: color && color.theme,\n            tint: color && color.tint\n        });\n\n        xmlq.removeChildIfEmpty(node, 'color');\n    }\n\n    _get_bold() {\n        return xmlq.hasChild(this._fontNode, 'b');\n    }\n\n    _set_bold(bold) {\n        if (bold) xmlq.appendChildIfNotFound(this._fontNode, \"b\");\n        else xmlq.removeChild(this._fontNode, 'b');\n    }\n\n    _get_italic() {\n        return xmlq.hasChild(this._fontNode, 'i');\n    }\n\n    _set_italic(italic) {\n        if (italic) xmlq.appendChildIfNotFound(this._fontNode, \"i\");\n        else xmlq.removeChild(this._fontNode, 'i');\n    }\n\n    _get_underline() {\n        const uNode = xmlq.findChild(this._fontNode, 'u');\n        return uNode ? uNode.attributes.val || true : false;\n    }\n\n    _set_underline(underline) {\n        if (underline) {\n            const uNode = xmlq.appendChildIfNotFound(this._fontNode, \"u\");\n            const val = typeof underline === 'string' ? underline : null;\n            xmlq.setAttributes(uNode, { val });\n        } else {\n            xmlq.removeChild(this._fontNode, 'u');\n        }\n    }\n\n    _get_strikethrough() {\n        return xmlq.hasChild(this._fontNode, 'strike');\n    }\n\n    _set_strikethrough(strikethrough) {\n        if (strikethrough) xmlq.appendChildIfNotFound(this._fontNode, \"strike\");\n        else xmlq.removeChild(this._fontNode, 'strike');\n    }\n\n    _getFontVerticalAlignment() {\n        return xmlq.getChildAttribute(this._fontNode, 'vertAlign', \"val\");\n    }\n\n    _setFontVerticalAlignment(alignment) {\n        xmlq.setChildAttributes(this._fontNode, 'vertAlign', { val: alignment });\n        xmlq.removeChildIfEmpty(this._fontNode, 'vertAlign');\n    }\n\n    _get_subscript() {\n        return this._getFontVerticalAlignment() === \"subscript\";\n    }\n\n    _set_subscript(subscript) {\n        this._setFontVerticalAlignment(subscript ? \"subscript\" : null);\n    }\n\n    _get_superscript() {\n        return this._getFontVerticalAlignment() === \"superscript\";\n    }\n\n    _set_superscript(superscript) {\n        this._setFontVerticalAlignment(superscript ? \"superscript\" : null);\n    }\n\n    _get_fontSize() {\n        return xmlq.getChildAttribute(this._fontNode, 'sz', \"val\");\n    }\n\n    _set_fontSize(size) {\n        xmlq.setChildAttributes(this._fontNode, 'sz', { val: size });\n        xmlq.removeChildIfEmpty(this._fontNode, 'sz');\n    }\n\n    _get_fontFamily() {\n        return xmlq.getChildAttribute(this._fontNode, 'name', \"val\");\n    }\n\n    _set_fontFamily(family) {\n        xmlq.setChildAttributes(this._fontNode, 'name', { val: family });\n        xmlq.removeChildIfEmpty(this._fontNode, 'name');\n    }\n\n    _get_fontGenericFamily() {\n        return xmlq.getChildAttribute(this._fontNode, 'family', \"val\");\n    }\n\n    _set_fontGenericFamily(genericFamily) {\n        xmlq.setChildAttributes(this._fontNode, 'family', { val: genericFamily });\n        xmlq.removeChildIfEmpty(this._fontNode, 'family');\n    }\n\n    _get_fontColor() {\n        return this._getColor(this._fontNode, \"color\");\n    }\n\n    _set_fontColor(color) {\n        this._setColor(this._fontNode, \"color\", color);\n    }\n\n    _get_fontScheme() {\n        // can be 'minor', 'major', 'none'\n        return xmlq.getChildAttribute(this._fontNode, 'scheme', \"val\");\n    }\n\n    _set_fontScheme(scheme) {\n        xmlq.setChildAttributes(this._fontNode, 'scheme', { val: scheme });\n        xmlq.removeChildIfEmpty(this._fontNode, 'scheme');\n    }\n\n    _get_horizontalAlignment() {\n        return xmlq.getChildAttribute(this._xfNode, 'alignment', \"horizontal\");\n    }\n\n    _set_horizontalAlignment(alignment) {\n        xmlq.setChildAttributes(this._xfNode, 'alignment', { horizontal: alignment });\n        xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n\n    _get_justifyLastLine() {\n        return xmlq.getChildAttribute(this._xfNode, 'alignment', \"justifyLastLine\") === 1;\n    }\n\n    _set_justifyLastLine(justifyLastLine) {\n        xmlq.setChildAttributes(this._xfNode, 'alignment', { justifyLastLine: justifyLastLine ? 1 : null });\n        xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n\n    _get_indent() {\n        return xmlq.getChildAttribute(this._xfNode, 'alignment', \"indent\");\n    }\n\n    _set_indent(indent) {\n        xmlq.setChildAttributes(this._xfNode, 'alignment', { indent });\n        xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n\n    _get_verticalAlignment() {\n        return xmlq.getChildAttribute(this._xfNode, 'alignment', \"vertical\");\n    }\n\n    _set_verticalAlignment(alignment) {\n        xmlq.setChildAttributes(this._xfNode, 'alignment', { vertical: alignment });\n        xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n\n    _get_wrapText() {\n        return xmlq.getChildAttribute(this._xfNode, 'alignment', \"wrapText\") === 1;\n    }\n\n    _set_wrapText(wrapText) {\n        xmlq.setChildAttributes(this._xfNode, 'alignment', { wrapText: wrapText ? 1 : null });\n        xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n\n    _get_shrinkToFit() {\n        return xmlq.getChildAttribute(this._xfNode, 'alignment', \"shrinkToFit\") === 1;\n    }\n\n    _set_shrinkToFit(shrinkToFit) {\n        xmlq.setChildAttributes(this._xfNode, 'alignment', { shrinkToFit: shrinkToFit ? 1 : null });\n        xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n\n    _get_textDirection() {\n        const readingOrder = xmlq.getChildAttribute(this._xfNode, 'alignment', \"readingOrder\");\n        if (readingOrder === 1) return \"left-to-right\";\n        if (readingOrder === 2) return \"right-to-left\";\n        return readingOrder;\n    }\n\n    _set_textDirection(textDirection) {\n        let readingOrder;\n        if (textDirection === \"left-to-right\") readingOrder = 1;\n        else if (textDirection === \"right-to-left\") readingOrder = 2;\n        xmlq.setChildAttributes(this._xfNode, 'alignment', { readingOrder });\n        xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n\n    _getTextRotation() {\n        return xmlq.getChildAttribute(this._xfNode, 'alignment', \"textRotation\");\n    }\n\n    _setTextRotation(textRotation) {\n        xmlq.setChildAttributes(this._xfNode, 'alignment', { textRotation });\n        xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n\n    _get_textRotation() {\n        let textRotation = this._getTextRotation();\n\n        // Negative angles in Excel correspond to values > 90 in OOXML.\n        if (textRotation > 90) textRotation = 90 - textRotation;\n        return textRotation;\n    }\n\n    _set_textRotation(textRotation) {\n        // Negative angles in Excel correspond to values > 90 in OOXML.\n        if (textRotation < 0) textRotation = 90 - textRotation;\n        this._setTextRotation(textRotation);\n    }\n\n    _get_angleTextCounterclockwise() {\n        return this._getTextRotation() === 45;\n    }\n\n    _set_angleTextCounterclockwise(value) {\n        this._setTextRotation(value ? 45 : null);\n    }\n\n    _get_angleTextClockwise() {\n        return this._getTextRotation() === 135;\n    }\n\n    _set_angleTextClockwise(value) {\n        this._setTextRotation(value ? 135 : null);\n    }\n\n    _get_rotateTextUp() {\n        return this._getTextRotation() === 90;\n    }\n\n    _set_rotateTextUp(value) {\n        this._setTextRotation(value ? 90 : null);\n    }\n\n    _get_rotateTextDown() {\n        return this._getTextRotation() === 180;\n    }\n\n    _set_rotateTextDown(value) {\n        this._setTextRotation(value ? 180 : null);\n    }\n\n    _get_verticalText() {\n        return this._getTextRotation() === 255;\n    }\n\n    _set_verticalText(value) {\n        this._setTextRotation(value ? 255 : null);\n    }\n\n    _get_fill() {\n        const patternFillNode = xmlq.findChild(this._fillNode, 'patternFill');// jq.get(this._fillNode, \"patternFill[0]\");\n        const gradientFillNode = xmlq.findChild(this._fillNode, 'gradientFill');// jq.get(this._fillNode, \"gradientFill[0]\");\n        const patternType = patternFillNode && patternFillNode.attributes.patternType;// jq.get(patternFillNode, \"$.patternType\");\n\n        if (patternType === \"solid\") {\n            return {\n                type: \"solid\",\n                color: this._getColor(patternFillNode, \"fgColor\")\n            };\n        }\n\n        if (patternType) {\n            return {\n                type: \"pattern\",\n                pattern: patternType,\n                foreground: this._getColor(patternFillNode, \"fgColor\"),\n                background: this._getColor(patternFillNode, \"bgColor\")\n            };\n        }\n\n        if (gradientFillNode) {\n            const gradientType = gradientFillNode.attributes.type || \"linear\";\n            const fill = {\n                type: \"gradient\",\n                gradientType,\n                stops: _.map(gradientFillNode.children, stop => ({\n                    position: stop.attributes.position,\n                    color: this._getColor(stop, \"color\")\n                }))\n            };\n\n            if (gradientType === \"linear\") {\n                fill.angle = gradientFillNode.attributes.degree;\n            } else {\n                fill.left = gradientFillNode.attributes.left;\n                fill.right = gradientFillNode.attributes.right;\n                fill.top = gradientFillNode.attributes.top;\n                fill.bottom = gradientFillNode.attributes.bottom;\n            }\n\n            return fill;\n        }\n    }\n\n    _set_fill(fill) {\n        this._fillNode.children = [];\n\n        // No fill\n        if (_.isNil(fill)) return;\n\n        // Pattern fill\n        if (fill.type === \"pattern\") {\n            const patternFill = {\n                name: 'patternFill',\n                attributes: { patternType: fill.pattern },\n                children: []\n            };\n            this._fillNode.children.push(patternFill);\n            this._setColor(patternFill, \"fgColor\", fill.foreground);\n            this._setColor(patternFill, \"bgColor\", fill.background);\n            return;\n        }\n\n        // Gradient fill\n        if (fill.type === \"gradient\") {\n            const gradientFill = { name: 'gradientFill', attributes: {}, children: [] };\n            this._fillNode.children.push(gradientFill);\n            xmlq.setAttributes(gradientFill, {\n                type: fill.gradientType === \"path\" ? \"path\" : undefined,\n                left: fill.left,\n                right: fill.right,\n                top: fill.top,\n                bottom: fill.bottom,\n                degree: fill.angle\n            });\n\n            _.forEach(fill.stops, (fillStop, i) => {\n                const stop = {\n                    name: 'stop',\n                    attributes: { position: fillStop.position },\n                    children: []\n                };\n                gradientFill.children.push(stop);\n                this._setColor(stop, 'color', fillStop.color);\n            });\n\n            return;\n        }\n\n        // Solid fill (really a pattern fill with a solid pattern type).\n        if (!_.isObject(fill)) fill = { type: \"solid\", color: fill };\n        else if (fill.hasOwnProperty('rgb') || fill.hasOwnProperty(\"theme\")) fill = { color: fill };\n\n        const patternFill = {\n            name: 'patternFill',\n            attributes: { patternType: 'solid' }\n        };\n        this._fillNode.children.push(patternFill);\n        this._setColor(patternFill, \"fgColor\", fill.color);\n    }\n\n    _getBorder() {\n        const result = {};\n        [\"left\", \"right\", \"top\", \"bottom\", \"diagonal\"].forEach(side => {\n            const sideNode = xmlq.findChild(this._borderNode, side);\n            const sideResult = {};\n\n            const style = xmlq.getChildAttribute(this._borderNode, side, 'style');\n            if (style) sideResult.style = style;\n            const color = this._getColor(sideNode, 'color');\n            if (color) sideResult.color = color;\n\n            if (side === \"diagonal\") {\n                const up = this._borderNode.attributes.diagonalUp;\n                const down = this._borderNode.attributes.diagonalDown;\n                let direction;\n                if (up && down) direction = \"both\";\n                else if (up) direction = \"up\";\n                else if (down) direction = \"down\";\n                if (direction) sideResult.direction = direction;\n            }\n\n            if (!_.isEmpty(sideResult)) result[side] = sideResult;\n        });\n\n        return result;\n    }\n\n    _setBorder(settings) {\n        _.forOwn(settings, (setting, side) => {\n            if (typeof setting === \"boolean\") {\n                setting = { style: setting ? \"thin\" : null };\n            } else if (typeof setting === \"string\") {\n                setting = { style: setting };\n            } else if (setting === null || setting === undefined) {\n                setting = { style: null, color: null, direction: null };\n            }\n\n            if (setting.hasOwnProperty(\"style\")) {\n                xmlq.setChildAttributes(this._borderNode, side, { style: setting.style });\n            }\n\n            if (setting.hasOwnProperty(\"color\")) {\n                const sideNode = xmlq.findChild(this._borderNode, side);\n                this._setColor(sideNode, \"color\", setting.color);\n            }\n\n            if (side === \"diagonal\") {\n                xmlq.setAttributes(this._borderNode, {\n                    diagonalUp: setting.direction === \"up\" || setting.direction === \"both\" ? 1 : null,\n                    diagonalDown: setting.direction === \"down\" || setting.direction === \"both\" ? 1 : null\n                });\n            }\n        });\n    }\n\n    _get_border() {\n        return this._getBorder();\n    }\n\n    _set_border(settings) {\n        if (_.isObject(settings) && !settings.hasOwnProperty(\"style\") && !settings.hasOwnProperty(\"color\")) {\n            settings = _.defaults(settings, {\n                left: null,\n                right: null,\n                top: null,\n                bottom: null,\n                diagonal: null\n            });\n            this._setBorder(settings);\n        } else {\n            this._setBorder({\n                left: settings,\n                right: settings,\n                top: settings,\n                bottom: settings\n            });\n        }\n    }\n\n    _get_borderColor() {\n        return _.mapValues(this._getBorder(), value => value.color);\n    }\n\n    _set_borderColor(color) {\n        if (_.isObject(color)) {\n            this._setBorder(_.mapValues(color, color => ({ color })));\n        } else {\n            this._setBorder({\n                left: { color },\n                right: { color },\n                top: { color },\n                bottom: { color },\n                diagonal: { color }\n            });\n        }\n    }\n\n    _get_borderStyle() {\n        return _.mapValues(this._getBorder(), value => value.style);\n    }\n\n    _set_borderStyle(style) {\n        if (_.isObject(style)) {\n            this._setBorder(_.mapValues(style, style => ({ style })));\n        } else {\n            this._setBorder({\n                left: { style },\n                right: { style },\n                top: { style },\n                bottom: { style }\n            });\n        }\n    }\n\n    _get_diagonalBorderDirection() {\n        const border = this._getBorder().diagonal;\n        return border && border.direction;\n    }\n\n    _set_diagonalBorderDirection(direction) {\n        this._setBorder({ diagonal: { direction } });\n    }\n\n    _get_numberFormat() {\n        const numFmtId = this._xfNode.attributes.numFmtId || 0;\n        return this._styleSheet.getNumberFormatCode(numFmtId);\n    }\n\n    _set_numberFormat(formatCode) {\n        this._xfNode.attributes.numFmtId = this._styleSheet.getNumberFormatId(formatCode);\n    }\n}\n\n[\"left\", \"right\", \"top\", \"bottom\", \"diagonal\"].forEach(side => {\n    Style.prototype[`_get_${side}Border`] = function () {\n        return this._getBorder()[side];\n    };\n\n    Style.prototype[`_set_${side}Border`] = function (settings) {\n        this._setBorder({ [side]: settings });\n    };\n\n    Style.prototype[`_get_${side}BorderColor`] = function () {\n        const border = this._getBorder()[side];\n        return border && border.color;\n    };\n\n    Style.prototype[`_set_${side}BorderColor`] = function (color) {\n        this._setBorder({ [side]: { color } });\n    };\n\n    Style.prototype[`_get_${side}BorderStyle`] = function () {\n        const border = this._getBorder()[side];\n        return border && border.style;\n    };\n\n    Style.prototype[`_set_${side}BorderStyle`] = function (style) {\n        this._setBorder({ [side]: { style } });\n    };\n});\n\n// IE doesn't support function names so explicitly set it.\nif (!Style.name) Style.name = \"Style\";\n\nmodule.exports = Style;\n","\n\n/**\n * Legacy color indexes.\n * https://msdn.microsoft.com/en-us/library/documentformat.openxml.spreadsheet.indexedcolors(v=office.15).aspx\n */\nmodule.exports = [\n    \"000000\",\n    \"FFFFFF\",\n    \"FF0000\",\n    \"00FF00\",\n    \"0000FF\",\n    \"FFFF00\",\n    \"FF00FF\",\n    \"00FFFF\",\n    \"000000\",\n    \"FFFFFF\",\n    \"FF0000\",\n    \"00FF00\",\n    \"0000FF\",\n    \"FFFF00\",\n    \"FF00FF\",\n    \"00FFFF\",\n    \"800000\",\n    \"008000\",\n    \"000080\",\n    \"808000\",\n    \"800080\",\n    \"008080\",\n    \"C0C0C0\",\n    \"808080\",\n    \"9999FF\",\n    \"993366\",\n    \"FFFFCC\",\n    \"CCFFFF\",\n    \"660066\",\n    \"FF8080\",\n    \"0066CC\",\n    \"CCCCFF\",\n    \"000080\",\n    \"FF00FF\",\n    \"FFFF00\",\n    \"00FFFF\",\n    \"800080\",\n    \"800000\",\n    \"008080\",\n    \"0000FF\",\n    \"00CCFF\",\n    \"CCFFFF\",\n    \"CCFFCC\",\n    \"FFFF99\",\n    \"99CCFF\",\n    \"FF99CC\",\n    \"CC99FF\",\n    \"FFCC99\",\n    \"3366FF\",\n    \"33CCCC\",\n    \"99CC00\",\n    \"FFCC00\",\n    \"FF9900\",\n    \"FF6600\",\n    \"666699\",\n    \"969696\",\n    \"003366\",\n    \"339966\",\n    \"003300\",\n    \"333300\",\n    \"993300\",\n    \"993366\",\n    \"333399\",\n    \"333333\",\n    \"System Foreground\",\n    \"System Background\"\n];\n","\n\nconst _ = require(\"lodash\");\nconst RichTextFragment = require(\"./RichTextFragment\");\n\n/**\n * A RichText class that contains many {@link RichTextFragment}.\n */\nclass RichText {\n    /**\n     * Creates a new instance of RichText. If you get the instance by calling `Cell.value()`,\n     * adding a text contains line separator will trigger {@link Cell.style}('wrapText', true), which\n     * will make MS Excel show the new line. i.e. In MS Excel, Tap \"alt+Enter\" in a cell, the cell\n     * will set wrap text to true automatically.\n     *\n     * @param {undefined|null|Object} [node] - The node stored in the shared string\n     */\n    constructor(node) {\n        this._node = [];\n        this._cell = null;\n        this._remainingNodes = [];\n        if (node) {\n            for (let i = 0; i < node.length; i++) {\n                const fragment = node[i];\n                if (fragment.name === 'r') {\n                    this._node.push(new RichTextFragment(fragment, null, this));\n                } else {\n                    // special node, e.g. rPh, phoneticPr in Japanese language.\n                    this._remainingNodes.push(fragment);\n                }\n            }\n        }\n    }\n\n    /**\n     * Gets which cell this {@link RichText} instance belongs to.\n     * @return {Cell|undefined} The cell this instance belongs to.\n     */\n    get cell() {\n        return this._cell;\n    }\n\n    /**\n     * Gets the how many rich text fragment this {@link RichText} instance contains\n     * @return {number} The number of fragments this {@link RichText} instance has.\n     */\n    get length() {\n        return this._node.length;\n    }\n\n    /**\n     * Gets concatenated text without styles.\n     * @return {string} concatenated text\n     */\n    text() {\n        let text = '';\n        for (let i = 0; i < this._node.length; i++) {\n            text += this.get(i).value();\n        }\n        return text;\n    }\n\n    /**\n     * Gets the instance with cell reference defined.\n     * @param {Cell} cell - Cell reference.\n     * @return {RichText} The instance with cell reference defined.\n     */\n    getInstanceWithCellRef(cell) {\n        this._cell = cell;\n        return this;\n    }\n\n    /**\n     * Returns a deep copy of this instance.\n     * If cell reference is provided, it checks line separators and calls\n     * `cell.style('wrapText', true)` when needed.\n     * @param {Cell|undefined} [cell] - The cell reference.\n     * @return {RichText} A deep copied instance\n     */\n    copy(cell) {\n        const newRichText = new RichText(_.cloneDeep(this.toXml()));\n        if (cell && _.includes(this.text(), '\\n')) {\n            cell.style('wrapText', true);\n        }\n        return newRichText;\n    }\n\n    /**\n     * Gets the ith fragment of this {@link RichText} instance.\n     * @param {number} index - The index\n     * @return {RichTextFragment} A rich text fragment\n     */\n    get(index) {\n        return this._node[index];\n    }\n\n    /**\n     * Removes a rich text fragment. This instance will be mutated.\n     * @param {number} index - the index of the fragment to remove\n     * @return {RichText} the rich text instance\n     */\n    remove(index) {\n        this._node.splice(index, 1);\n        this.removeUnsupportedNodes();\n        return this;\n    }\n\n    /**\n     * Adds a rich text fragment to the last or after the given index. This instance will be mutated.\n     * @param {string} text - the text\n     * @param {{}} [styles] - the styles js object, i.e. {fontSize: 12}\n     * @param {number|undefined|null} [index] - the index of the fragment to add\n     * @return {RichText} the rich text instance\n     */\n    add(text, styles, index) {\n        if (index === undefined || index === null) {\n            this._node.push(new RichTextFragment(text, styles, this));\n        } else {\n            this._node.splice(index, 0, new RichTextFragment(text, styles, this));\n        }\n        this.removeUnsupportedNodes();\n        return this;\n    }\n\n    /**\n     * Clears this rich text\n     * @return {RichText} the rich text instance\n     */\n    clear() {\n        this._node = [];\n        this._remainingNodes = [];\n        this._cell = undefined;\n        return this;\n    }\n\n    /**\n     * Remove all unsupported nodes (phoneticPr, rPh for Japanese language).\n     * @return {undefined}\n     */\n    removeUnsupportedNodes() {\n        this._remainingNodes = [];\n    }\n\n    /**\n     * Convert the rich text to an XML object.\n     * @returns {Array.<{}>} The XML form.\n     * @ignore\n     */\n    toXml() {\n        const node = [];\n        for (let i = 0; i < this._node.length; i++) {\n            node.push(this._node[i].toXml());\n        }\n        return node.concat(this._remainingNodes);\n    }\n}\n\n// IE doesn't support function names so explicitly set it.\nif (!RichText.name) RichText.name = \"RichText\";\n\nmodule.exports = RichText;\n","\n\n/* eslint camelcase:off */\n\nconst ArgHandler = require(\"./ArgHandler\");\nconst _ = require(\"lodash\");\nconst xmlq = require(\"./xmlq\");\nconst colorIndexes = require(\"./colorIndexes\");\n\n/**\n * A Rich text fragment.\n */\nclass RichTextFragment {\n    /**\n     * Creates a new instance of RichTextFragment.\n     * @constructor\n     * @param {string|Object} value - Text value or XML node\n     * @param {object|undefined|null} [styles] - Multiple styles.\n     * @param {RichText} richText - The rich text instance where this fragment belongs to.\n     */\n    constructor(value, styles, richText) {\n        this._richText = richText;\n        if (value.name === 'r') {\n            this._node = value;\n            this._fontNode = xmlq.findChild(this._node, 'rPr');\n            if (!this._fontNode) {\n                this._fontNode = { name: 'rPr', attributes: {}, children: [] };\n                this._node.children.unshift(this._fontNode);\n            }\n            this._valueNode = xmlq.findChild(this._node, 't');\n        } else {\n            this._node = {\n                name: 'r',\n                attributes: {},\n                children: [\n                    { name: 'rPr', attributes: {}, children: [] },\n                    { name: 't', attributes: {}, children: [] }\n                ]\n            };\n            this._fontNode = xmlq.findChild(this._node, 'rPr');\n            this._valueNode = xmlq.findChild(this._node, 't');\n            this.value(value);\n            if (styles) {\n                this.style(styles);\n            }\n        }\n    }\n\n    /**\n     * Gets the value of this part of rich text\n     * @return {string} text\n     *//**\n     * Sets the value of this part of rich text\n     * @param {string} text - the text to set\n     * @return {RichTextFragment} - RichTextFragment\n     */\n    value() {\n        return new ArgHandler(\"_RichText.value\")\n            .case(() => {\n                return this._valueNode.children[0];\n            })\n            .case('string', value => {\n                value = value.replace(/(?:\\r\\n|\\r|\\n)/g, '\\r\\n');\n                const hasLineSeparator = value.indexOf('\\r\\n') !== -1;\n                this._valueNode.children[0] = value;\n                if (value.charAt(0) === ' ') xmlq.setAttributes(this._valueNode, { 'xml:space': 'preserve' });\n\n                if (this._richText) this._richText.removeUnsupportedNodes();\n                if (hasLineSeparator) {\n                    // set wrapText = true if it contains line separator, excel will only display new lines if it sets.\n                    if (this._richText.cell) {\n                        this._richText.cell.style('wrapText', true);\n                    }\n                    xmlq.setAttributes(this._valueNode, { 'xml:space': 'preserve' });\n                }\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Convert the rich text to an XML object.\n     * @returns {{}} The XML form.\n     * @ignore\n     */\n    toXml() {\n        return this._node;\n    }\n\n    /**\n     * Gets an individual style.\n     * @param {string} name - The name of the style.\n     * @returns {*} The style.\n     *//**\n     * Gets multiple styles.\n     * @param {Array.<string>} names - The names of the style.\n     * @returns {object.<string, *>} Object whose keys are the style names and values are the styles.\n     *//**\n     * Sets an individual style.\n     * @param {string} name - The name of the style.\n     * @param {*} value - The value to set.\n     * @returns {RichTextFragment} This RichTextFragment.\n     *//**\n     * Sets multiple styles.\n     * @param {object.<string, *>} styles - Object whose keys are the style names and values are the styles to set.\n     * @returns {RichTextFragment} This RichTextFragment.\n     */\n    style() {\n        return new ArgHandler(\"_RichText.style\")\n            .case('string', name => {\n                // Get single value\n                const getterName = `_get_${name}`;\n                if (!this[getterName]) throw new Error(`_RichText.style: '${name}' is not a valid style`);\n                return this[getterName]();\n            })\n            .case('array', names => {\n                // Get list of values\n                const values = {};\n                names.forEach(name => {\n                    values[name] = this.style(name);\n                });\n                return values;\n            })\n            .case(['string', '*'], (name, value) => {\n                // Set a single value\n                const setterName = `_set_${name}`;\n                if (!this[setterName]) throw new Error(`_RichText.style: '${name}' is not a valid style`);\n                return this[setterName](value);\n            })\n            .case('object', nameValues => {\n                // Object of key value pairs to set\n                for (const name in nameValues) {\n                    if (!nameValues.hasOwnProperty(name)) continue;\n                    const value = nameValues[name];\n                    this.style(name, value);\n                }\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    _getColor(node, name) {\n        const child = xmlq.findChild(node, name);\n        if (!child || !child.attributes) return;\n\n        const color = {};\n        if (child.attributes.hasOwnProperty('rgb')) color.rgb = child.attributes.rgb;\n        else if (child.attributes.hasOwnProperty('theme')) color.theme = child.attributes.theme;\n        else if (child.attributes.hasOwnProperty('indexed')) color.rgb = colorIndexes[child.attributes.indexed];\n\n        if (child.attributes.hasOwnProperty('tint')) color.tint = child.attributes.tint;\n\n        if (_.isEmpty(color)) return;\n\n        return color;\n    }\n\n    _setColor(node, name, color) {\n        if (typeof color === \"string\") color = { rgb: color };\n        else if (typeof color === \"number\") color = { theme: color };\n\n        xmlq.setChildAttributes(node, name, {\n            rgb: color && color.rgb && color.rgb.toUpperCase(),\n            indexed: null,\n            theme: color && color.theme,\n            tint: color && color.tint\n        });\n\n        xmlq.removeChildIfEmpty(node, 'color');\n    }\n\n    _get_bold() {\n        return xmlq.hasChild(this._fontNode, 'b');\n    }\n\n    _set_bold(bold) {\n        if (bold) xmlq.appendChildIfNotFound(this._fontNode, \"b\");\n        else xmlq.removeChild(this._fontNode, 'b');\n    }\n\n    _get_italic() {\n        return xmlq.hasChild(this._fontNode, 'i');\n    }\n\n    _set_italic(italic) {\n        if (italic) xmlq.appendChildIfNotFound(this._fontNode, \"i\");\n        else xmlq.removeChild(this._fontNode, 'i');\n    }\n\n    _get_underline() {\n        const uNode = xmlq.findChild(this._fontNode, 'u');\n        return uNode ? uNode.attributes.val || true : false;\n    }\n\n    _set_underline(underline) {\n        if (underline) {\n            const uNode = xmlq.appendChildIfNotFound(this._fontNode, \"u\");\n            const val = typeof underline === 'string' ? underline : null;\n            xmlq.setAttributes(uNode, { val });\n        } else {\n            xmlq.removeChild(this._fontNode, 'u');\n        }\n    }\n\n    _get_strikethrough() {\n        return xmlq.hasChild(this._fontNode, 'strike');\n    }\n\n    _set_strikethrough(strikethrough) {\n        if (strikethrough) xmlq.appendChildIfNotFound(this._fontNode, \"strike\");\n        else xmlq.removeChild(this._fontNode, 'strike');\n    }\n\n    _getFontVerticalAlignment() {\n        return xmlq.getChildAttribute(this._fontNode, 'vertAlign', \"val\");\n    }\n\n    _setFontVerticalAlignment(alignment) {\n        xmlq.setChildAttributes(this._fontNode, 'vertAlign', { val: alignment });\n        xmlq.removeChildIfEmpty(this._fontNode, 'vertAlign');\n    }\n\n    _get_subscript() {\n        return this._getFontVerticalAlignment() === \"subscript\";\n    }\n\n    _set_subscript(subscript) {\n        this._setFontVerticalAlignment(subscript ? \"subscript\" : null);\n    }\n\n    _get_superscript() {\n        return this._getFontVerticalAlignment() === \"superscript\";\n    }\n\n    _set_superscript(superscript) {\n        this._setFontVerticalAlignment(superscript ? \"superscript\" : null);\n    }\n\n    _get_fontSize() {\n        return xmlq.getChildAttribute(this._fontNode, 'sz', \"val\");\n    }\n\n    _set_fontSize(size) {\n        xmlq.setChildAttributes(this._fontNode, 'sz', { val: size });\n        xmlq.removeChildIfEmpty(this._fontNode, 'sz');\n    }\n\n    _get_fontFamily() {\n        return xmlq.getChildAttribute(this._fontNode, 'rFont', \"val\");\n    }\n\n    _set_fontFamily(family) {\n        xmlq.setChildAttributes(this._fontNode, 'rFont', { val: family });\n        xmlq.removeChildIfEmpty(this._fontNode, 'rFont');\n    }\n\n    _get_fontGenericFamily() {\n        return xmlq.getChildAttribute(this._fontNode, 'family', \"val\");\n    }\n\n    /**\n     * @param {number} genericFamily - 1: Serif, 2: Sans Serif, 3: Monospace,\n     * @private\n     * @return {undefined}\n     */\n    _set_fontGenericFamily(genericFamily) {\n        xmlq.setChildAttributes(this._fontNode, 'family', { val: genericFamily });\n        xmlq.removeChildIfEmpty(this._fontNode, 'family');\n    }\n\n    _get_fontColor() {\n        return this._getColor(this._fontNode, \"color\");\n    }\n\n    _set_fontColor(color) {\n        this._setColor(this._fontNode, \"color\", color);\n    }\n\n    _get_fontScheme() {\n        // can be 'minor', 'major', 'none'\n        return xmlq.getChildAttribute(this._fontNode, 'scheme', \"val\");\n    }\n\n    /**\n     * @param {string} scheme - 'minor'|'major'|'none'\n     * @private\n     * @return {undefined}\n     */\n    _set_fontScheme(scheme) {\n        xmlq.setChildAttributes(this._fontNode, 'scheme', { val: scheme });\n        xmlq.removeChildIfEmpty(this._fontNode, 'scheme');\n    }\n}\n\n// IE doesn't support function names so explicitly set it.\nif (!RichTextFragment.name) RichTextFragment.name = \"RichTextFragment\";\n\nmodule.exports = RichTextFragment;\n","\n\nconst _ = require(\"lodash\");\nconst Cell = require(\"./Cell\");\nconst regexify = require(\"./regexify\");\nconst ArgHandler = require(\"./ArgHandler\");\nconst addressConverter = require('./addressConverter');\n\n/**\n * A row.\n */\nclass Row {\n    // /**\n    //  * Creates a new instance of Row.\n    //  * @param {Sheet} sheet - The parent sheet.\n    //  * @param {{}} node - The row node.\n    //  */\n    constructor(sheet, node) {\n        this._sheet = sheet;\n        this._init(node);\n    }\n\n    /* PUBLIC */\n\n    /**\n     * Get the address of the row.\n     * @param {{}} [opts] - Options\n     * @param {boolean} [opts.includeSheetName] - Include the sheet name in the address.\n     * @param {boolean} [opts.anchored] - Anchor the address.\n     * @returns {string} The address\n     */\n    address(opts) {\n        return addressConverter.toAddress({\n            type: 'row',\n            rowNumber: this.rowNumber(),\n            sheetName: opts && opts.includeSheetName && this.sheet().name(),\n            rowAnchored: opts && opts.anchored\n        });\n    }\n\n    /**\n     * Get a cell in the row.\n     * @param {string|number} columnNameOrNumber - The name or number of the column.\n     * @returns {Cell} The cell.\n     */\n    cell(columnNameOrNumber) {\n        let columnNumber = columnNameOrNumber;\n        if (typeof columnNameOrNumber === 'string') {\n            columnNumber = addressConverter.columnNameToNumber(columnNameOrNumber);\n        }\n\n        if (columnNumber < 1) throw new RangeError(`Invalid column number ${columnNumber}. Remember that spreadsheets use 1-based indexing.`);\n\n        // Return an existing cell.\n        if (this._cells[columnNumber]) return this._cells[columnNumber];\n\n        // No cell exists for this.\n        // Check if there is an existing row/column style for the new cell.\n        let styleId;\n        const rowStyleId = this._node.attributes.s;\n        const columnStyleId = this.sheet().existingColumnStyleId(columnNumber);\n\n        // Row style takes priority. If a cell has both row and column styles it should have created a cell entry with a cell-specific style.\n        if (!_.isNil(rowStyleId)) styleId = rowStyleId;\n        else if (!_.isNil(columnStyleId)) styleId = columnStyleId;\n\n        // Create the new cell.\n        const cell = new Cell(this, columnNumber, styleId);\n        this._cells[columnNumber] = cell;\n        return cell;\n    }\n\n    /**\n     * Gets the row height.\n     * @returns {undefined|number} The height (or undefined).\n     *//**\n     * Sets the row height.\n     * @param {number} height - The height of the row.\n     * @returns {Row} The row.\n     */\n    height() {\n        return new ArgHandler('Row.height')\n            .case(() => {\n                return this._node.attributes.customHeight ? this._node.attributes.ht : undefined;\n            })\n            .case('number', height => {\n                this._node.attributes.ht = height;\n                this._node.attributes.customHeight = 1;\n                return this;\n            })\n            .case('nil', () => {\n                delete this._node.attributes.ht;\n                delete this._node.attributes.customHeight;\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Gets a value indicating whether the row is hidden.\n     * @returns {boolean} A flag indicating whether the row is hidden.\n     *//**\n     * Sets whether the row is hidden.\n     * @param {boolean} hidden - A flag indicating whether to hide the row.\n     * @returns {Row} The row.\n     */\n    hidden() {\n        return new ArgHandler(\"Row.hidden\")\n            .case(() => {\n                return this._node.attributes.hidden === 1;\n            })\n            .case('boolean', hidden => {\n                if (hidden) this._node.attributes.hidden = 1;\n                else delete this._node.attributes.hidden;\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Gets the row number.\n     * @returns {number} The row number.\n     */\n    rowNumber() {\n        return this._node.attributes.r;\n    }\n\n    /**\n     * Gets the parent sheet of the row.\n     * @returns {Sheet} The parent sheet.\n     */\n    sheet() {\n        return this._sheet;\n    }\n\n    /**\n     * Gets an individual style.\n     * @param {string} name - The name of the style.\n     * @returns {*} The style.\n     *//**\n     * Gets multiple styles.\n     * @param {Array.<string>} names - The names of the style.\n     * @returns {object.<string, *>} Object whose keys are the style names and values are the styles.\n     *//**\n     * Sets an individual style.\n     * @param {string} name - The name of the style.\n     * @param {*} value - The value to set.\n     * @returns {Cell} The cell.\n     *//**\n\t * Sets multiple styles.\n\t * @param {object.<string, *>} styles - Object whose keys are the style names and values are the styles to set.\n\t * @returns {Cell} The cell.\n     *//**\n     * Sets to a specific style\n     * @param {Style} style - Style object given from stylesheet.createStyle\n     * @returns {Cell} The cell.\n     */\n    style() {\n        return new ArgHandler(\"Row.style\")\n            .case('string', name => {\n                // Get single value\n                this._createStyleIfNeeded();\n                return this._style.style(name);\n            })\n            .case('array', names => {\n                // Get list of values\n                const values = {};\n                names.forEach(name => {\n                    values[name] = this.style(name);\n                });\n\n                return values;\n            })\n            .case(['string', '*'], (name, value) => {\n                this._createCellStylesIfNeeded();\n\n                // Style each existing cell within this row. (Cells don't inherit ow/column styles.)\n                _.forEach(this._cells, cell => {\n                    if (cell) cell.style(name, value);\n                });\n\n                // Set the style on the row.\n                this._createStyleIfNeeded();\n                this._style.style(name, value);\n\n                return this;\n            })\n            .case('object', nameValues => {\n                // Object of key value pairs to set\n                for (const name in nameValues) {\n                    if (!nameValues.hasOwnProperty(name)) continue;\n                    const value = nameValues[name];\n                    this.style(name, value);\n                }\n\n                return this;\n            })\n            .case('Style', style => {\n                this._createCellStylesIfNeeded();\n\n                // Style each existing cell within this row. (Cells don't inherit ow/column styles.)\n                _.forEach(this._cells, cell => {\n                    if (cell) cell.style(style);\n                });\n\n                this._style = style;\n                this._node.attributes.s = style.id();\n                this._node.attributes.customFormat = 1;\n\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Get the parent workbook.\n     * @returns {Workbook} The parent workbook.\n     */\n    workbook() {\n        return this.sheet().workbook();\n    }\n\n    /**\n     * Append horizontal page break after the row.\n     * @returns {Row} the row.\n     */\n    addPageBreak() {\n        this.sheet().horizontalPageBreaks().add(this.rowNumber());\n        return this;\n    }\n\n    /* INTERNAL */\n\n    /**\n     * Clear cells that are using a given shared formula ID.\n     * @param {number} sharedFormulaId - The shared formula ID.\n     * @returns {undefined}\n     * @ignore\n     */\n    clearCellsUsingSharedFormula(sharedFormulaId) {\n        this._cells.forEach(cell => {\n            if (!cell) return;\n            if (cell.sharesFormula(sharedFormulaId)) cell.clear();\n        });\n    }\n\n    /**\n     * Find a pattern in the row and optionally replace it.\n     * @param {string|RegExp} pattern - The search pattern.\n     * @param {string} [replacement] - The replacement text.\n     * @returns {Array.<Cell>} The matched cells.\n     * @ignore\n     */\n    find(pattern, replacement) {\n        pattern = regexify(pattern);\n\n        const matches = [];\n        this._cells.forEach(cell => {\n            if (!cell) return;\n            if (cell.find(pattern, replacement)) matches.push(cell);\n        });\n\n        return matches;\n    }\n\n    /**\n     * Check if the row has a cell at the given column number.\n     * @param {number} columnNumber - The column number.\n     * @returns {boolean} True if a cell exists, false otherwise.\n     * @ignore\n     */\n    hasCell(columnNumber) {\n        if (columnNumber < 1) throw new RangeError(`Invalid column number ${columnNumber}. Remember that spreadsheets use 1-based indexing.`);\n        return !!this._cells[columnNumber];\n    }\n\n    /**\n     * Check if the column has a style defined.\n     * @returns {boolean} True if a style exists, false otherwise.\n     * @ignore\n     */\n    hasStyle() {\n        return !_.isNil(this._node.attributes.s);\n    }\n\n    /**\n     * Returns the nax used column number.\n     * @returns {number} The max used column number.\n     * @ignore\n     */\n    minUsedColumnNumber() {\n        return _.findIndex(this._cells);\n    }\n\n    /**\n     * Returns the nax used column number.\n     * @returns {number} The max used column number.\n     * @ignore\n     */\n    maxUsedColumnNumber() {\n        return this._cells.length - 1;\n    }\n\n    /**\n     * Convert the row to an object.\n     * @returns {{}} The object form.\n     * @ignore\n     */\n    toXml() {\n        return this._node;\n    }\n\n    /* PRIVATE */\n\n    /**\n     * If a column node is already defined that intersects with this row and that column has a style set, we\n     * need to make sure that a cell node exists at the intersection so we can style it appropriately.\n     * Fetching the cell will force a new cell node to be created with a style matching the column.\n     * @returns {undefined}\n     * @private\n     */\n    _createCellStylesIfNeeded() {\n        this.sheet().forEachExistingColumnNumber(columnNumber => {\n            if (!_.isNil(this.sheet().existingColumnStyleId(columnNumber))) this.cell(columnNumber);\n        });\n    }\n\n    /**\n     * Create a style for this row if it doesn't already exist.\n     * @returns {undefined}\n     * @private\n     */\n    _createStyleIfNeeded() {\n        if (!this._style) {\n            const styleId = this._node.attributes.s;\n            this._style = this.workbook().styleSheet().createStyle(styleId);\n            this._node.attributes.s = this._style.id();\n            this._node.attributes.customFormat = 1;\n        }\n    }\n\n    /**\n     * Initialize the row node.\n     * @param {{}} node - The row node.\n     * @returns {undefined}\n     * @private\n     */\n    _init(node) {\n        this._node = node;\n        this._cells = [];\n        this._node.children.forEach(cellNode => {\n            const cell = new Cell(this, cellNode);\n            this._cells[cell.columnNumber()] = cell;\n        });\n        this._node.children = this._cells;\n    }\n}\n\nmodule.exports = Row;\n\n/*\n<row r=\"6\" spans=\"1:9\" x14ac:dyDescent=\"0.25\">\n    <c r=\"A6\" s=\"1\" t=\"s\">\n        <v>2</v>\n    </c>\n    <c r=\"B6\" s=\"1\"/>\n    <c r=\"C6\" s=\"1\"/>\n</row>\n*/\n","\n\nconst ArgHandler = require(\"./ArgHandler\");\nconst addressConverter = require('./addressConverter');\n\n// Default column width.\nconst defaultColumnWidth = 9.140625;\n\n/**\n * A column.\n */\nclass Column {\n    // /**\n    //  * Creates a new Column.\n    //  * @param {Sheet} sheet - The parent sheet.\n    //  * @param {{}} node - The column node.\n    //  * @constructor\n    //  * @ignore\n    //  * @private\n    //  */\n    constructor(sheet, node) {\n        this._sheet = sheet;\n        this._node = node;\n    }\n\n    /* PUBLIC */\n\n    /**\n     * Get the address of the column.\n     * @param {{}} [opts] - Options\n     * @param {boolean} [opts.includeSheetName] - Include the sheet name in the address.\n     * @param {boolean} [opts.anchored] - Anchor the address.\n     * @returns {string} The address\n     */\n    address(opts) {\n        return addressConverter.toAddress({\n            type: 'column',\n            columnName: this.columnName(),\n            sheetName: opts && opts.includeSheetName && this.sheet().name(),\n            columnAnchored: opts && opts.anchored\n        });\n    }\n\n    /**\n     * Get a cell within the column.\n     * @param {number} rowNumber - The row number.\n     * @returns {Cell} The cell in the column with the given row number.\n     */\n    cell(rowNumber) {\n        return this.sheet().cell(rowNumber, this.columnNumber());\n    }\n\n    /**\n     * Get the name of the column.\n     * @returns {string} The column name.\n     */\n    columnName() {\n        return addressConverter.columnNumberToName(this.columnNumber());\n    }\n\n    /**\n     * Get the number of the column.\n     * @returns {number} The column number.\n     */\n    columnNumber() {\n        return this._node.attributes.min;\n    }\n\n    /**\n     * Gets a value indicating whether the column is hidden.\n     * @returns {boolean} A flag indicating whether the column is hidden.\n     *//**\n     * Sets whether the column is hidden.\n     * @param {boolean} hidden - A flag indicating whether to hide the column.\n     * @returns {Column} The column.\n     */\n    hidden() {\n        return new ArgHandler(\"Column.hidden\")\n            .case(() => {\n                return this._node.attributes.hidden === 1;\n            })\n            .case('boolean', hidden => {\n                if (hidden) this._node.attributes.hidden = 1;\n                else delete this._node.attributes.hidden;\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Get the parent sheet.\n     * @returns {Sheet} The parent sheet.\n     */\n    sheet() {\n        return this._sheet;\n    }\n\n    /**\n     * Gets an individual style.\n     * @param {string} name - The name of the style.\n     * @returns {*} The style.\n     *//**\n     * Gets multiple styles.\n     * @param {Array.<string>} names - The names of the style.\n     * @returns {object.<string, *>} Object whose keys are the style names and values are the styles.\n     *//**\n     * Sets an individual style.\n     * @param {string} name - The name of the style.\n     * @param {*} value - The value to set.\n     * @returns {Cell} The cell.\n     *//**\n     * Sets multiple styles.\n     * @param {object.<string, *>} styles - Object whose keys are the style names and values are the styles to set.\n     * @returns {Cell} The cell.\n     *//**\n\t * Sets to a specific style\n\t * @param {Style} style - Style object given from stylesheet.createStyle\n\t * @returns {Cell} The cell.\n\t */\n    style() {\n        return new ArgHandler(\"Column.style\")\n            .case('string', name => {\n                // Get single value\n                this._createStyleIfNeeded();\n                return this._style.style(name);\n            })\n            .case('array', names => {\n                // Get list of values\n                const values = {};\n                names.forEach(name => {\n                    values[name] = this.style(name);\n                });\n\n                return values;\n            })\n            .case(['string', '*'], (name, value) => {\n                // If a row node is already defined that intersects with this column and that row has a style set, we\n                // need to make sure that a cell node exists at the intersection so we can style it appropriately.\n                // Fetching the cell will force a new cell node to be created with a style matching the column. So we\n                // will fetch and style the cell at each row that intersects this column if it is already present or it\n                // has a style defined.\n                this.sheet().forEachExistingRow(row => {\n                    if (row.hasStyle() || row.hasCell(this.columnNumber())) {\n                        row.cell(this.columnNumber()).style(name, value);\n                    }\n                });\n\n                // Set a single value for all cells to a single value\n                this._createStyleIfNeeded();\n                this._style.style(name, value);\n\n                return this;\n            })\n            .case('object', nameValues => {\n                // Object of key value pairs to set\n                for (const name in nameValues) {\n                    if (!nameValues.hasOwnProperty(name)) continue;\n                    const value = nameValues[name];\n                    this.style(name, value);\n                }\n\n                return this;\n            })\n            .case('Style', style => {\n                // See Large Comment Above\n                this.sheet().forEachExistingRow(row => {\n                    if (row.hasStyle() || row.hasCell(this.columnNumber())) {\n                        row.cell(this.columnNumber()).style(style);\n                    }\n                });\n\n                this._style = style;\n                this._node.attributes.style = style.id();\n\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Gets the width.\n     * @returns {undefined|number} The width (or undefined).\n     *//**\n     * Sets the width.\n     * @param {number} width - The width of the column.\n     * @returns {Column} The column.\n     */\n    width(width) {\n        return new ArgHandler(\"Column.width\")\n            .case(() => {\n                return this._node.attributes.customWidth ? this._node.attributes.width : undefined;\n            })\n            .case('number', width => {\n                this._node.attributes.width = width;\n                this._node.attributes.customWidth = 1;\n                return this;\n            })\n            .case('nil', () => {\n                delete this._node.attributes.width;\n                delete this._node.attributes.customWidth;\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Get the parent workbook.\n     * @returns {Workbook} The parent workbook.\n     */\n    workbook() {\n        return this.sheet().workbook();\n    }\n\n    /**\n     * Append vertical page break after the column.\n     * @returns {Column} the column.\n     */\n    addPageBreak() {\n        this.sheet().verticalPageBreaks().add(this.columnNumber());\n        return this;\n    }\n\n    /* INTERNAL */\n\n    /**\n     * Convert the column to an XML object.\n     * @returns {{}} The XML form.\n     * @ignore\n     */\n    toXml() {\n        return this._node;\n    }\n\n    /* PRIVATE */\n\n    /**\n     * Create a style for this column if it doesn't already exist.\n     * @returns {undefined}\n     * @private\n     */\n    _createStyleIfNeeded() {\n        if (!this._style) {\n            const styleId = this._node.attributes.style;\n            this._style = this.workbook().styleSheet().createStyle(styleId);\n            this._node.attributes.style = this._style.id();\n\n            if (!this.width()) this.width(defaultColumnWidth);\n        }\n    }\n}\n\nmodule.exports = Column;\n","\n\nconst ArgHandler = require(\"./ArgHandler\");\nconst addressConverter = require(\"./addressConverter\");\n\n/**\n * A range of cells.\n */\nclass Range {\n    // /**\n    //  * Creates a new instance of Range.\n    //  * @param {Cell} startCell - The start cell.\n    //  * @param {Cell} endCell - The end cell.\n    //  */\n    constructor(startCell, endCell) {\n        this._startCell = startCell;\n        this._endCell = endCell;\n        this._findRangeExtent(startCell, endCell);\n    }\n\n    /**\n     * Get the address of the range.\n     * @param {{}} [opts] - Options\n     * @param {boolean} [opts.includeSheetName] - Include the sheet name in the address.\n     * @param {boolean} [opts.startRowAnchored] - Anchor the start row.\n     * @param {boolean} [opts.startColumnAnchored] - Anchor the start column.\n     * @param {boolean} [opts.endRowAnchored] - Anchor the end row.\n     * @param {boolean} [opts.endColumnAnchored] - Anchor the end column.\n     * @param {boolean} [opts.anchored] - Anchor all row and columns.\n     * @returns {string} The address.\n     */\n    address(opts) {\n        return addressConverter.toAddress({\n            type: 'range',\n            startRowNumber: this.startCell().rowNumber(),\n            startRowAnchored: opts && (opts.startRowAnchored || opts.anchored),\n            startColumnName: this.startCell().columnName(),\n            startColumnAnchored: opts && (opts.startColumnAnchored || opts.anchored),\n            endRowNumber: this.endCell().rowNumber(),\n            endRowAnchored: opts && (opts.endRowAnchored || opts.anchored),\n            endColumnName: this.endCell().columnName(),\n            endColumnAnchored: opts && (opts.endColumnAnchored || opts.anchored),\n            sheetName: opts && opts.includeSheetName && this.sheet().name()\n        });\n    }\n\n    /**\n     * Gets a cell within the range.\n     * @param {number} ri - Row index relative to the top-left corner of the range (0-based).\n     * @param {number} ci - Column index relative to the top-left corner of the range (0-based).\n     * @returns {Cell} The cell.\n     */\n    cell(ri, ci) {\n        return this.sheet().cell(this._minRowNumber + ri, this._minColumnNumber + ci);\n    }\n\n    /**\n     * Sets sheet autoFilter to this range.\n     * @returns {Range} This range.\n     */\n    autoFilter() {\n        this.sheet().autoFilter(this);\n\n        return this;\n    }\n\n    /**\n     * Get the cells in the range as a 2D array.\n     * @returns {Array.<Array.<Cell>>} The cells.\n     */\n    cells() {\n        return this.map(cell => cell);\n    }\n\n    /**\n     * Clear the contents of all the cells in the range.\n     * @returns {Range} The range.\n     */\n    clear() {\n        return this.value(undefined);\n    }\n\n    /**\n     * Get the end cell of the range.\n     * @returns {Cell} The end cell.\n     */\n    endCell() {\n        return this._endCell;\n    }\n\n    /**\n     * Callback used by forEach.\n     * @callback Range~forEachCallback\n     * @param {Cell} cell - The cell.\n     * @param {number} ri - The relative row index.\n     * @param {number} ci - The relative column index.\n     * @param {Range} range - The range.\n     * @returns {undefined}\n     */\n    /**\n     * Call a function for each cell in the range. Goes by row then column.\n     * @param {Range~forEachCallback} callback - Function called for each cell in the range.\n     * @returns {Range} The range.\n     */\n    forEach(callback) {\n        for (let ri = 0; ri < this._numRows; ri++) {\n            for (let ci = 0; ci < this._numColumns; ci++) {\n                callback(this.cell(ri, ci), ri, ci, this);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * Gets the shared formula in the start cell (assuming it's the source of the shared formula).\n     * @returns {string|undefined} The shared formula.\n     *//**\n     * Sets the shared formula in the range. The formula will be translated for each cell.\n     * @param {string} formula - The formula to set.\n     * @returns {Range} The range.\n     */\n    formula() {\n        return new ArgHandler(\"Range.formula\")\n            .case(() => {\n                return this.startCell().getSharedRefFormula();\n            })\n            .case('string', formula => {\n                const sharedFormulaId = this.sheet().incrementMaxSharedFormulaId();\n                this.forEach((cell, ri, ci) => {\n                    if (ri === 0 && ci === 0) {\n                        cell.setSharedFormula(sharedFormulaId, formula, this.address());\n                    } else {\n                        cell.setSharedFormula(sharedFormulaId);\n                    }\n                });\n\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Callback used by map.\n     * @callback Range~mapCallback\n     * @param {Cell} cell - The cell.\n     * @param {number} ri - The relative row index.\n     * @param {number} ci - The relative column index.\n     * @param {Range} range - The range.\n     * @returns {*} The value to map to.\n     */\n    /**\n     * Creates a 2D array of values by running each cell through a callback.\n     * @param {Range~mapCallback} callback - Function called for each cell in the range.\n     * @returns {Array.<Array.<*>>} The 2D array of return values.\n     */\n    map(callback) {\n        const result = [];\n        this.forEach((cell, ri, ci) => {\n            if (!result[ri]) result[ri] = [];\n            result[ri][ci] = callback(cell, ri, ci, this);\n        });\n\n        return result;\n    }\n\n    /**\n     * Gets a value indicating whether the cells in the range are merged.\n     * @returns {boolean} The value.\n     *//**\n     * Sets a value indicating whether the cells in the range should be merged.\n     * @param {boolean} merged - True to merge, false to unmerge.\n     * @returns {Range} The range.\n     */\n    merged(merged) {\n        return new ArgHandler('Range.merged')\n            .case(() => {\n                return this.sheet().merged(this.address());\n            })\n            .case('*', merged => {\n                this.sheet().merged(this.address(), merged);\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Gets the data validation object attached to the Range.\n     * @returns {object|undefined} The data validation object or undefined if not set.\n     *//**\n     * Set or clear the data validation object of the entire range.\n     * @param {object|undefined} dataValidation - Object or null to clear.\n     * @returns {Range} The range.\n     */\n    dataValidation() {\n        return new ArgHandler('Range.dataValidation')\n            .case(() => {\n                return this.sheet().dataValidation(this.address());\n            })\n            .case('boolean', obj => {\n                return this.sheet().dataValidation(this.address(), obj);\n            })\n            .case('*', obj => {\n                this.sheet().dataValidation(this.address(), obj);\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Callback used by reduce.\n     * @callback Range~reduceCallback\n     * @param {*} accumulator - The accumulated value.\n     * @param {Cell} cell - The cell.\n     * @param {number} ri - The relative row index.\n     * @param {number} ci - The relative column index.\n     * @param {Range} range - The range.\n     * @returns {*} The value to map to.\n     */\n    /**\n     * Reduces the range to a single value accumulated from the result of a function called for each cell.\n     * @param {Range~reduceCallback} callback - Function called for each cell in the range.\n     * @param {*} [initialValue] - The initial value.\n     * @returns {*} The accumulated value.\n     */\n    reduce(callback, initialValue) {\n        let accumulator = initialValue;\n        this.forEach((cell, ri, ci) => {\n            accumulator = callback(accumulator, cell, ri, ci, this);\n        });\n\n        return accumulator;\n    }\n\n    /**\n     * Gets the parent sheet of the range.\n     * @returns {Sheet} The parent sheet.\n     */\n    sheet() {\n        return this.startCell().sheet();\n    }\n\n    /**\n     * Gets the start cell of the range.\n     * @returns {Cell} The start cell.\n     */\n    startCell() {\n        return this._startCell;\n    }\n\n    /**\n     * Gets a single style for each cell.\n     * @param {string} name - The name of the style.\n     * @returns {Array.<Array.<*>>} 2D array of style values.\n     *//**\n     * Gets multiple styles for each cell.\n     * @param {Array.<string>} names - The names of the styles.\n     * @returns {Object.<string, Array.<Array.<*>>>} Object whose keys are style names and values are 2D arrays of style values.\n     *//**\n     * Set the style in each cell to the result of a function called for each.\n     * @param {string} name - The name of the style.\n     * @param {Range~mapCallback} callback - The callback to provide value for the cell.\n     * @returns {Range} The range.\n     *//**\n     * Sets the style in each cell to the corresponding value in the given 2D array of values.\n     * @param {string} name - The name of the style.\n     * @param {Array.<Array.<*>>} values - The style values to set.\n     * @returns {Range} The range.\n     *//**\n     * Set the style of all cells in the range to a single style value.\n     * @param {string} name - The name of the style.\n     * @param {*} value - The value to set.\n     * @returns {Range} The range.\n     *//**\n     * Set multiple styles for the cells in the range.\n     * @param {object.<string,Range~mapCallback|Array.<Array.<*>>|*>} styles - Object whose keys are style names and values are either function callbacks, 2D arrays of style values, or a single value for all the cells.\n     * @returns {Range} The range.\n     *//**\n\t * Sets to a specific style\n\t * @param {Style} style - Style object given from stylesheet.createStyle\n\t * @returns {Range} The range.\n\t */\n    style() {\n        return new ArgHandler(\"Range.style\")\n            .case('string', name => {\n                // Get single value\n                return this.map(cell => cell.style(name));\n            })\n            .case('array', names => {\n                // Get list of values\n                const values = {};\n                names.forEach(name => {\n                    values[name] = this.style(name);\n                });\n\n                return values;\n            })\n            .case(['string', 'function'], (name, callback) => {\n                // Set a single value for the cells to the result of a function\n                return this.forEach((cell, ri, ci) => {\n                    cell.style(name, callback(cell, ri, ci, this));\n                });\n            })\n            .case(['string', 'array'], (name, values) => {\n                // Set a single value for the cells using an array of matching dimension\n                return this.forEach((cell, ri, ci) => {\n                    if (values[ri] && values[ri][ci] !== undefined) {\n                        cell.style(name, values[ri][ci]);\n                    }\n                });\n            })\n            .case(['string', '*'], (name, value) => {\n                // Set a single value for all cells to a single value\n                return this.forEach(cell => cell.style(name, value));\n            })\n            .case('object', nameValues => {\n                // Object of key value pairs to set\n                for (const name in nameValues) {\n                    if (!nameValues.hasOwnProperty(name)) continue;\n                    const value = nameValues[name];\n                    this.style(name, value);\n                }\n\n                return this;\n            })\n            .case('Style', style => {\n                this._style = style;\n                return this.forEach(cell => cell.style(style));\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Callback used by tap.\n     * @callback Range~tapCallback\n     * @param {Range} range - The range.\n     * @returns {undefined}\n     */\n    /**\n     * Invoke a callback on the range and return the range. Useful for method chaining.\n     * @param {Range~tapCallback} callback - The callback function.\n     * @returns {Range} The range.\n     */\n    tap(callback) {\n        callback(this);\n        return this;\n    }\n\n    /**\n     * Callback used by thru.\n     * @callback Range~thruCallback\n     * @param {Range} range - The range.\n     * @returns {*} The value to return from thru.\n     */\n    /**\n     * Invoke a callback on the range and return the value provided by the callback. Useful for method chaining.\n     * @param {Range~thruCallback} callback - The callback function.\n     * @returns {*} The return value of the callback.\n     */\n    thru(callback) {\n        return callback(this);\n    }\n\n    /**\n     * Get the values of each cell in the range as a 2D array.\n     * @returns {Array.<Array.<*>>} The values.\n     *//**\n     * Set the values in each cell to the result of a function called for each.\n     * @param {Range~mapCallback} callback - The callback to provide value for the cell.\n     * @returns {Range} The range.\n     *//**\n     * Sets the value in each cell to the corresponding value in the given 2D array of values.\n     * @param {Array.<Array.<*>>} values - The values to set.\n     * @returns {Range} The range.\n     *//**\n     * Set the value of all cells in the range to a single value.\n     * @param {*} value - The value to set.\n     * @returns {Range} The range.\n     */\n    value() {\n        return new ArgHandler(\"Range.value\")\n            .case(() => {\n                // Get values\n                return this.map(cell => cell.value());\n            })\n            .case('function', callback => {\n                // Set a value for the cells to the result of a function\n                return this.forEach((cell, ri, ci) => {\n                    cell.value(callback(cell, ri, ci, this));\n                });\n            })\n            .case('array', values => {\n                // Set value for the cells using an array of matching dimension\n                return this.forEach((cell, ri, ci) => {\n                    if (values[ri] && values[ri][ci] !== undefined) {\n                        cell.value(values[ri][ci]);\n                    }\n                });\n            })\n            .case('*', value => {\n                // Set the value for all cells to a single value\n                return this.forEach(cell => cell.value(value));\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Gets the parent workbook.\n     * @returns {Workbook} The parent workbook.\n     */\n    workbook() {\n        return this.sheet().workbook();\n    }\n\n    /**\n     * Find the extent of the range.\n     * @returns {undefined}\n     * @private\n     */\n    _findRangeExtent() {\n        this._minRowNumber = Math.min(this._startCell.rowNumber(), this._endCell.rowNumber());\n        this._maxRowNumber = Math.max(this._startCell.rowNumber(), this._endCell.rowNumber());\n        this._minColumnNumber = Math.min(this._startCell.columnNumber(), this._endCell.columnNumber());\n        this._maxColumnNumber = Math.max(this._startCell.columnNumber(), this._endCell.columnNumber());\n        this._numRows = this._maxRowNumber - this._minRowNumber + 1;\n        this._numColumns = this._maxColumnNumber - this._minColumnNumber + 1;\n    }\n}\n\nmodule.exports = Range;\n","\n\nconst _ = require(\"lodash\");\n\nconst RELATIONSHIP_SCHEMA_PREFIX = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/\";\n\n/**\n * A relationship collection.\n * @ignore\n */\nclass Relationships {\n    /**\n     * Creates a new instance of _Relationships.\n     * @param {{}} node - The node.\n     */\n    constructor(node) {\n        this._init(node);\n        this._getStartingId();\n    }\n\n    /**\n     * Add a new relationship.\n     * @param {string} type - The type of relationship.\n     * @param {string} target - The target of the relationship.\n     * @param {string} [targetMode] - The target mode of the relationship.\n     * @returns {{}} The new relationship.\n     */\n    add(type, target, targetMode) {\n        const node = {\n            name: \"Relationship\",\n            attributes: {\n                Id: `rId${this._nextId++}`,\n                Type: `${RELATIONSHIP_SCHEMA_PREFIX}${type}`,\n                Target: target\n            }\n        };\n\n        if (targetMode) {\n            node.attributes.TargetMode = targetMode;\n        }\n\n        this._node.children.push(node);\n        return node;\n    }\n\n    /**\n     * Find a relationship by ID.\n     * @param {string} id - The relationship ID.\n     * @returns {{}|undefined} The matching relationship or undefined if not found.\n     */\n    findById(id) {\n        return _.find(this._node.children, node => node.attributes.Id === id);\n    }\n\n    /**\n     * Find a relationship by type.\n     * @param {string} type - The type to search for.\n     * @returns {{}|undefined} The matching relationship or undefined if not found.\n     */\n    findByType(type) {\n        return _.find(this._node.children, node => node.attributes.Type === `${RELATIONSHIP_SCHEMA_PREFIX}${type}`);\n    }\n\n    /**\n     * Convert the collection to an XML object.\n     * @returns {{}|undefined} The XML or undefined if empty.\n     */\n    toXml() {\n        if (!this._node.children.length) return;\n        return this._node;\n    }\n\n    /**\n     * Get the starting relationship ID to use for new relationships.\n     * @private\n     * @returns {undefined}\n     */\n    _getStartingId() {\n        this._nextId = 1;\n        this._node.children.forEach(node => {\n            const id = parseInt(node.attributes.Id.substr(3));\n            if (id >= this._nextId) this._nextId = id + 1;\n        });\n    }\n\n    /**\n     * Initialize the node.\n     * @param {{}} [node] - The relationships node.\n     * @private\n     * @returns {undefined}\n     */\n    _init(node) {\n        if (!node) node = {\n            name: \"Relationships\",\n            attributes: {\n                xmlns: \"http://schemas.openxmlformats.org/package/2006/relationships\"\n            },\n            children: []\n        };\n\n        this._node = node;\n    }\n}\n\nmodule.exports = Relationships;\n\n/*\nxl/_rels/workbook.xml.rels\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">\n    <Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\" Target=\"styles.xml\"/>\n    <Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\" Target=\"theme/theme1.xml\"/>\n    <Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\" Target=\"worksheets/sheet1.xml\"/>\n    <Relationship Id=\"rId5\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/calcChain\" Target=\"calcChain.xml\"/>\n    <Relationship Id=\"rId4\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings\" Target=\"sharedStrings.xml\"/>\n</Relationships>\n*/\n\n","\n\n/**\n * PageBreaks\n */\nclass PageBreaks {\n    constructor(node) {\n        this._node = node;\n    }\n\n    /**\n     * add page-breaks by row/column id\n     * @param {number} id - row/column id (rowNumber/colNumber)\n     * @return {PageBreaks} the page-breaks\n     */\n    add(id) {\n        this._node.children.push({\n            name: \"brk\",\n            children: [],\n            attributes: {\n                id,\n                max: 16383,\n                man: 1\n            }\n        });\n        this._node.attributes.count++;\n        this._node.attributes.manualBreakCount++;\n\n        return this;\n    }\n\n    /**\n     * remove page-breaks by index\n     * @param {number} index - index of list\n     * @return {PageBreaks} the page-breaks\n     */\n    remove(index) {\n        const brk = this._node.children[index];\n        if (brk) {\n            this._node.children.splice(index, 1);\n            this._node.attributes.count--;\n            if (brk.man) {\n                this._node.attributes.manualBreakCount--;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * get count of the page-breaks\n     * @return {number} the page-breaks' count\n     */\n    get count() {\n        return this._node.attributes.count;\n    }\n\n    /**\n     * get list of page-breaks\n     * @return {Array} list of the page-breaks\n     */\n    get list() {\n        return this._node.children.map(brk => ({\n            id: brk.id,\n            isManual: !!brk.man\n        }));\n    }\n}\n\nmodule.exports = PageBreaks;\n","\n\nconst _ = require(\"lodash\");\n\n/**\n * A content type collection.\n * @ignore\n */\nclass ContentTypes {\n    /**\n     * Creates a new instance of ContentTypes\n     * @param {{}} node - The node.\n     */\n    constructor(node) {\n        this._node = node;\n    }\n\n    /**\n     * Add a new content type.\n     * @param {string} partName - The part name.\n     * @param {string} contentType - The content type.\n     * @returns {{}} The new content type.\n     */\n    add(partName, contentType) {\n        const node = {\n            name: \"Override\",\n            attributes: {\n                PartName: partName,\n                ContentType: contentType\n            }\n        };\n\n        this._node.children.push(node);\n        return node;\n    }\n\n    /**\n     * Find a content type by part name.\n     * @param {string} partName - The part name.\n     * @returns {{}|undefined} The matching content type or undefined if not found.\n     */\n    findByPartName(partName) {\n        return _.find(this._node.children, node => node.attributes.PartName === partName);\n    }\n\n    /**\n     * Convert the collection to an XML object.\n     * @returns {{}} The XML.\n     */\n    toXml() {\n        return this._node;\n    }\n}\n\nmodule.exports = ContentTypes;\n\n/*\n[Content_Types].xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<Types xmlns=\"http://schemas.openxmlformats.org/package/2006/content-types\">\n    <Default Extension=\"bin\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.printerSettings\"/>\n    <Default Extension=\"rels\" ContentType=\"application/vnd.openxmlformats-package.relationships+xml\"/>\n    <Default Extension=\"xml\" ContentType=\"application/xml\"/>\n    <Override PartName=\"/xl/workbook.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\"/>\n    <Override PartName=\"/xl/worksheets/sheet1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\"/>\n    <Override PartName=\"/xl/theme/theme1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.theme+xml\"/>\n    <Override PartName=\"/xl/styles.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\"/>\n    <Override PartName=\"/xl/sharedStrings.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml\"/>\n    <Override PartName=\"/xl/calcChain.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.calcChain+xml\"/>\n    <Override PartName=\"/docProps/core.xml\" ContentType=\"application/vnd.openxmlformats-package.core-properties+xml\"/>\n    <Override PartName=\"/docProps/app.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.extended-properties+xml\"/>\n</Types>\n*/\n","\n\nconst _ = require(\"lodash\");\nconst xmlq = require(\"./xmlq\");\nconst ArgHandler = require(\"./ArgHandler\");\n\n/**\n * App properties\n * @ignore\n */\nclass AppProperties {\n    /**\n     * Creates a new instance of AppProperties\n     * @param {{}} node - The node.\n     */\n    constructor(node) {\n        this._node = node;\n    }\n\n    isSecure(value) {\n        return new ArgHandler(\"Range.formula\")\n            .case(() => {\n                const docSecurityNode = xmlq.findChild(this._node, \"DocSecurity\");\n                if (!docSecurityNode) return false;\n                return docSecurityNode.children[0] === 1;\n            })\n            .case('boolean', value => {\n                const docSecurityNode = xmlq.appendChildIfNotFound(this._node, \"DocSecurity\");\n                docSecurityNode.children = [value ? 1 : 0];\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Convert the collection to an XML object.\n     * @returns {{}} The XML.\n     */\n    toXml() {\n        return this._node;\n    }\n}\n\nmodule.exports = AppProperties;\n\n/*\ndocProps/app.xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<Properties xmlns=\"http://schemas.openxmlformats.org/officeDocument/2006/extended-properties\" xmlns:vt=\"http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes\">\n    <Application>Microsoft Excel</Application>\n<DocSecurity>1</DocSecurity>\n<ScaleCrop>false</ScaleCrop>\n<HeadingPairs>\n<vt:vector size=\"2\" baseType=\"variant\">\n    <vt:variant>\n<vt:lpstr>Worksheets</vt:lpstr>\n</vt:variant>\n<vt:variant>\n<vt:i4>1</vt:i4>\n</vt:variant>\n</vt:vector>\n</HeadingPairs>\n<TitlesOfParts>\n<vt:vector size=\"1\" baseType=\"lpstr\">\n    <vt:lpstr>Sheet1</vt:lpstr>\n</vt:vector>\n</TitlesOfParts>\n<Company/>\n<LinksUpToDate>false</LinksUpToDate>\n<SharedDoc>false</SharedDoc>\n<HyperlinksChanged>false</HyperlinksChanged>\n<AppVersion>16.0300</AppVersion>\n</Properties>\n */\n","\n\nconst allowedProperties = {\n    title: \"dc:title\",\n    subject: \"dc:subject\",\n    author: \"dc:creator\",\n    creator: \"dc:creator\",\n    description: \"dc:description\",\n    keywords: \"cp:keywords\",\n    category: \"cp:category\"\n};\n\n/**\n * Core properties\n * @ignore\n */\nclass CoreProperties {\n    constructor(node) {\n        this._node = node;\n        this._properties = {};\n    }\n\n    /**\n     * Sets a specific property.\n     * @param {string} name - The name of the property.\n     * @param {*} value - The value of the property.\n     * @returns {CoreProperties} CoreProperties.\n     */\n    set(name, value) {\n        const key = name.toLowerCase();\n\n        if (typeof allowedProperties[key] === \"undefined\") {\n            throw new Error(`Unknown property name: \"${name}\"`);\n        }\n\n        this._properties[key] = value;\n\n        return this;\n    }\n\n    /**\n     * Get a specific property.\n     * @param {string} name - The name of the property.\n     * @returns {*} The property value.\n     */\n    get(name) {\n        const key = name.toLowerCase();\n\n        if (typeof allowedProperties[key] === \"undefined\") {\n            throw new Error(`Unknown property name: \"${name}\"`);\n        }\n\n        return this._properties[key];\n    }\n\n    /**\n     * Convert the collection to an XML object.\n     * @returns {{}} The XML.\n     */\n    toXml() {\n        for (const key in this._properties) {\n            if (!this._properties.hasOwnProperty(key)) continue;\n            this._node.children.push({\n                name: allowedProperties[key],\n                children: [this._properties[key]]\n            });\n        }\n\n        return this._node;\n    }\n}\n\nmodule.exports = CoreProperties;\n\n/*\ndocProps/core.xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<cp:coreProperties xmlns:cp=\"http://schemas.openxmlformats.org/package/2006/metadata/core-properties\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:dcterms=\"http://purl.org/dc/terms/\" xmlns:dcmitype=\"http://purl.org/dc/dcmitype/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n<dc:title>Title</dc:title>\n<dc:subject>Subject</dc:subject>\n<dc:creator>Creator</dc:creator>\n<cp:keywords>Keywords</cp:keywords>\n<dc:description>Description</dc:description>\n<cp:category>Category</cp:category>\n</cp:coreProperties>\n */\n","\n\nconst _ = require(\"lodash\");\n\n/**\n * The shared strings table.\n * @ignore\n */\nclass SharedStrings {\n    /**\n     * Constructs a new instance of _SharedStrings.\n     * @param {{}} node - The node.\n     */\n    constructor(node) {\n        this._stringArray = [];\n        this._indexMap = {};\n\n        this._init(node);\n        this._cacheExistingSharedStrings();\n    }\n\n    /**\n     * Gets the index for a string\n     * @param {string|Array.<{}>} string - The string or rich text array.\n     * @returns {number} The index\n     */\n    getIndexForString(string) {\n        // If the string is found in the cache, return the index.\n        const key = _.isArray(string) ? JSON.stringify(string) : string;\n        let index = this._indexMap[key];\n        if (index >= 0) return index;\n\n        // Otherwise, add it to the caches.\n        index = this._stringArray.length;\n        this._stringArray.push(string);\n        this._indexMap[key] = index;\n\n        // Append a new si node.\n        this._node.children.push({\n            name: \"si\",\n            children: _.isArray(string) ? string : [\n                {\n                    name: \"t\",\n                    attributes: { 'xml:space': \"preserve\" },\n                    children: [string]\n                }\n            ]\n        });\n\n        return index;\n    }\n\n    /**\n     * Get the string for a given index\n     * @param {number} index - The index\n     * @returns {string} The string\n     */\n    getStringByIndex(index) {\n        return this._stringArray[index];\n    }\n\n    /**\n     * Convert the collection to an XML object.\n     * @returns {{}} The XML object.\n     */\n    toXml() {\n        return this._node;\n    }\n\n    /**\n     * Store any existing values in the caches.\n     * @private\n     * @returns {undefined}\n     */\n    _cacheExistingSharedStrings() {\n        this._node.children.forEach((node, i) => {\n            const content = node.children[0];\n            if (content.name === \"t\") {\n                const string = content.children[0];\n                this._stringArray.push(string);\n                this._indexMap[string] = i;\n            } else {\n                // TODO: Properly support rich text nodes in the future. For now just store the object as a placeholder.\n                this._stringArray.push(node.children);\n                this._indexMap[JSON.stringify(node.children)] = i;\n            }\n        });\n    }\n\n    /**\n     * Initialize the node.\n     * @param {{}} [node] - The shared strings node.\n     * @private\n     * @returns {undefined}\n     */\n    _init(node) {\n        if (!node) node = {\n            name: \"sst\",\n            attributes: {\n                xmlns: \"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"\n            },\n            children: []\n        };\n\n        this._node = node;\n\n        delete this._node.attributes.count;\n        delete this._node.attributes.uniqueCount;\n    }\n}\n\nmodule.exports = SharedStrings;\n\n/*\nxl/sharedStrings.xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<sst xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" count=\"13\" uniqueCount=\"4\">\n\t<si>\n\t\t<t>Foo</t>\n\t</si>\n\t<si>\n\t\t<t>Bar</t>\n\t</si>\n\t<si>\n\t\t<t>Goo</t>\n\t</si>\n\t<si>\n\t\t<r>\n\t\t\t<t>s</t>\n\t\t</r><r>\n\t\t\t<rPr>\n\t\t\t\t<b/>\n\t\t\t\t<sz val=\"11\"/>\n\t\t\t\t<color theme=\"1\"/>\n\t\t\t\t<rFont val=\"Calibri\"/>\n\t\t\t\t<family val=\"2\"/>\n\t\t\t\t<scheme val=\"minor\"/>\n\t\t\t</rPr><t>d;</t>\n\t\t</r><r>\n\t\t\t<rPr>\n\t\t\t\t<sz val=\"11\"/>\n\t\t\t\t<color theme=\"1\"/>\n\t\t\t\t<rFont val=\"Calibri\"/>\n\t\t\t\t<family val=\"2\"/>\n\t\t\t\t<scheme val=\"minor\"/>\n\t\t\t</rPr><t>lfk;l</t>\n\t\t</r>\n\t</si>\n</sst>\n*/\n","\n\nconst _ = require(\"lodash\");\nconst xmlq = require(\"./xmlq\");\nconst Style = require(\"./Style\");\n\n/**\n * Standard number format codes\n * Taken from http://polymathprogrammer.com/2011/02/15/built-in-styles-for-excel-open-xml/\n * @private\n */\nconst STANDARD_CODES = {\n    0: 'General',\n    1: '0',\n    2: '0.00',\n    3: '#,##0',\n    4: '#,##0.00',\n    9: '0%',\n    10: '0.00%',\n    11: '0.00E+00',\n    12: '# ?/?',\n    13: '# ??/??',\n    14: 'mm-dd-yy',\n    15: 'd-mmm-yy',\n    16: 'd-mmm',\n    17: 'mmm-yy',\n    18: 'h:mm AM/PM',\n    19: 'h:mm:ss AM/PM',\n    20: 'h:mm',\n    21: 'h:mm:ss',\n    22: 'm/d/yy h:mm',\n    37: '#,##0 ;(#,##0)',\n    38: '#,##0 ;[Red](#,##0)',\n    39: '#,##0.00;(#,##0.00)',\n    40: '#,##0.00;[Red](#,##0.00)',\n    45: 'mm:ss',\n    46: '[h]:mm:ss',\n    47: 'mmss.0',\n    48: '##0.0E+0',\n    49: '@'\n};\n\n/**\n * The starting ID for custom number formats. The first 163 indexes are reserved.\n * @private\n */\nconst STARTING_CUSTOM_NUMBER_FORMAT_ID = 164;\n\n/**\n * A style sheet.\n * @ignore\n */\nclass StyleSheet {\n    /**\n     * Creates an instance of _StyleSheet.\n     * @param {string} node - The style sheet node\n     */\n    constructor(node) {\n        this._init(node);\n        this._cacheNumberFormats();\n    }\n\n    /**\n     * Create a style.\n     * @param {number} [sourceId] - The source style ID to copy, if provided.\n     * @returns {Style} The style.\n     */\n    createStyle(sourceId) {\n        let fontNode, fillNode, borderNode, xfNode;\n        if (sourceId >= 0) {\n            const sourceXfNode = this._cellXfsNode.children[sourceId];\n            xfNode = _.cloneDeep(sourceXfNode);\n\n            if (sourceXfNode.attributes.applyFont) {\n                const fontId = sourceXfNode.attributes.fontId;\n                fontNode = _.cloneDeep(this._fontsNode.children[fontId]);\n            }\n\n            if (sourceXfNode.attributes.applyFill) {\n                const fillId = sourceXfNode.attributes.fillId;\n                fillNode = _.cloneDeep(this._fillsNode.children[fillId]);\n            }\n\n            if (sourceXfNode.attributes.applyBorder) {\n                const borderId = sourceXfNode.attributes.borderId;\n                borderNode = _.cloneDeep(this._bordersNode.children[borderId]);\n            }\n        }\n\n        if (!fontNode) fontNode = { name: \"font\", attributes: {}, children: [] };\n        this._fontsNode.children.push(fontNode);\n\n        if (!fillNode) fillNode = { name: \"fill\", attributes: {}, children: [] };\n        this._fillsNode.children.push(fillNode);\n\n        // The border sides must be in order\n        if (!borderNode) borderNode = { name: \"border\", attributes: {}, children: [] };\n        borderNode.children = [\n            xmlq.findChild(borderNode, \"left\") || { name: \"left\", attributes: {}, children: [] },\n            xmlq.findChild(borderNode, \"right\") || { name: \"right\", attributes: {}, children: [] },\n            xmlq.findChild(borderNode, \"top\") || { name: \"top\", attributes: {}, children: [] },\n            xmlq.findChild(borderNode, \"bottom\") || { name: \"bottom\", attributes: {}, children: [] },\n            xmlq.findChild(borderNode, \"diagonal\") || { name: \"diagonal\", attributes: {}, children: [] }\n        ];\n        this._bordersNode.children.push(borderNode);\n\n        if (!xfNode) xfNode = { name: \"xf\", attributes: {}, children: [] };\n        _.assign(xfNode.attributes, {\n            fontId: this._fontsNode.children.length - 1,\n            fillId: this._fillsNode.children.length - 1,\n            borderId: this._bordersNode.children.length - 1,\n            applyFont: 1,\n            applyFill: 1,\n            applyBorder: 1\n        });\n\n        this._cellXfsNode.children.push(xfNode);\n\n        return new Style(this, this._cellXfsNode.children.length - 1, xfNode, fontNode, fillNode, borderNode);\n    }\n\n    /**\n     * Get the number format code for a given ID.\n     * @param {number} id - The number format ID.\n     * @returns {string} The format code.\n     */\n    getNumberFormatCode(id) {\n        return this._numberFormatCodesById[id];\n    }\n\n    /**\n     * Get the nuumber format ID for a given code.\n     * @param {string} code - The format code.\n     * @returns {number} The number format ID.\n     */\n    getNumberFormatId(code) {\n        let id = this._numberFormatIdsByCode[code];\n        if (id === undefined) {\n            id = this._nextNumFormatId++;\n            this._numberFormatCodesById[id] = code;\n            this._numberFormatIdsByCode[code] = id;\n\n            this._numFmtsNode.children.push({\n                name: 'numFmt',\n                attributes: {\n                    numFmtId: id,\n                    formatCode: code\n                }\n            });\n        }\n\n        return id;\n    }\n\n    /**\n     * Convert the style sheet to an XML object.\n     * @returns {{}} The XML form.\n     * @ignore\n     */\n    toXml() {\n        return this._node;\n    }\n\n    /**\n     * Cache the number format codes\n     * @returns {undefined}\n     * @private\n     */\n    _cacheNumberFormats() {\n        // Load the standard number format codes into the caches.\n        this._numberFormatCodesById = {};\n        this._numberFormatIdsByCode = {};\n        for (const id in STANDARD_CODES) {\n            if (!STANDARD_CODES.hasOwnProperty(id)) continue;\n            const code = STANDARD_CODES[id];\n            this._numberFormatCodesById[id] = code;\n            this._numberFormatIdsByCode[code] = parseInt(id);\n        }\n\n        // Set the next number format code.\n        this._nextNumFormatId = STARTING_CUSTOM_NUMBER_FORMAT_ID;\n\n        // If there are custom number formats, cache them all and update the next num as needed.\n        this._numFmtsNode.children.forEach(node => {\n            const id = node.attributes.numFmtId;\n            const code = node.attributes.formatCode;\n            this._numberFormatCodesById[id] = code;\n            this._numberFormatIdsByCode[code] = id;\n            if (id >= this._nextNumFormatId) this._nextNumFormatId = id + 1;\n        });\n    }\n\n    /**\n     * Initialize the style sheet node.\n     * @param {{}} [node] - The node\n     * @returns {undefined}\n     * @private\n     */\n    _init(node) {\n        this._node = node;\n\n        // Cache the refs to the collections.\n        this._numFmtsNode = xmlq.findChild(this._node, \"numFmts\");\n        this._fontsNode = xmlq.findChild(this._node, \"fonts\");\n        this._fillsNode = xmlq.findChild(this._node, \"fills\");\n        this._bordersNode = xmlq.findChild(this._node, \"borders\");\n        this._cellXfsNode = xmlq.findChild(this._node, \"cellXfs\");\n\n        if (!this._numFmtsNode) {\n            this._numFmtsNode = {\n                name: \"numFmts\",\n                attributes: {},\n                children: []\n            };\n\n            // Number formats need to be before the others.\n            xmlq.insertBefore(this._node, this._numFmtsNode, this._fontsNode);\n        }\n\n        // Remove the optional counts so we don't have to keep them up to date.\n        delete this._numFmtsNode.attributes.count;\n        delete this._fontsNode.attributes.count;\n        delete this._fillsNode.attributes.count;\n        delete this._bordersNode.attributes.count;\n        delete this._cellXfsNode.attributes.count;\n    }\n}\n\nmodule.exports = StyleSheet;\n\n/*\nxl/styles.xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<styleSheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac x16r2\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\" xmlns:x16r2=\"http://schemas.microsoft.com/office/spreadsheetml/2015/02/main\">\n    <numFmts count=\"1\">\n        <numFmt numFmtId=\"164\" formatCode=\"#,##0_);[Red]\\(#,##0\\)\\)\"/>\n    </numFmts>\n    <fonts count=\"1\" x14ac:knownFonts=\"1\">\n        <font>\n            <sz val=\"11\"/>\n            <color theme=\"1\"/>\n            <name val=\"Calibri\"/>\n            <family val=\"2\"/>\n            <scheme val=\"minor\"/>\n        </font>\n    </fonts>\n    <fills count=\"11\">\n        <fill>\n            <patternFill patternType=\"none\"/>\n        </fill>\n        <fill>\n            <patternFill patternType=\"gray125\"/>\n        </fill>\n        <fill>\n            <patternFill patternType=\"solid\">\n                <fgColor rgb=\"FFC00000\"/>\n                <bgColor indexed=\"64\"/>\n            </patternFill>\n        </fill>\n        <fill>\n            <patternFill patternType=\"lightDown\">\n                <fgColor theme=\"4\"/>\n                <bgColor rgb=\"FFC00000\"/>\n            </patternFill>\n        </fill>\n        <fill>\n            <gradientFill degree=\"90\">\n                <stop position=\"0\">\n                    <color theme=\"0\"/>\n                </stop>\n                <stop position=\"1\">\n                    <color theme=\"4\"/>\n                </stop>\n            </gradientFill>\n        </fill>\n        <fill>\n            <gradientFill>\n                <stop position=\"0\">\n                    <color theme=\"0\"/>\n                </stop>\n                <stop position=\"1\">\n                    <color theme=\"4\"/>\n                </stop>\n            </gradientFill>\n        </fill>\n        <fill>\n            <gradientFill degree=\"45\">\n                <stop position=\"0\">\n                    <color theme=\"0\"/>\n                </stop>\n                <stop position=\"1\">\n                    <color theme=\"4\"/>\n                </stop>\n            </gradientFill>\n        </fill>\n        <fill>\n            <gradientFill degree=\"135\">\n                <stop position=\"0\">\n                    <color theme=\"0\"/>\n                </stop>\n                <stop position=\"1\">\n                    <color theme=\"4\"/>\n                </stop>\n            </gradientFill>\n        </fill>\n        <fill>\n            <gradientFill type=\"path\">\n                <stop position=\"0\">\n                    <color theme=\"0\"/>\n                </stop>\n                <stop position=\"1\">\n                    <color theme=\"4\"/>\n                </stop>\n            </gradientFill>\n        </fill>\n        <fill>\n            <gradientFill type=\"path\" left=\"0.5\" right=\"0.5\" top=\"0.5\" bottom=\"0.5\">\n                <stop position=\"0\">\n                    <color theme=\"0\"/>\n                </stop>\n                <stop position=\"1\">\n                    <color theme=\"4\"/>\n                </stop>\n            </gradientFill>\n        </fill>\n        <fill>\n            <gradientFill degree=\"270\">\n                <stop position=\"0\">\n                    <color theme=\"0\"/>\n                </stop>\n                <stop position=\"1\">\n                    <color theme=\"4\"/>\n                </stop>\n            </gradientFill>\n        </fill>\n    </fills>\n    <borders count=\"10\">\n        <border>\n            <left/>\n            <right/>\n            <top/>\n            <bottom/>\n            <diagonal/>\n        </border>\n        <border diagonalDown=\"1\">\n            <left/>\n            <right/>\n            <top/>\n            <bottom/>\n            <diagonal style=\"hair\">\n                <color auto=\"1\"/>\n            </diagonal>\n        </border>\n        <border diagonalDown=\"1\">\n            <left/>\n            <right/>\n            <top/>\n            <bottom/>\n            <diagonal style=\"dotted\">\n                <color auto=\"1\"/>\n            </diagonal>\n        </border>\n        <border diagonalDown=\"1\">\n            <left/>\n            <right/>\n            <top/>\n            <bottom/>\n            <diagonal style=\"dashDotDot\">\n                <color auto=\"1\"/>\n            </diagonal>\n        </border>\n        <border diagonalDown=\"1\">\n            <left/>\n            <right/>\n            <top/>\n            <bottom/>\n            <diagonal style=\"dashDot\">\n                <color auto=\"1\"/>\n            </diagonal>\n        </border>\n        <border diagonalDown=\"1\">\n            <left/>\n            <right/>\n            <top/>\n            <bottom/>\n            <diagonal style=\"dashed\">\n                <color auto=\"1\"/>\n            </diagonal>\n        </border>\n        <border diagonalUp=\"1\">\n            <left/>\n            <right/>\n            <top/>\n            <bottom/>\n            <diagonal style=\"mediumDashDotDot\">\n                <color auto=\"1\"/>\n            </diagonal>\n        </border>\n        <border diagonalUp=\"1\">\n            <left/>\n            <right/>\n            <top/>\n            <bottom/>\n            <diagonal style=\"slantDashDot\">\n                <color auto=\"1\"/>\n            </diagonal>\n        </border>\n        <border diagonalUp=\"1\">\n            <left/>\n            <right/>\n            <top/>\n            <bottom/>\n            <diagonal style=\"mediumDashDot\">\n                <color auto=\"1\"/>\n            </diagonal>\n        </border>\n        <border diagonalUp=\"1\">\n            <left/>\n            <right/>\n            <top/>\n            <bottom/>\n            <diagonal style=\"mediumDashed\">\n                <color auto=\"1\"/>\n            </diagonal>\n        </border>\n    </borders>\n    <cellStyleXfs count=\"1\">\n        <xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\"/>\n    </cellStyleXfs>\n    <cellXfs count=\"19\">\n        <xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" xfId=\"0\"/>\n        <xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"1\" xfId=\"0\" applyBorder=\"1\"/>\n        <xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"2\" xfId=\"0\" applyBorder=\"1\"/>\n        <xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"3\" xfId=\"0\" applyBorder=\"1\"/>\n        <xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"4\" xfId=\"0\" applyBorder=\"1\"/>\n        <xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"5\" xfId=\"0\" applyBorder=\"1\"/>\n        <xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"6\" xfId=\"0\" applyBorder=\"1\"/>\n        <xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"7\" xfId=\"0\" applyBorder=\"1\"/>\n        <xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"8\" xfId=\"0\" applyBorder=\"1\"/>\n        <xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"9\" xfId=\"0\" applyBorder=\"1\"/>\n        <xf numFmtId=\"0\" fontId=\"0\" fillId=\"2\" borderId=\"0\" xfId=\"0\" applyFill=\"1\" applyBorder=\"1\"/>\n        <xf numFmtId=\"0\" fontId=\"0\" fillId=\"3\" borderId=\"0\" xfId=\"0\" applyFill=\"1\"/>\n        <xf numFmtId=\"0\" fontId=\"0\" fillId=\"4\" borderId=\"0\" xfId=\"0\" applyFill=\"1\"/>\n        <xf numFmtId=\"0\" fontId=\"0\" fillId=\"5\" borderId=\"0\" xfId=\"0\" applyFill=\"1\"/>\n        <xf numFmtId=\"0\" fontId=\"0\" fillId=\"6\" borderId=\"0\" xfId=\"0\" applyFill=\"1\"/>\n        <xf numFmtId=\"0\" fontId=\"0\" fillId=\"7\" borderId=\"0\" xfId=\"0\" applyFill=\"1\"/>\n        <xf numFmtId=\"0\" fontId=\"0\" fillId=\"8\" borderId=\"0\" xfId=\"0\" applyFill=\"1\"/>\n        <xf numFmtId=\"0\" fontId=\"0\" fillId=\"9\" borderId=\"0\" xfId=\"0\" applyFill=\"1\"/>\n        <xf numFmtId=\"0\" fontId=\"0\" fillId=\"10\" borderId=\"0\" xfId=\"0\" applyFill=\"1\"/>\n    </cellXfs>\n    <cellStyles count=\"1\">\n        <cellStyle name=\"Normal\" xfId=\"0\" builtinId=\"0\"/>\n    </cellStyles>\n    <dxfs count=\"0\"/>\n    <tableStyles count=\"0\" defaultTableStyle=\"TableStyleMedium2\" defaultPivotStyle=\"PivotStyleLight16\"/>\n    <extLst>\n        <ext uri=\"{EB79DEF2-80B8-43e5-95BD-54CBDDF9020C}\" xmlns:x14=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/main\">\n            <x14:slicerStyles defaultSlicerStyle=\"SlicerStyleLight1\"/>\n        </ext>\n        <ext uri=\"{9260A510-F301-46a8-8635-F512D64BE5F5}\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\">\n            <x15:timelineStyles defaultTimelineStyle=\"TimeSlicerStyleLight1\"/>\n        </ext>\n    </extLst>\n</styleSheet>\n*/\n","\n\n/**\n * OOXML uses the CFB file format with Agile Encryption. The details of the encryption are here:\n * https://msdn.microsoft.com/en-us/library/dd950165(v=office.12).aspx\n *\n * Helpful guidance also take from this Github project:\n * https://github.com/nolze/ms-offcrypto-tool\n */\n\nconst _ = require(\"lodash\");\nconst cfb = require(\"cfb\");\nconst crypto = require(\"crypto\");\nconst externals = require(\"./externals\");\nconst XmlParser = require(\"./XmlParser\");\nconst XmlBuilder = require(\"./XmlBuilder\");\nconst xmlq = require(\"./xmlq\");\n\nconst ENCRYPTION_INFO_PREFIX = Buffer.from([0x04, 0x00, 0x04, 0x00, 0x40, 0x00, 0x00, 0x00]); // First 4 bytes are the version number, second 4 bytes are reserved.\nconst PACKAGE_ENCRYPTION_CHUNK_SIZE = 4096;\nconst PACKAGE_OFFSET = 8; // First 8 bytes are the size of the stream\n\n// Block keys used for encryption\nconst BLOCK_KEYS = {\n    dataIntegrity: {\n        hmacKey: Buffer.from([0x5f, 0xb2, 0xad, 0x01, 0x0c, 0xb9, 0xe1, 0xf6]),\n        hmacValue: Buffer.from([0xa0, 0x67, 0x7f, 0x02, 0xb2, 0x2c, 0x84, 0x33])\n    },\n    key: Buffer.from([0x14, 0x6e, 0x0b, 0xe7, 0xab, 0xac, 0xd0, 0xd6]),\n    verifierHash: {\n        input: Buffer.from([0xfe, 0xa7, 0xd2, 0x76, 0x3b, 0x4b, 0x9e, 0x79]),\n        value: Buffer.from([0xd7, 0xaa, 0x0f, 0x6d, 0x30, 0x61, 0x34, 0x4e])\n    }\n};\n\n/**\n * Encrypts/decrypts XLSXs.\n * @private\n */\nclass Encryptor {\n    /**\n     * Encrypt the data with the password.\n     * @param {Buffer} data - The data to encrypt\n     * @param {string} password - The password\n     * @returns {Buffer} The encrypted data\n     */\n    encrypt(data, password) {\n        // Generate a random key to use to encrypt the document. Excel uses 32 bytes. We'll use the password to encrypt this key.\n        // N.B. The number of bits needs to correspond to an algorithm available in crypto (e.g. aes-256-cbc).\n        const packageKey = crypto.randomBytes(32);\n\n        // Create the encryption info. We'll use this for all of the encryption operations and for building the encryption info XML entry\n        const encryptionInfo = {\n            package: { // Info on the encryption of the package.\n                cipherAlgorithm: 'AES', // Cipher algorithm to use. Excel uses AES.\n                cipherChaining: 'ChainingModeCBC', // Cipher chaining mode to use. Excel uses CBC.\n                saltValue: crypto.randomBytes(16), // Random value to use as encryption salt. Excel uses 16 bytes.\n                hashAlgorithm: 'SHA512', // Hash algorithm to use. Excel uses SHA512.\n                hashSize: 64, // The size of the hash in bytes. SHA512 results in 64-byte hashes\n                blockSize: 16, // The number of bytes used to encrypt one block of data. It MUST be at least 2, no greater than 4096, and a multiple of 2. Excel uses 16\n                keyBits: packageKey.length * 8 // The number of bits in the package key.\n            },\n            key: { // Info on the encryption of the package key.\n                cipherAlgorithm: 'AES', // Cipher algorithm to use. Excel uses AES.\n                cipherChaining: 'ChainingModeCBC', // Cipher chaining mode to use. Excel uses CBC.\n                saltValue: crypto.randomBytes(16), // Random value to use as encryption salt. Excel uses 16 bytes.\n                hashAlgorithm: 'SHA512', // Hash algorithm to use. Excel uses SHA512.\n                hashSize: 64, // The size of the hash in bytes. SHA512 results in 64-byte hashes\n                blockSize: 16, // The number of bytes used to encrypt one block of data. It MUST be at least 2, no greater than 4096, and a multiple of 2. Excel uses 16\n                spinCount: 100000, // The number of times to iterate on a hash of a password. It MUST NOT be greater than 10,000,000. Excel uses 100,000.\n                keyBits: 256 // The length of the key to generate from the password. Must be a multiple of 8. Excel uses 256.\n            }\n        };\n\n        /* Package Encryption */\n\n        // Encrypt package using the package key.\n        const encryptedPackage = this._cryptPackage(\n            true,\n            encryptionInfo.package.cipherAlgorithm,\n            encryptionInfo.package.cipherChaining,\n            encryptionInfo.package.hashAlgorithm,\n            encryptionInfo.package.blockSize,\n            encryptionInfo.package.saltValue,\n            packageKey,\n            data\n        );\n\n        /* Data Integrity */\n\n        // Create the data integrity fields used by clients for integrity checks.\n        // First generate a random array of bytes to use in HMAC. The docs say to use the same length as the key salt, but Excel seems to use 64.\n        const hmacKey = crypto.randomBytes(64);\n\n        // Then create an initialization vector using the package encryption info and the appropriate block key.\n        const hmacKeyIV = this._createIV(\n            encryptionInfo.package.hashAlgorithm,\n            encryptionInfo.package.saltValue,\n            encryptionInfo.package.blockSize,\n            BLOCK_KEYS.dataIntegrity.hmacKey\n        );\n\n        // Use the package key and the IV to encrypt the HMAC key\n        const encryptedHmacKey = this._crypt(\n            true,\n            encryptionInfo.package.cipherAlgorithm,\n            encryptionInfo.package.cipherChaining,\n            packageKey,\n            hmacKeyIV,\n            hmacKey);\n\n        // Now create the HMAC\n        const hmacValue = this._hmac(encryptionInfo.package.hashAlgorithm, hmacKey, encryptedPackage);\n\n        // Next generate an initialization vector for encrypting the resulting HMAC value.\n        const hmacValueIV = this._createIV(\n            encryptionInfo.package.hashAlgorithm,\n            encryptionInfo.package.saltValue,\n            encryptionInfo.package.blockSize,\n            BLOCK_KEYS.dataIntegrity.hmacValue\n        );\n\n        // Now encrypt the value\n        const encryptedHmacValue = this._crypt(\n            true,\n            encryptionInfo.package.cipherAlgorithm,\n            encryptionInfo.package.cipherChaining,\n            packageKey,\n            hmacValueIV,\n            hmacValue\n        );\n\n        // Put the encrypted key and value on the encryption info\n        encryptionInfo.dataIntegrity = {\n            encryptedHmacKey,\n            encryptedHmacValue\n        };\n\n        /* Key Encryption */\n\n        // Convert the password to an encryption key\n        const key = this._convertPasswordToKey(\n            password,\n            encryptionInfo.key.hashAlgorithm,\n            encryptionInfo.key.saltValue,\n            encryptionInfo.key.spinCount,\n            encryptionInfo.key.keyBits,\n            BLOCK_KEYS.key\n        );\n\n        // Encrypt the package key with the\n        encryptionInfo.key.encryptedKeyValue = this._crypt(\n            true,\n            encryptionInfo.key.cipherAlgorithm,\n            encryptionInfo.key.cipherChaining,\n            key,\n            encryptionInfo.key.saltValue,\n            packageKey);\n\n        /* Verifier hash */\n\n        // Create a random byte array for hashing\n        const verifierHashInput = crypto.randomBytes(16);\n\n        // Create an encryption key from the password for the input\n        const verifierHashInputKey = this._convertPasswordToKey(\n            password,\n            encryptionInfo.key.hashAlgorithm,\n            encryptionInfo.key.saltValue,\n            encryptionInfo.key.spinCount,\n            encryptionInfo.key.keyBits,\n            BLOCK_KEYS.verifierHash.input\n        );\n\n        // Use the key to encrypt the verifier input\n        encryptionInfo.key.encryptedVerifierHashInput = this._crypt(\n            true,\n            encryptionInfo.key.cipherAlgorithm,\n            encryptionInfo.key.cipherChaining,\n            verifierHashInputKey,\n            encryptionInfo.key.saltValue,\n            verifierHashInput\n        );\n\n        // Create a hash of the input\n        const verifierHashValue = this._hash(encryptionInfo.key.hashAlgorithm, verifierHashInput);\n\n        // Create an encryption key from the password for the hash\n        const verifierHashValueKey = this._convertPasswordToKey(\n            password,\n            encryptionInfo.key.hashAlgorithm,\n            encryptionInfo.key.saltValue,\n            encryptionInfo.key.spinCount,\n            encryptionInfo.key.keyBits,\n            BLOCK_KEYS.verifierHash.value\n        );\n\n        // Use the key to encrypt the hash value\n        encryptionInfo.key.encryptedVerifierHashValue = this._crypt(\n            true,\n            encryptionInfo.key.cipherAlgorithm,\n            encryptionInfo.key.cipherChaining,\n            verifierHashValueKey,\n            encryptionInfo.key.saltValue,\n            verifierHashValue\n        );\n\n        // Build the encryption info buffer\n        const encryptionInfoBuffer = this._buildEncryptionInfo(encryptionInfo);\n\n        // Create a new CFB\n        let output = cfb.utils.cfb_new();\n\n        // Add the encryption info and encrypted package\n        cfb.utils.cfb_add(output, \"EncryptionInfo\", encryptionInfoBuffer);\n        cfb.utils.cfb_add(output, \"EncryptedPackage\", encryptedPackage);\n\n        // Delete the SheetJS entry that is added at initialization\n        cfb.utils.cfb_del(output, \"\\u0001Sh33tJ5\");\n\n        // Write to a buffer and return\n        output = cfb.write(output);\n\n        // The cfb library writes to a Uint8array in the browser. Convert to a Buffer.\n        if (!Buffer.isBuffer(output)) output = Buffer.from(output);\n\n        return output;\n    }\n\n    /**\n     * Decrypt the data with the given password\n     * @param {Buffer} data - The data to decrypt\n     * @param {string} password - The password\n     * @returns {Promise.<Buffer>} The decrypted data\n     */\n    decryptAsync(data, password) {\n        // Parse the CFB input and pull out the encryption info and encrypted package entries.\n        const parsed = cfb.parse(data);\n        let encryptionInfoBuffer = _.find(parsed.FileIndex, { name: \"EncryptionInfo\" }).content;\n        let encryptedPackageBuffer = _.find(parsed.FileIndex, { name: \"EncryptedPackage\" }).content;\n\n        // In the browser the CFB content is an array. Convert to a Buffer.\n        if (!Buffer.isBuffer(encryptionInfoBuffer)) encryptionInfoBuffer = Buffer.from(encryptionInfoBuffer);\n        if (!Buffer.isBuffer(encryptedPackageBuffer)) encryptedPackageBuffer = Buffer.from(encryptedPackageBuffer);\n\n        return externals.Promise.resolve()\n            .then(() => this._parseEncryptionInfoAsync(encryptionInfoBuffer)) // Parse the encryption info XML into an object\n            .then(encryptionInfo => {\n                // Convert the password into an encryption key\n                const key = this._convertPasswordToKey(\n                    password,\n                    encryptionInfo.key.hashAlgorithm,\n                    encryptionInfo.key.saltValue,\n                    encryptionInfo.key.spinCount,\n                    encryptionInfo.key.keyBits,\n                    BLOCK_KEYS.key\n                );\n\n                // Use the key to decrypt the package key\n                const packageKey = this._crypt(\n                    false,\n                    encryptionInfo.key.cipherAlgorithm,\n                    encryptionInfo.key.cipherChaining,\n                    key,\n                    encryptionInfo.key.saltValue,\n                    encryptionInfo.key.encryptedKeyValue\n                );\n\n                // Use the package key to decrypt the package\n                return this._cryptPackage(\n                    false,\n                    encryptionInfo.package.cipherAlgorithm,\n                    encryptionInfo.package.cipherChaining,\n                    encryptionInfo.package.hashAlgorithm,\n                    encryptionInfo.package.blockSize,\n                    encryptionInfo.package.saltValue,\n                    packageKey,\n                    encryptedPackageBuffer);\n            });\n    }\n\n    /**\n     * Build the encryption info XML/buffer\n     * @param {{}} encryptionInfo - The encryption info object\n     * @returns {Buffer} The buffer\n     * @private\n     */\n    _buildEncryptionInfo(encryptionInfo) {\n        // Map the object into the appropriate XML structure. Buffers are encoded in base 64.\n        const encryptionInfoNode = {\n            name: \"encryption\",\n            attributes: {\n                xmlns: \"http://schemas.microsoft.com/office/2006/encryption\",\n                'xmlns:p': \"http://schemas.microsoft.com/office/2006/keyEncryptor/password\",\n                'xmlns:c': \"http://schemas.microsoft.com/office/2006/keyEncryptor/certificate\"\n            },\n            children: [\n                {\n                    name: \"keyData\",\n                    attributes: {\n                        saltSize: encryptionInfo.package.saltValue.length,\n                        blockSize: encryptionInfo.package.blockSize,\n                        keyBits: encryptionInfo.package.keyBits,\n                        hashSize: encryptionInfo.package.hashSize,\n                        cipherAlgorithm: encryptionInfo.package.cipherAlgorithm,\n                        cipherChaining: encryptionInfo.package.cipherChaining,\n                        hashAlgorithm: encryptionInfo.package.hashAlgorithm,\n                        saltValue: encryptionInfo.package.saltValue.toString(\"base64\")\n                    }\n                },\n                {\n                    name: \"dataIntegrity\",\n                    attributes: {\n                        encryptedHmacKey: encryptionInfo.dataIntegrity.encryptedHmacKey.toString(\"base64\"),\n                        encryptedHmacValue: encryptionInfo.dataIntegrity.encryptedHmacValue.toString(\"base64\")\n                    }\n                },\n                {\n                    name: \"keyEncryptors\",\n                    children: [\n                        {\n                            name: \"keyEncryptor\",\n                            attributes: {\n                                uri: \"http://schemas.microsoft.com/office/2006/keyEncryptor/password\"\n                            },\n                            children: [\n                                {\n                                    name: \"p:encryptedKey\",\n                                    attributes: {\n                                        spinCount: encryptionInfo.key.spinCount,\n                                        saltSize: encryptionInfo.key.saltValue.length,\n                                        blockSize: encryptionInfo.key.blockSize,\n                                        keyBits: encryptionInfo.key.keyBits,\n                                        hashSize: encryptionInfo.key.hashSize,\n                                        cipherAlgorithm: encryptionInfo.key.cipherAlgorithm,\n                                        cipherChaining: encryptionInfo.key.cipherChaining,\n                                        hashAlgorithm: encryptionInfo.key.hashAlgorithm,\n                                        saltValue: encryptionInfo.key.saltValue.toString(\"base64\"),\n                                        encryptedVerifierHashInput: encryptionInfo.key.encryptedVerifierHashInput.toString(\"base64\"),\n                                        encryptedVerifierHashValue: encryptionInfo.key.encryptedVerifierHashValue.toString(\"base64\"),\n                                        encryptedKeyValue: encryptionInfo.key.encryptedKeyValue.toString(\"base64\")\n                                    }\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        };\n\n        // Convert to an XML string\n        const xmlBuilder = new XmlBuilder();\n        const encryptionInfoXml = xmlBuilder.build(encryptionInfoNode);\n\n        // Convert to a buffer and prefix with the appropriate bytes\n        return Buffer.concat([ENCRYPTION_INFO_PREFIX, Buffer.from(encryptionInfoXml, \"utf8\")]);\n    }\n\n    /**\n     * Parse the encryption info from the XML/buffer\n     * @param {Buffer} buffer - The buffer\n     * @returns {Promise.<{}>} The parsed encryption info object\n     * @private\n     */\n    _parseEncryptionInfoAsync(buffer) {\n        // Pull off the prefix and convert to string\n        const xml = buffer.slice(ENCRYPTION_INFO_PREFIX.length).toString(\"utf8\");\n\n        // Parse the XML\n        const xmlParser = new XmlParser();\n        return xmlParser.parseAsync(xml)\n            .then(doc => {\n                // Pull out the relevant values for decryption and return\n                const keyDataNode = xmlq.findChild(doc, \"keyData\");\n                const keyEncryptorsNode = xmlq.findChild(doc, \"keyEncryptors\");\n                const keyEncryptorNode = xmlq.findChild(keyEncryptorsNode, \"keyEncryptor\");\n                const encryptedKeyNode = xmlq.findChild(keyEncryptorNode, \"p:encryptedKey\");\n\n                return {\n                    package: {\n                        cipherAlgorithm: keyDataNode.attributes.cipherAlgorithm,\n                        cipherChaining: keyDataNode.attributes.cipherChaining,\n                        saltValue: Buffer.from(keyDataNode.attributes.saltValue, \"base64\"),\n                        hashAlgorithm: keyDataNode.attributes.hashAlgorithm,\n                        blockSize: keyDataNode.attributes.blockSize\n                    },\n                    key: {\n                        encryptedKeyValue: Buffer.from(encryptedKeyNode.attributes.encryptedKeyValue, \"base64\"),\n                        cipherAlgorithm: encryptedKeyNode.attributes.cipherAlgorithm,\n                        cipherChaining: encryptedKeyNode.attributes.cipherChaining,\n                        saltValue: Buffer.from(encryptedKeyNode.attributes.saltValue, \"base64\"),\n                        hashAlgorithm: encryptedKeyNode.attributes.hashAlgorithm,\n                        spinCount: encryptedKeyNode.attributes.spinCount,\n                        keyBits: encryptedKeyNode.attributes.keyBits\n                    }\n                };\n            });\n    }\n\n    /**\n     * Calculate a hash of the concatenated buffers with the given algorithm.\n     * @param {string} algorithm - The hash algorithm.\n     * @param {Array.<Buffer>} buffers - The buffers to concat and hash\n     * @returns {Buffer} The hash\n     * @private\n     */\n    _hash(algorithm, ...buffers) {\n        algorithm = algorithm.toLowerCase();\n        const hashes = crypto.getHashes();\n        if (hashes.indexOf(algorithm) < 0) throw new Error(`Hash algorithm '${algorithm}' not supported!`);\n\n        const hash = crypto.createHash(algorithm);\n        hash.update(Buffer.concat(buffers));\n        return hash.digest();\n    }\n\n    /**\n     * Calculate an HMAC of the concatenated buffers with the given algorithm and key\n     * @param {string} algorithm - The algorithm.\n     * @param {string} key - The key\n     * @param {Array.<Buffer>} buffers - The buffer to concat and HMAC\n     * @returns {Buffer} The HMAC\n     * @private\n     */\n    _hmac(algorithm, key, ...buffers) {\n        algorithm = algorithm.toLowerCase();\n        const hashes = crypto.getHashes();\n        if (hashes.indexOf(algorithm) < 0) throw new Error(`HMAC algorithm '${algorithm}' not supported!`);\n\n        const hmac = crypto.createHmac(algorithm, key);\n        hmac.update(Buffer.concat(buffers));\n        return hmac.digest();\n    }\n\n    /**\n     * Encrypt/decrypt input\n     * @param {boolean} encrypt - True to encrypt, false to decrypt\n     * @param {string} cipherAlgorithm - The cipher algorithm\n     * @param {sring} cipherChaining - The cipher chaining mode\n     * @param {Buffer} key - The encryption key\n     * @param {Buffer} iv - The initialization vector\n     * @param {Buffer} input - The input\n     * @returns {Buffer} The output\n     * @private\n     */\n    _crypt(encrypt, cipherAlgorithm, cipherChaining, key, iv, input) {\n        let algorithm = `${cipherAlgorithm.toLowerCase()}-${key.length * 8}`;\n        if (cipherChaining === 'ChainingModeCBC') algorithm += '-cbc';\n        else throw new Error(`Unknown cipher chaining: ${cipherChaining}`);\n\n        const cipher = crypto[encrypt ? 'createCipheriv' : 'createDecipheriv'](algorithm, key, iv);\n        cipher.setAutoPadding(false);\n        let output = cipher.update(input);\n        output = Buffer.concat([output, cipher.final()]);\n        return output;\n    }\n\n    /**\n     * Encrypt/decrypt the package\n     * @param {boolean} encrypt - True to encrypt, false to decrypt\n     * @param {string} cipherAlgorithm - The cipher algorithm\n     * @param {string} cipherChaining - The cipher chaining mode\n     * @param {string} hashAlgorithm - The hash algorithm\n     * @param {number} blockSize - The IV block size\n     * @param {Buffer} saltValue - The salt\n     * @param {Buffer} key - The encryption key\n     * @param {Buffer} input - The package input\n     * @returns {Buffer} The output\n     * @private\n     */\n    _cryptPackage(encrypt, cipherAlgorithm, cipherChaining, hashAlgorithm, blockSize, saltValue, key, input) {\n        // The first 8 bytes is supposed to be the length, but it seems like it is really the length - 4..\n        const outputChunks = [];\n        const offset = encrypt ? 0 : PACKAGE_OFFSET;\n\n        // The package is encoded in chunks. Encrypt/decrypt each and concat.\n        let i = 0, start = 0, end = 0;\n        while (end < input.length) {\n            start = end;\n            end = start + PACKAGE_ENCRYPTION_CHUNK_SIZE;\n            if (end > input.length) end = input.length;\n\n            // Grab the next chunk\n            let inputChunk = input.slice(start + offset, end + offset);\n\n            // Pad the chunk if it is not an integer multiple of the block size\n            const remainder = inputChunk.length % blockSize;\n            if (remainder) inputChunk = Buffer.concat([inputChunk, Buffer.alloc(blockSize - remainder)]);\n\n            // Create the initialization vector\n            const iv = this._createIV(hashAlgorithm, saltValue, blockSize, i);\n\n            // Encrypt/decrypt the chunk and add it to the array\n            const outputChunk = this._crypt(encrypt, cipherAlgorithm, cipherChaining, key, iv, inputChunk);\n            outputChunks.push(outputChunk);\n\n            i++;\n        }\n\n        // Concat all of the output chunks.\n        let output = Buffer.concat(outputChunks);\n\n        if (encrypt) {\n            // Put the length of the package in the first 8 bytes\n            output = Buffer.concat([this._createUInt32LEBuffer(input.length, PACKAGE_OFFSET), output]);\n        } else {\n            // Truncate the buffer to the size in the prefix\n            const length = input.readUInt32LE(0);\n            output = output.slice(0, length);\n        }\n\n        return output;\n    }\n\n    /**\n     * Create a buffer of an integer encoded as a uint32le\n     * @param {number} value - The integer to encode\n     * @param {number} [bufferSize=4] The output buffer size in bytes\n     * @returns {Buffer} The buffer\n     * @private\n     */\n    _createUInt32LEBuffer(value, bufferSize = 4) {\n        const buffer = Buffer.alloc(bufferSize);\n        buffer.writeUInt32LE(value, 0);\n        return buffer;\n    }\n\n    /**\n     * Convert a password into an encryption key\n     * @param {string} password - The password\n     * @param {string} hashAlgorithm - The hash algoritm\n     * @param {Buffer} saltValue - The salt value\n     * @param {number} spinCount - The spin count\n     * @param {number} keyBits - The length of the key in bits\n     * @param {Buffer} blockKey - The block key\n     * @returns {Buffer} The encryption key\n     * @private\n     */\n    _convertPasswordToKey(password, hashAlgorithm, saltValue, spinCount, keyBits, blockKey) {\n        // Password must be in unicode buffer\n        const passwordBuffer = Buffer.from(password, 'utf16le');\n\n        // Generate the initial hash\n        let key = this._hash(hashAlgorithm, saltValue, passwordBuffer);\n\n        // Now regenerate until spin count\n        for (let i = 0; i < spinCount; i++) {\n            const iterator = this._createUInt32LEBuffer(i);\n            key = this._hash(hashAlgorithm, iterator, key);\n        }\n\n        // Now generate the final hash\n        key = this._hash(hashAlgorithm, key, blockKey);\n\n        // Truncate or pad as needed to get to length of keyBits\n        const keyBytes = keyBits / 8;\n        if (key.length < keyBytes) {\n            const tmp = Buffer.alloc(keyBytes, 0x36);\n            key.copy(tmp);\n            key = tmp;\n        } else if (key.length > keyBytes) {\n            key = key.slice(0, keyBytes);\n        }\n\n        return key;\n    }\n\n    /**\n     * Create an initialization vector (IV)\n     * @param {string} hashAlgorithm - The hash algorithm\n     * @param {Buffer} saltValue - The salt value\n     * @param {number} blockSize - The size of the IV\n     * @param {Buffer|number} blockKey - The block key or an int to convert to a buffer\n     * @returns {Buffer} The IV\n     * @private\n     */\n    _createIV(hashAlgorithm, saltValue, blockSize, blockKey) {\n        // Create the block key from the current index\n        if (typeof blockKey === \"number\") blockKey = this._createUInt32LEBuffer(blockKey);\n\n        // Create the initialization vector by hashing the salt with the block key.\n        // Truncate or pad as needed to meet the block size.\n        let iv = this._hash(hashAlgorithm, saltValue, blockKey);\n        if (iv.length < blockSize) {\n            const tmp = Buffer.alloc(blockSize, 0x36);\n            iv.copy(tmp);\n            iv = tmp;\n        } else if (iv.length > blockSize) {\n            iv = iv.slice(0, blockSize);\n        }\n\n        return iv;\n    }\n}\n\nmodule.exports = Encryptor;\n","\n\nconst sax = require(\"sax\");\nconst externals = require(\"./externals\");\n\n// Regex to check if string is all whitespace.\nconst allWhitespaceRegex = /^\\s+$/;\n\n/**\n * XML parser.\n * @private\n */\nclass XmlParser {\n    /**\n     * Parse the XML text into a JSON object.\n     * @param {string} xmlText - The XML text.\n     * @returns {{}} The JSON object.\n     */\n    parseAsync(xmlText) {\n        return new externals.Promise((resolve, reject) => {\n            // Create the SAX parser.\n            const parser = sax.parser(true);\n\n            // Parsed is the full parsed object. Current is the current node being parsed. Stack is the current stack of\n            // nodes leading to the current one.\n            let parsed, current;\n            const stack = [];\n\n            // On error: Reject the promise.\n            parser.onerror = reject;\n\n            // On text nodes: If it is all whitespace, do nothing. Otherwise, try to convert to a number and add as a child.\n            parser.ontext = text => {\n                if (allWhitespaceRegex.test(text)) {\n                    if (current && current.attributes['xml:space'] === 'preserve') {\n                        current.children.push(text);\n                    }\n                } else {\n                    current.children.push(this._covertToNumberIfNumber(text));\n                }\n            };\n\n            // On open tag start: Create a child element. If this is the root element, set it as parsed. Otherwise, add\n            // it as a child to the current node.\n            parser.onopentagstart = node => {\n                const child = { name: node.name, attributes: {}, children: [] };\n                if (current) {\n                    current.children.push(child);\n                } else {\n                    parsed = child;\n                }\n\n                stack.push(child);\n                current = child;\n            };\n\n            // On close tag: Pop the stack.\n            parser.onclosetag = node => {\n                stack.pop();\n                current = stack[stack.length - 1];\n            };\n\n            // On attribute: Try to convert the value to a number and add to the current node.\n            parser.onattribute = attribute => {\n                current.attributes[attribute.name] = this._covertToNumberIfNumber(attribute.value);\n            };\n\n            // On end: Resolve the promise.\n            parser.onend = () => resolve(parsed);\n\n            // Start parsing the text.\n            parser.write(xmlText).close();\n        });\n    }\n\n    /**\n     * Convert the string to a number if it looks like one.\n     * @param {string} str - The string to convert.\n     * @returns {string|number} The number if converted or the string if not.\n     * @private\n     */\n    _covertToNumberIfNumber(str) {\n        const num = Number(str);\n        return num.toString() === str ? num : str;\n    }\n}\n\nmodule.exports = XmlParser;\n","\n\nconst _ = require(\"lodash\");\n\nconst XML_DECLARATION = `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>`;\n\n/**\n * XML document builder.\n * @private\n */\nclass XmlBuilder {\n    /**\n     * Build an XML string from the JSON object.\n     * @param {{}} node - The node.\n     * @returns {string} The XML text.\n     */\n    build(node) {\n        this._i = 0;\n        const xml = this._build(node, '');\n        if (xml === '') return;\n        return XML_DECLARATION + xml;\n    }\n\n    /**\n     * Build the XML string. (This is the internal recursive method.)\n     * @param {{}} node - The node.\n     * @param {string} xml - The initial XML doc string.\n     * @returns {string} The generated XML element.\n     * @private\n     */\n    _build(node, xml) {\n        // For CPU performance, JS engines don't truly concatenate strings; they create a tree of pointers to\n        // the various concatenated strings. The downside of this is that it consumes a lot of memory, which\n        // will cause problems with large workbooks. So periodically, we grab a character from the xml, which\n        // causes the JS engine to flatten the tree into a single string. Do this too often and CPU takes a hit.\n        // Too frequently and memory takes a hit. Every 100k nodes seems to be a good balance.\n        if (this._i++ % 1000000 === 0) {\n            this._c = xml[0];\n        }\n\n        // If the node has a toXml method, call it.\n        if (node && _.isFunction(node.toXml)) node = node.toXml();\n\n        if (_.isObject(node)) {\n            // If the node is an object, then it maps to an element. Check if it has a name.\n            if (!node.name) throw new Error(`XML node does not have name: ${JSON.stringify(node)}`);\n\n            // Add the opening tag.\n            xml += `<${node.name}`;\n\n            // Add any node attributes\n            _.forOwn(node.attributes, (value, name) => {\n                xml += ` ${name}=\"${this._escapeString(value, true)}\"`;\n            });\n\n            if (_.isEmpty(node.children)) {\n                // Self-close the tag if no children.\n                xml += \"/>\";\n            } else {\n                xml += \">\";\n                \n                // Recursively add any children.\n                _.forEach(node.children, child => {\n                    // Add the children to the XML.\n                    xml = this._build(child, xml);\n                });\n\n                // Close the tag.\n                xml += `</${node.name}>`;\n            }\n        } else if (!_.isNil(node)) {\n            // It not an object, this should be a text node. Just add it.\n            xml += this._escapeString(node);\n        }\n\n        // Return the updated XML element.\n        return xml;\n    }\n\n    /**\n     * Escape a string for use in XML by replacing &, \", ', <, and >.\n     * @param {*} value - The value to escape.\n     * @param {boolean} [isAttribute] - A flag indicating if this is an attribute.\n     * @returns {string} The escaped string.\n     * @private\n     */\n    _escapeString(value, isAttribute) {\n        if (_.isNil(value)) return value;\n        value = value.toString()\n            .replace(/&/g, \"&amp;\") // Escape '&' first as the other escapes add them.\n            .replace(/</g, \"&lt;\")\n            .replace(/>/g, \"&gt;\");\n\n        if (isAttribute) {\n            value = value.replace(/\"/g, \"&quot;\");\n        }\n\n        return value;\n    }\n}\n\nmodule.exports = XmlBuilder;\n"]}